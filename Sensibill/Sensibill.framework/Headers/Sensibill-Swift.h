#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SENSIBILL_SWIFT_H
#define SENSIBILL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Sensibill",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)




/// Provides listeners with updates on SDK events and user actions
SWIFT_CLASS_NAMED("Analytics")
@interface SBLAnalytics : NSObject
/// A singleton instance of the Analytics
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLAnalytics * _Nonnull shared;)
+ (SBLAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSString;
@protocol SBLEventListener;

@interface SBLAnalytics (SWIFT_EXTENSION(Sensibill))
/// Adds a listener, or replaces the listener with the provided instance, if a listener with the same key already exists.
/// \param key the string used to identify the listener.
///
/// \param listener an instance of the listener
///
- (void)addListenerWithKey:(NSString * _Nonnull)key listener:(id <SBLEventListener> _Nonnull)listener;
/// Removes a listener with the provided key
- (void)removeListenerWithKey:(NSString * _Nonnull)key;
@end


/// Defines the branding to be used in SDK.
SWIFT_CLASS_NAMED("Branding")
@interface SBLBranding : NSObject
/// Initialize the Branding with default providers
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class SBLBrandingFontsBridge;
@class SBLBrandingColorsBridge;
@class SBLBrandingImagesBridge;

/// The Objective-C bridge for <code>SBLBranding</code>
SWIFT_CLASS_NAMED("ObjCBridge")
@interface SBLBrandingBridge : NSObject
/// Defines the fonts to be used. By default uses system font.
@property (nonatomic, strong) SBLBrandingFontsBridge * _Nonnull fonts;
/// Defines the colors tobe used. By default uses the Sensibill colors
@property (nonatomic, strong) SBLBrandingColorsBridge * _Nonnull colors;
/// Defines the images to be used (e.g. for icons). By default uses system images, and some Sensibill-provided images
@property (nonatomic, strong) SBLBrandingImagesBridge * _Nonnull images;
/// Initialize the bridge.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class SBLBrandingFontDefinition;

/// The Objective-C bridge that allows to define fonts used by SDK. Corresponds to <code>BrandingFontsProvider</code> implementation in Swift.
/// <em>Note:</em> Currently only Capture fonts customization is supported in Objective-C
SWIFT_CLASS_NAMED("FontsObjCBridge")
@interface SBLBrandingFontsBridge : NSObject
/// Large Title. Default: a system font of style <code>.largeTitle</code> (default size: 34pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable largeTitle;
/// Title 2. Default: a system font of style <code>.title2</code> (default size: 22pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable title2;
/// Title 3. Default: a system font of style <code>.title3</code> (default size: 20pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable title3;
/// Body. Default: a system font of style <code>.body</code> (default size: 17pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable body;
/// Subhead. Default: a system font of style <code>.subheadline</code> (default size: 15pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable subheadline;
/// Footnote. Default: a system font of style <code>.footnote</code> (default size: 13pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable footnote;
/// Caption. Default: a system font of style <code>.caption</code> / <code>.caption1</code> (default size: 12pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable caption;
/// Caption 2. Default: a system font of style <code>.caption2</code> (default size: 11pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable caption2;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class NSBundle;

/// The Objective-C bridge that allows to define resources used by SDK. Corresponds to <code>Branding.Resources</code>
SWIFT_CLASS_NAMED("ResourcesObjCBridge")
@interface SBLBrandingResourcesBridge : NSObject
/// Allows to provide a custom bundle to override existing localization strings, and provide localization for additional languages.
/// If the <code>localizationBundle</code> is specified, the SDK will first check for localization string in the provided <code>localizationBundle</code>
/// If the <code>localizationBundle</code> was not specified, or doesn’t contain a specific localization string, the default SDK localization string will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable localizationBundle;)
+ (NSBundle * _Nullable)localizationBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationBundle:(NSBundle * _Nullable)newValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class UIImage;

/// The Objective-C bridge that allows to define icons and images used by SDK. Corresponds to <code>BrandingImagesProvider</code> implementation in Swift.
/// <em>Note:</em> Currently only Capture images and icons customization is supported in Objective-C
SWIFT_CLASS_NAMED("ImagesObjCBridge")
@interface SBLBrandingImagesBridge : NSObject
/// Capture - Common - Close icon
@property (nonatomic, strong) UIImage * _Nullable captureCloseIcon;
/// Capture - Common - Back icon
@property (nonatomic, strong) UIImage * _Nullable captureBackIcon;
/// Capture - Common - Previous page icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviousPageIcon;
/// Capture - Common - Next page icon
@property (nonatomic, strong) UIImage * _Nullable captureNextPageIcon;
/// Capture - Capture Screen - Tips icon
@property (nonatomic, strong) UIImage * _Nullable captureTipsIcon;
/// Capture - Capture Screen - Auto-Capture icon - On
@property (nonatomic, strong) UIImage * _Nullable captureAutoCaptureIconOn;
/// Capture - Capture Screen - Auto-Capture icon - Off
@property (nonatomic, strong) UIImage * _Nullable captureAutoCaptureIconOff;
/// Capture - Capture Screen - Flash icon - On
@property (nonatomic, strong) UIImage * _Nullable captureFlashIconOn;
/// Capture - Capture Screen - Flash icon - Off
@property (nonatomic, strong) UIImage * _Nullable captureFlashIconOff;
/// Capture - Capture Screen - Gallery icon
@property (nonatomic, strong) UIImage * _Nullable captureGalleryIcon;
/// Capture - Capture Screen - Capture icon
@property (nonatomic, strong) UIImage * _Nullable captureCaptureIcon;
/// Capture - Tips - Close icon
@property (nonatomic, strong) UIImage * _Nullable captureTipsCloseIcon;
/// Capture - Tips - Flaten tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsFlatenIcon;
/// Capture - Tips - Hold Steady tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsSteadyIcon;
/// Capture - Tips - Image Brightness tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsBrightIcon;
/// Capture - Tips - Long Receipt tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsLongIcon;
/// Capture - Preview - Add Page icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewAddPageIcon;
/// Capture - Preview - Retake icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewRetakeIcon;
/// Capture - Preview - Discard icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewDiscardIcon;
/// Capture - Preview - Crop icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewCropIcon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class UIFont;

/// Encapsulates font definition for branding
SWIFT_CLASS_NAMED("FontDefinition")
@interface SBLBrandingFontDefinition : NSObject
/// The font for usage with UIKit components
@property (nonatomic, strong) UIFont * _Nonnull uiFont;
/// initializes the font definition, based on provided custom font name, size and style
/// \param name the name of the custom font. The name must incorporate both the font family name and the specific style information for the font.
///
/// \param size the size of font in points. This value must be greater than 0.0.
///
/// \param style the <code>TextStyle</code> to scale relatively to. The value is used to construct <code>uiFont</code>, and is converted to <code>Font.TextStyle</code> to construct <code>font</code> property. Later the value is used for <code>uiFont</code> when accessibility adjustments are required.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name size:(CGFloat)size style:(UIFontTextStyle _Nonnull)style;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class UIColor;

/// The Objective-C bridge that allows to define colors used by SDK. Corresponds to <code>BrandingColorsProvider</code> implementation in Swift.
SWIFT_CLASS_NAMED("ColorsObjCBridge")
@interface SBLBrandingColorsBridge : NSObject
/// A neutral color used for background of the views. Default: <code>#d9e1e6</code>
@property (nonatomic, strong) UIColor * _Nullable background;
/// Non-actionable text and graphics shown on <code>background</code>. Default: <code>#141414</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>background</code> (WGAC 2.1)
///   </li>
///   <li>
///     Recommended to have less contrast with <code>background</code> than <code>focus</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onBackground;
/// The primary brand color. Default: <code>#0079C1</code>
/// <ul>
///   <li>
///     Must stand out on <code>background</code>
///   </li>
///   <li>
///     Must stand out on Capture screens background (<code>black</code> by default)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable primary;
/// A lighter or a darker variant of the <code>primary</code> color. Default: <code>#003d61</code>
/// <ul>
///   <li>
///     Used as a background of the primary action button.
///   </li>
///   <li>
///     Must be similar in lightness to <code>primary</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable primaryVariant;
/// Text and graphics on<code>primary</code> and <code>primaryVariant</code> colors. Default: <code>#FFFFFF</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>primary</code> and <code>primaryVariant</code> colors (WGAC 2.1)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onPrimary;
/// The secondary brand color. Default: <code>#b3c2cc</code>
/// <ul>
///   <li>
///     Must stand out on Capture screens background (<code>black</code> by default)
///   </li>
///   <li>
///     Recommended to have less contrast than <code>primary</code> on Capture screens background (<code>black</code> by default)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable secondary;
/// Text and graphics on<code>secondary</code> color. Default: <code>#141414</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>secondary</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onSecondary;
/// Defines the color of surfaces of components, such as cards, sheets, and menus. Default: <code>#ffffff</code>
/// <ul>
///   <li>
///     Must be visible on <code>background</code>
///   </li>
///   <li>
///     Recommended to define as a lighter or darker variation of the <code>background</code> color.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable surface;
/// An accent background on top of <code>surface</code>. Default: <code>#e8f5fc</code>
/// <ul>
///   <li>
///     Must be a close (lighter or darker) variation of the <code>surface</code> color.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable surfaceVariant;
/// Non-actionable text and graphics on top of <code>surface</code>or <code>surfaceVariant</code>  colors. Default: <code>#4d4d4d</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>surface</code> and <code>surfaceVariant</code> (WGAC 2.1)
///   </li>
///   <li>
///     Recommended to have less contrast with <code>surface</code>/  <code>surfaceVariant</code> than <code>focus</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onSurface;
/// Actionable items and important graphics to help focus user’s attention on. May be displayed on <code>background</code>, <code>surface</code>, or <code>surfaceVariant</code>. Default: <code>#1c91d6</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>background</code>, <code>surface</code>, and <code>surfaceVariant</code> colors (WGAC 2.1)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable focus;
/// The color or the error messages. May be displayed on <code>background</code>, <code>surface</code>, or <code>surfaceVariant</code>. Default: <code>#C30000</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>background</code>, <code>surface</code>, and <code>surfaceVariant</code> colors (WGAC 2.1)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable error;
/// The color of background on Capture’s screen related to taking and editing the image. Default: <code>.black</code>
@property (nonatomic, strong) UIColor * _Nullable captureBackground;
/// The color of foreground on Capture’s screen related to taking and editing the image. Default: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nullable onCaptureBackground;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end
























@protocol SBLCaptureFlowCoordinatorDelegate;

/// Captures document image and submit for processing to sensibill document engine.
SWIFT_CLASS_NAMED("CaptureFlowCoordinator")
@interface SBLCaptureFlowCoordinator : NSObject
/// Receives one or more event associated with document capturing and processing.
@property (nonatomic, weak) id <SBLCaptureFlowCoordinatorDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLCaptureFlowCoordinator (SWIFT_EXTENSION(Sensibill))
@end


/// Holds result when <code>CaptureFlowCoordinator</code> did finish capturing document(s).
SWIFT_CLASS_NAMED("DidFinishCaptureResult")
@interface SBLCaptureFlowCoordinatorDidFinishCaptureResult : NSObject
/// one or more source ids of captured document(s) submitted for processing.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull sourceIds;
/// Initializes object with local ids.
/// \param sourceIds source ids of document(s) submitted for processing.
///
- (nonnull instancetype)initWithSourceIds:(NSArray<NSString *> * _Nonnull)sourceIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBLDocumentMetadata;

@interface SBLCaptureFlowCoordinator (SWIFT_EXTENSION(Sensibill))
/// Start capture flow.
- (void)start;
/// Start document capture flow with specified metadata.
/// <em>Only for use when client is configured to use Sensibill API version 2</em>
/// \param metadata Instance of <code>DocumentMetadata</code>
///
- (void)startWithMetadata:(SBLDocumentMetadata * _Nonnull)metadata;
@end



/// A conforming class would receive one or more events triggered by <code>CaptureFlowCoordinator</code>
SWIFT_PROTOCOL_NAMED("CaptureFlowCoordinatorDelegate")
@protocol SBLCaptureFlowCoordinatorDelegate <NSObject>
@optional
/// Informs that user that the capture flow is about to be shown and started.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorWillBeginCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@required
/// Informs that user has finished capturing document(s).
/// \param coordinator coordinator managing document capture and process flow.
///
/// \param result result containing 1 or more sourceIds of the captured document and submitted for processing.
///
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator result:(SBLCaptureFlowCoordinatorDidFinishCaptureResult * _Nonnull)result;
/// Informs that user cancelled receipt capture.
/// Event would be triggered if user cancels onboarding flow for the first time otherwise user explicitly taps on cancel button on capture screen.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@end

@class SBLCaptureRuntimeSettings;
@protocol SBLCaptureNavigationControllerDelegate;
@class NSCoder;
@class UIViewController;

/// The entry point of the module used by an integrator to create and configure Sensibill Capture
SWIFT_CLASS_NAMED("CaptureNavigationController")
@interface SBLCaptureNavigationController : UINavigationController
/// Represents current capture configuration.
@property (nonatomic, readonly, strong) SBLCaptureRuntimeSettings * _Nonnull settings;
/// Receives one or more event associated with capture.
@property (nonatomic, weak) id <SBLCaptureNavigationControllerDelegate> _Nullable captureDelegate;
/// Initializes capture navigation controller using the default <code>Capture.RuntimeSettings</code>.
- (nonnull instancetype)init;
/// Initializes capture navigation controller with the provided <code>Capture.RuntimeSettings</code>.
/// \param settings <code>Capture.RuntimeSettings</code> holding one or more capture features and style.
///
- (nonnull instancetype)initWithSettings:(SBLCaptureRuntimeSettings * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class SBLCaptureResult;

/// Delegate exposed to Integrator’s app to receive finished photo
SWIFT_PROTOCOL_NAMED("CaptureNavigationControllerDelegate")
@protocol SBLCaptureNavigationControllerDelegate
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture
///
/// \param images an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), empty array is returned.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didCapture:(NSArray<UIImage *> * _Nonnull)images SWIFT_UNAVAILABLE_MSG("Removed in 2021.5.0. Please use captureNavigationController(_:didFinishCapture:) instead.");
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture.
///
/// \param result instance of <code>CaptureResult</code> with an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), the result will contain an empty array of images.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didFinishCapture:(SBLCaptureResult * _Nonnull)result;
@end

@class NSData;

/// Represents capture completion result provided via <code>CaptureNavigationControllerDelegate</code> method.
SWIFT_CLASS_NAMED("CaptureResult")
@interface SBLCaptureResult : NSObject
/// Returns captured images as a data in JPEG format. If no images were captured, an empty array will be returned.
/// The provided data can be displayed as an image using <code>UIImage(data: Data)</code>,
/// or stored in a file using <code>Data.write(to: URL, options: Data.WritingOptions)</code>.
/// You can also use <code>Data.metadata</code> and <code>Data.getLocation()</code> to retrieve an EXIF data available in the image.
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull images;
/// Returns <code>true</code> if the result contains no images (e.g. user cancelled the capture)
@property (nonatomic, readonly) BOOL isEmpty;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Current Client Identity.
SWIFT_CLASS_NAMED("ClientIdentity")
@interface SBLClientIdentity : NSObject
/// Currently used client token.
@property (nonatomic, copy) NSString * _Nullable accessToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Defines the credentials to access API.
SWIFT_CLASS_NAMED("Credentials")
@interface SBLCredentials : NSObject <NSSecureCoding>
/// See: <code>NSSecureCoding</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// OAuth 2.0 Access Token
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// OAuth 2.0 Refresh Token
@property (nonatomic, copy) NSString * _Nullable refreshToken;
/// Instantiates credential object.
/// \param accessToken the access token.
///
/// \param refreshToken the refresh token.
///
- (nullable instancetype)initWithAccessToken:(NSString * _Nullable)accessToken refreshToken:(NSString * _Nullable)refreshToken OBJC_DESIGNATED_INITIALIZER;
/// See: <code>NSSecureCoding</code>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
/// See: <code>NSSecureCoding</code>
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







/// Document Metadata.
SWIFT_CLASS_NAMED("DocumentMetadata")
@interface SBLDocumentMetadata : NSObject <NSSecureCoding>
/// See: <code>NSSecureCoding</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBLDocumentMetadata (SWIFT_EXTENSION(Sensibill))
@end

enum SBLAPIModelDocumentType : NSInteger;

/// Provides a convenience interface for building <code>DocumentMetadata</code>
SWIFT_CLASS_NAMED("Builder")
@interface SBLDocumentMetadataBuilder : NSObject
/// Objective-C use only. Initializes the builder for given document type.
- (nonnull instancetype)initWithSblDocumentType:(enum SBLAPIModelDocumentType)sblDocumentType OBJC_DESIGNATED_INITIALIZER;
/// Add document description.
- (SBLDocumentMetadataBuilder * _Nonnull)addWithDocumentDescription:(NSString * _Nullable)documentDescription SWIFT_WARN_UNUSED_RESULT;
/// Add account number.
- (SBLDocumentMetadataBuilder * _Nonnull)addWithAccountNumber:(NSString * _Nullable)accountNumber SWIFT_WARN_UNUSED_RESULT;
/// Add account transaction ID.
- (SBLDocumentMetadataBuilder * _Nonnull)addWithAccountTransactionID:(NSString * _Nullable)accountTransactionID SWIFT_WARN_UNUSED_RESULT;
/// Build document metadata object.
- (SBLDocumentMetadata * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the common identity-related properties and functions required to implement <code>APIDataService</code>
SWIFT_CLASS("_TtC9Sensibill20IdentityBasedService")
@interface IdentityBasedService : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The service responsible for uploading and monitoring the document processing
SWIFT_CLASS_NAMED("DocumentUploadService")
@interface SBLDocumentUploadService : IdentityBasedService
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
@end


















@interface SBLDocumentUploadService (SWIFT_EXTENSION(Sensibill))
/// Obtain source IDs of all stored documents.
/// <ul>
///   <li>
///     Throws an exception if there is no access to stored documents (e.g. service is stopping).
///   </li>
///   <li>
///     Returns the <code>Set<String></code> which contains all source IDs known to <code>DocumentUploadService</code>.
///     Notes:
///   </li>
///   <li>
///     The source ID is assigned to the document by <code>add</code> function.
///   </li>
///   <li>
///     If an empty set is returned, it means there are currently no documents for current user
///   </li>
/// </ul>
- (NSSet<NSString *> * _Nullable)allSourceIdsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Resends the last notification for the provided source ID.
/// <ul>
///   <li>
///     Throws an exception if the provided source ID was not found, or no access to stored documents (e.g. service is stopping).
///   </li>
/// </ul>
/// Note:
/// The notification will not be sent if there was no notification for this source ID yet (i.e. it was not uploaded yet).
/// In this case the caller should expect a notification once the item progresses to the next stage of processing (e.g. is uploaded or fails)
/// \param sourceId the source IDs to notify about
///
- (BOOL)renotifyWithSourceId:(NSString * _Nonnull)sourceId error:(NSError * _Nullable * _Nullable)error;
@end



@interface SBLDocumentUploadService (SWIFT_EXTENSION(Sensibill))
/// For use in Objective-C only. In Swift, use <code>add(source:metadata:)</code>
/// <ul>
///   <li>
///     Returns an ID by which an item can be monitored or queried
///   </li>
///   <li>
///     Throws an <code>Error</code> if an item was not accepted for uploading.
///   </li>
/// </ul>
/// \param source the image to upload
///
/// \param metadata the documentMetadata
///
- (NSString * _Nullable)addSource:(NSData * _Nonnull)source metadata:(SBLDocumentMetadata * _Nonnull)metadata error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Remove the source and information related to a provided source ID.
/// <ul>
///   <li>
///     Throws an exception if the provided source ID was not found, or no access to stored documents (e.g. service is stopping).
///   </li>
/// </ul>
/// Note:
/// The operation is final and cannot be undone
/// \param sourceId the source IDs to remove
///
- (BOOL)removeWithSourceId:(NSString * _Nonnull)sourceId error:(NSError * _Nullable * _Nullable)error;
@end

@protocol SBLDocumentUploadObserver;

@interface SBLDocumentUploadService (SWIFT_EXTENSION(Sensibill))
/// For use with Objective-C only. Add an observer to receive notifications about document upload status
/// \param observer an instance of DocumentUploadObserver
///
/// \param key the observer identifier key. Allows to replace or remove observer.
///
- (void)addObserver:(id <SBLDocumentUploadObserver> _Nonnull)observer key:(NSString * _Nonnull)key;
/// Remove an observer
/// \param forKey the key of the observer to remove.
///
- (void)removeObserverForKey:(NSString * _Nonnull)forKey;
@end

@class SBLTrackingEvent;

/// A type that receives <code>Analytics</code> notifications.
SWIFT_PROTOCOL_NAMED("EventListener")
@protocol SBLEventListener
/// A notification when <code>TrackingEvent</code> is received
/// \param event the <code>TrackingEvent</code> object received
///
- (void)onSensibillEvent:(SBLTrackingEvent * _Nonnull)event;
@end


/// Defines capture feature flags used in SDK
SWIFT_CLASS_NAMED("FeatureFlags")
@interface SBLCaptureFeatureFlags : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLCaptureFeatureFlags (SWIFT_EXTENSION(Sensibill))
@end

@class NSNumber;

/// The Objective-C bridge for <code>Capture.FeatureFlags</code>
SWIFT_CLASS_NAMED("ObjCBridge")
@interface SBLCaptureFeatureFlagsBridge : NSObject
/// Allows to attach the device’s current location to the captured image. When set to <code>true</code>, the user must grant a location permission before launching capture. Default: <code>false</code>
@property (nonatomic, strong) NSNumber * _Nullable attachLocationData;
/// Compress capture result to compatible with Sensibill API. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable compressForSensibillApi;
/// Starts the capture screen with auto-capture mode enabled by default. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable defaultToAutoCapture;
/// Enables the auto-capture feature. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableAutoCapture;
/// Provides a warning on the preview screen if the image is blurry. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableBlurDetection;
/// Enables the visibility of feedback label utilized to show various capturing receipt state for user. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableCaptureProgressFeedback;
/// Enables the ability to crop captured images. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableCrop;
/// Enables the ability to toggle the device’s flash on/off to help capture in low-light situations. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableFlash;
/// Enables the user to select an image from their phone’s image gallery. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableImageGallery;
/// Enables the feedback toast on long receipt capture screen. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableLongReceiptPageToast;
/// Enables the long receipt capture feature - capturing a long receipt with a top and bottom image. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableLongCapture;
/// Enables the ability to show capture tips screen. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableCaptureTips;
/// Enables the integrator to define number of image(s) the user can capture and/or select in single capture session. Default: 1. Valid Range: (1, 10).
/// Value when set to more than 1 will enable adding multiple image during single capture session.
@property (nonatomic, strong) NSNumber * _Nullable maxImages;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








@protocol SBLTokenProvider;
@class SBLUserIdentity;

/// The service encapsulates the current user context for authentication and authorization.
SWIFT_CLASS_NAMED("IdentityService")
@interface SBLIdentityService : NSObject
/// An instance of <code>TokenProvider</code> provided on start
@property (nonatomic, readonly, strong) id <SBLTokenProvider> _Nullable tokenProvider;
/// Defines a current API client identity
@property (nonatomic, readonly, strong) SBLClientIdentity * _Nonnull clientIdentity;
/// Defines a current user identity
@property (nonatomic, readonly, strong) SBLUserIdentity * _Nonnull userIdentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLIdentityService (SWIFT_EXTENSION(Sensibill))
@end

/// Errors that can occur while refreshing token.
typedef SWIFT_ENUM(NSInteger, Errors, open) {
/// Service did not attempt to refesh a token. This could be due to configuration issues (missing <code>tokenProvider</code>, no <code>User</code> in context), or due to the state of the SDK (stoping, or not started)
  ErrorsRefreshTokenWasNotAttempted = 0,
/// Attempt to refresh a token had failed. Either <code>Error</code>, or no <code>Credentails</code> were returned.
  ErrorsRefreshTokenFailed = 1,
/// Logout failed
  ErrorsLogoutFailed = 2,
/// Current SDK context is missing user identifier
  ErrorsMissingUserIdentifier = 3,
};
static NSString * _Nonnull const ErrorsDomain = @"Sensibill.IdentityService.Errors";





@interface SBLIdentityService (SWIFT_EXTENSION(Sensibill))
/// Saves the provided credentials in the <code>userIdentity</code> and the Keychain
- (void)registerWithNewCredentials:(SBLCredentials * _Nullable)newCredentials userIdentifier:(NSString * _Nullable)userIdentifier;
@end


@interface SBLIdentityService (SWIFT_EXTENSION(Sensibill))
/// Refreshes token by calling a <code>tokenProvider</code>, and registers new credentials. Legacy function, use <code>updateToken(for:completion)</code> instead
- (void)updateTokenWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end








@class CLLocation;

@interface NSData (SWIFT_EXTENSION(Sensibill))
/// Returns the image metadata. For use with Objective-C only. Use <code>Data</code>’s property with the same name in Swift.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable metadata;
/// Returns the GPS coordinates from an image’s exif data. For use with Objective-C only. Use <code>Data</code>’s function with the same name in Swift.
- (CLLocation * _Nullable)getLocation SWIFT_WARN_UNUSED_RESULT;
@end







@interface SBLCaptureFeatureFlagsBridge (SWIFT_EXTENSION(Sensibill))
/// Convert the provided bridge properties to the <code>SBLCaptureFeatureFlags</code>
/// <em>Note</em>: the defaults will be set automatically for the flags that ere not provided, only change the flags you’d like the non-default value for.
- (SBLCaptureFeatureFlags * _Nonnull)convertToFeatureFlags SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBLBrandingBridge (SWIFT_EXTENSION(Sensibill))
/// Convert the provided bridge properties to the <code>SBLBranding</code>
/// <em>Note</em>: the defaults will be set automatically for the flags that ere not provided, only change the flags you’d like the non-default value for.
- (SBLBranding * _Nonnull)convertToBranding SWIFT_WARN_UNUSED_RESULT;
@end


















/// Allows an integrator to pass configurable options to a Capture Screen
SWIFT_CLASS_NAMED("RuntimeSettings")
@interface SBLCaptureRuntimeSettings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLCaptureRuntimeSettings (SWIFT_EXTENSION(Sensibill))
/// Provides <code>RuntimeSettings</code> for capturing receipts. This is the default, most basic configuration.
+ (SBLCaptureRuntimeSettings * _Nonnull)receiptWithBranding:(SBLBranding * _Nullable)branding featureFlags:(SBLCaptureFeatureFlags * _Nonnull)featureFlags SWIFT_WARN_UNUSED_RESULT;
/// Provides <code>RuntimeSettings</code> for capturing an invoices. In this configuration the <code>enableLongCapture</code> feature is not available.
+ (SBLCaptureRuntimeSettings * _Nonnull)invoiceWithBranding:(SBLBranding * _Nullable)branding featureFlags:(SBLCaptureFeatureFlags * _Nonnull)featureFlags SWIFT_WARN_UNUSED_RESULT;
@end


/// For use with Objective-C only. In Swift, use <code>DocumentUploadObserver</code>
SWIFT_PROTOCOL("_TtP9Sensibill25SBLDocumentUploadObserver_")
@protocol SBLDocumentUploadObserver
/// Provides a notification when a document was uploaded.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param documentId the ID returned by API server for uploaded document
///
- (void)onDocumentUploadServiceDocumentUploadedWithSourceId:(NSString * _Nonnull)sourceId documentId:(NSString * _Nonnull)documentId;
/// Provides a notification when attempt to upload a document had failed. Uploading will be retried
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
- (void)onDocumentUploadServiceDocumentUploadFailedAttemptWithSourceId:(NSString * _Nonnull)sourceId;
/// Provides a notification when a document uploading permanently fails.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param cause the reason of the failure
///
- (void)onDocumentUploadServiceDocumentUploadPermanentlyFailedWithSourceId:(NSString * _Nonnull)sourceId cause:(NSString * _Nonnull)cause;
/// Provides a notification when a document was processed, and failed.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param documentId the ID returned by API server for the processed document
///
- (void)onDocumentUploadServiceDocumentProcessedFailedWithSourceId:(NSString * _Nonnull)sourceId documentId:(NSString * _Nonnull)documentId;
/// Provides a notification when a document was processed, and succeed.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param documentId the ID returned by API server for the processed document
///
- (void)onDocumentUploadServiceDocumentProcessedSuccessWithSourceId:(NSString * _Nonnull)sourceId documentId:(NSString * _Nonnull)documentId;
@end

/// <code>DocumentType</code> for use with Objective-C only. In Swift, use <code>SensibillAPIModel.DocumentType</code>
typedef SWIFT_ENUM_NAMED(NSInteger, SBLAPIModelDocumentType, "SensibillAPIModelDocumentType", open) {
/// Invoice
  SBLAPIModelDocumentTypeInvoice = 0,
/// Receipt.
  SBLAPIModelDocumentTypeReceipt = 1,
};


/// The SDK entry point. Encapsulates SDK state and access to other services.
SWIFT_CLASS("_TtC9Sensibill12SensibillSDK")
@interface SensibillSDK : NSObject
/// Singleton Instance of the Sensibill Class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SensibillSDK * _Nonnull shared;)
+ (SensibillSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// An instance of the IdentityService for a currently authenticated user.
@property (nonatomic, strong) SBLIdentityService * _Nonnull identityService;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
@end


SWIFT_CLASS_NAMED("Configuration")
@interface SBLSDKConfiguration : NSObject
/// Defines Capture configuration
@property (nonatomic, readonly, strong) SBLCaptureFeatureFlags * _Nonnull captureFeatureFlags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
@end


SWIFT_CLASS("_TtCC9Sensibill12SensibillSDK13StateProvider")
@interface StateProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
/// Provides the SDK version
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable sdkVersion;)
+ (NSString * _Nullable)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Provides the SDK build
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable sdkBuild;)
+ (NSString * _Nullable)sdkBuild SWIFT_WARN_UNUSED_RESULT;
@end


@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
/// The instance of document upload service
@property (nonatomic, readonly, strong) SBLDocumentUploadService * _Nonnull documentUploadService;
@end



@interface StateProvider (SWIFT_EXTENSION(Sensibill))
/// Returns <code>true</code> if current state is <code>stopping</code> to provide ability for other classes to not start initialization.
@property (nonatomic, readonly) BOOL isStopping;
@end


/// A type that interacts with Integration Server to provide Sensibill SDK with user credentials.
SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol SBLTokenProvider
/// A method that provides the new credentials: access and (optionally) refresh tokens. SDK will call this method when the current access token is no longer valid.
/// note:
///
/// <ul>
///   <li>
///     SDK will cache the provided credentials, and will only call this method when they become invalid. Therefore, <em>avoid returning a cached token</em>, retrieve a fresh token from your integration server instead.
///   </li>
///   <li>
///     <em>SDK expects the <code>completion</code> block to be executed in all cases</em>:
///     <ul>
///       <li>
///         Upon successful completion ensure the <code>Credentials</code> object with the new access token (and optionally a refresh token) is passed to a completion block. The error must remain nil in this case. Example: <code>completion(credentials, nil).</code>
///       </li>
///       <li>
///         If token retrieval failed, pass an <code>Error</code> object to the completion, and pass the <code>Credentials</code> as nil. Example: <code>completion(nil, MyErrors.tokenRetrievalFailed)</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userIdentifier The identifier of the user for whom the token is requested.
///
/// \param completion A block the caller expects to be executed upon token retrieval completion.
///
- (void)provideTokenReplacementWithUserIdentifier:(NSString * _Nonnull)userIdentifier completion:(void (^ _Nonnull)(SBLCredentials * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("TrackingEvent")
@interface SBLTrackingEvent : NSObject
/// All event fields as a dictionary.
/// The dictionary will contain <code>TrackingEvent.Fields</code>, as well as any other custom properties set for the event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
/// The initializer. Automatically sets the <code>SensibillSDK.shared.identityService.user?.accessID</code> value if available
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// Returns an instance of the event with provided name.
+ (SBLTrackingEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// The detailed description of the event
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(id _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)name;
/// Feature of the event
@property (nonatomic, copy) NSString * _Nullable feature;
/// Name of the event
@property (nonatomic, copy) NSString * _Nullable name;
/// Category of the event
@property (nonatomic, copy) NSString * _Nullable category;
/// Action that triggered event
@property (nonatomic, copy) NSString * _Nullable action;
/// The area of the UI where the event took place
@property (nonatomic, copy) NSString * _Nullable screenName;
/// A numeric value associated with the event
@property (nonatomic, strong) NSNumber * _Nullable value;
/// The name of the user associated with the event
@property (nonatomic, copy) NSString * _Nullable userId;
@end































/// Current User Identity.
SWIFT_CLASS_NAMED("UserIdentity")
@interface SBLUserIdentity : NSObject
/// Integrator supplied user identifier for currently authenticated user.
@property (nonatomic, readonly, copy) NSString * _Nullable userIdentifier;
/// Currently authenticated user’s credentials.
@property (nonatomic, readonly, strong) SBLCredentials * _Nullable credentials;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SENSIBILL_SWIFT_H
#define SENSIBILL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Sensibill",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)




/// Provides listeners with updates on SDK events and user actions
SWIFT_CLASS_NAMED("Analytics")
@interface SBLAnalytics : NSObject
/// A singleton instance of the Analytics
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLAnalytics * _Nonnull shared;)
+ (SBLAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSString;
@protocol SBLEventListener;

@interface SBLAnalytics (SWIFT_EXTENSION(Sensibill))
/// Adds a listener, or replaces the listener with the provided instance, if a listener with the same key already exists.
/// \param key the string used to identify the listener.
///
/// \param listener an instance of the listener
///
- (void)addListenerWithKey:(NSString * _Nonnull)key listener:(id <SBLEventListener> _Nonnull)listener;
/// Removes a listener with the provided key
- (void)removeListenerWithKey:(NSString * _Nonnull)key;
@end


/// Defines the branding to be used in SDK.
SWIFT_CLASS_NAMED("Branding")
@interface SBLBranding : NSObject
/// Initialize the Branding with default providers
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class SBLBrandingFontsBridge;
@class SBLBrandingColorsBridge;
@class SBLBrandingImagesBridge;

/// The Objective-C bridge for <code>SBLBranding</code>
SWIFT_CLASS_NAMED("ObjCBridge")
@interface SBLBrandingBridge : NSObject
/// Defines the fonts to be used. By default uses system font.
@property (nonatomic, strong) SBLBrandingFontsBridge * _Nonnull fonts;
/// Defines the colors tobe used. By default uses the Sensibill colors
@property (nonatomic, strong) SBLBrandingColorsBridge * _Nonnull colors;
/// Defines the images to be used (e.g. for icons). By default uses system images, and some Sensibill-provided images
@property (nonatomic, strong) SBLBrandingImagesBridge * _Nonnull images;
/// Initialize the bridge.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class SBLBrandingFontDefinition;

/// The Objective-C bridge that allows to define fonts used by SDK. Corresponds to <code>BrandingFontsProvider</code> implementation in Swift.
/// <em>Note:</em> Currently only Capture fonts customization is supported in Objective-C
SWIFT_CLASS_NAMED("FontsObjCBridge")
@interface SBLBrandingFontsBridge : NSObject
/// Large Title. Default: a system font of style <code>.largeTitle</code> (default size: 34pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable largeTitle;
/// Title 2. Default: a system font of style <code>.title2</code> (default size: 22pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable title2;
/// Title 3. Default: a system font of style <code>.title3</code> (default size: 20pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable title3;
/// Body. Default: a system font of style <code>.body</code> (default size: 17pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable body;
/// Subhead. Default: a system font of style <code>.subheadline</code> (default size: 15pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable subheadline;
/// Footnote. Default: a system font of style <code>.footnote</code> (default size: 13pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable footnote;
/// Caption. Default: a system font of style <code>.caption</code> / <code>.caption1</code> (default size: 12pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable caption;
/// Caption 2. Default: a system font of style <code>.caption2</code> (default size: 11pt)
@property (nonatomic, strong) SBLBrandingFontDefinition * _Nullable caption2;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class UIFont;

/// Encapsulates font definition for branding
SWIFT_CLASS_NAMED("FontDefinition")
@interface SBLBrandingFontDefinition : NSObject
/// The font for usage with UIKit components
@property (nonatomic, strong) UIFont * _Nonnull uiFont;
/// initializes the font definition, based on provided custom font name, size and style
/// \param name the name of the custom font. The name must incorporate both the font family name and the specific style information for the font.
///
/// \param size the size of font in points. This value must be greater than 0.0.
///
/// \param style the <code>TextStyle</code> to scale relatively to. The value is used to construct <code>uiFont</code>, and is converted to <code>Font.TextStyle</code> to construct <code>font</code> property. Later the value is used for <code>uiFont</code> when accessibility adjustments are required.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name size:(CGFloat)size style:(UIFontTextStyle _Nonnull)style;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class UIImage;

/// The Objective-C bridge that allows to define icons and images used by SDK. Corresponds to <code>BrandingImagesProvider</code> implementation in Swift.
/// <em>Note:</em> Currently only Capture images and icons customization is supported in Objective-C
SWIFT_CLASS_NAMED("ImagesObjCBridge")
@interface SBLBrandingImagesBridge : NSObject
/// Capture - Common - Close icon
@property (nonatomic, strong) UIImage * _Nullable captureCloseIcon;
/// Capture - Common - Back icon
@property (nonatomic, strong) UIImage * _Nullable captureBackIcon;
/// Capture - Common - Previous page icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviousPageIcon;
/// Capture - Common - Next page icon
@property (nonatomic, strong) UIImage * _Nullable captureNextPageIcon;
/// Capture - Capture Screen - Tips icon
@property (nonatomic, strong) UIImage * _Nullable captureTipsIcon;
/// Capture - Capture Screen - Auto-Capture icon - On
@property (nonatomic, strong) UIImage * _Nullable captureAutoCaptureIconOn;
/// Capture - Capture Screen - Auto-Capture icon - Off
@property (nonatomic, strong) UIImage * _Nullable captureAutoCaptureIconOff;
/// Capture - Capture Screen - Flash icon - On
@property (nonatomic, strong) UIImage * _Nullable captureFlashIconOn;
/// Capture - Capture Screen - Flash icon - Off
@property (nonatomic, strong) UIImage * _Nullable captureFlashIconOff;
/// Capture - Capture Screen - Gallery icon
@property (nonatomic, strong) UIImage * _Nullable captureGalleryIcon;
/// Capture - Capture Screen - Capture icon
@property (nonatomic, strong) UIImage * _Nullable captureCaptureIcon;
/// Capture - Tips - Close icon
@property (nonatomic, strong) UIImage * _Nullable captureTipsCloseIcon;
/// Capture - Tips - Flaten tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsFlatenIcon;
/// Capture - Tips - Hold Steady tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsSteadyIcon;
/// Capture - Tips - Image Brightness tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsBrightIcon;
/// Capture - Tips - Long Receipt tip
@property (nonatomic, strong) UIImage * _Nullable captureTipsLongIcon;
/// Capture - Preview - Add Page icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewAddPageIcon;
/// Capture - Preview - Retake icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewRetakeIcon;
/// Capture - Preview - Discard icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewDiscardIcon;
/// Capture - Preview - Crop icon
@property (nonatomic, strong) UIImage * _Nullable capturePreviewCropIcon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class UIColor;

/// The Objective-C bridge that allows to define colors used by SDK. Corresponds to <code>BrandingColorsProvider</code> implementation in Swift.
SWIFT_CLASS_NAMED("ColorsObjCBridge")
@interface SBLBrandingColorsBridge : NSObject
/// A neutral color used for background of the views. Default: <code>#d9e1e6</code>
@property (nonatomic, strong) UIColor * _Nullable background;
/// Non-actionable text and graphics shown on <code>background</code>. Default: <code>#141414</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>background</code> (WGAC 2.1)
///   </li>
///   <li>
///     Recommended to have less contrast with <code>background</code> than <code>focus</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onBackground;
/// The primary brand color. Default: <code>#0079C1</code>
/// <ul>
///   <li>
///     Must stand out on <code>background</code>
///   </li>
///   <li>
///     Must stand out on Capture screens background (<code>black</code> by default)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable primary;
/// A lighter or a darker variant of the <code>primary</code> color. Default: <code>#003d61</code>
/// <ul>
///   <li>
///     Used as a background of the primary action button.
///   </li>
///   <li>
///     Must be similar in lightness to <code>primary</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable primaryVariant;
/// Text and graphics on<code>primary</code> and <code>primaryVariant</code> colors. Default: <code>#FFFFFF</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>primary</code> and <code>primaryVariant</code> colors (WGAC 2.1)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onPrimary;
/// The secondary brand color. Default: <code>#b3c2cc</code>
/// <ul>
///   <li>
///     Must stand out on Capture screens background (<code>black</code> by default)
///   </li>
///   <li>
///     Recommended to have less contrast than <code>primary</code> on Capture screens background (<code>black</code> by default)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable secondary;
/// Text and graphics on<code>secondary</code> color. Default: <code>#141414</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>secondary</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onSecondary;
/// Defines the color of surfaces of components, such as cards, sheets, and menus. Default: <code>#ffffff</code>
/// <ul>
///   <li>
///     Must be visible on <code>background</code>
///   </li>
///   <li>
///     Recommended to define as a lighter or darker variation of the <code>background</code> color.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable surface;
/// An accent background on top of <code>surface</code>. Default: <code>#e8f5fc</code>
/// <ul>
///   <li>
///     Must be a close (lighter or darker) variation of the <code>surface</code> color.
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable surfaceVariant;
/// Non-actionable text and graphics on top of <code>surface</code>or <code>surfaceVariant</code>  colors. Default: <code>#4d4d4d</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>surface</code> and <code>surfaceVariant</code> (WGAC 2.1)
///   </li>
///   <li>
///     Recommended to have less contrast with <code>surface</code>/  <code>surfaceVariant</code> than <code>focus</code>
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable onSurface;
/// Actionable items and important graphics to help focus user’s attention on. May be displayed on <code>background</code>, <code>surface</code>, or <code>surfaceVariant</code>. Default: <code>#1c91d6</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>background</code>, <code>surface</code>, and <code>surfaceVariant</code> colors (WGAC 2.1)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable focus;
/// The color or the error messages. May be displayed on <code>background</code>, <code>surface</code>, or <code>surfaceVariant</code>. Default: <code>#C30000</code>
/// <ul>
///   <li>
///     Must have a 3:1 contrast ratio with <code>background</code>, <code>surface</code>, and <code>surfaceVariant</code> colors (WGAC 2.1)
///   </li>
/// </ul>
@property (nonatomic, strong) UIColor * _Nullable error;
/// The color of background on Capture’s screen related to taking and editing the image. Default: <code>.black</code>
@property (nonatomic, strong) UIColor * _Nullable captureBackground;
/// The color of foreground on Capture’s screen related to taking and editing the image. Default: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nullable onCaptureBackground;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface SBLBranding (SWIFT_EXTENSION(Sensibill))
@end

@class NSBundle;

/// The Objective-C bridge that allows to define resources used by SDK. Corresponds to <code>Branding.Resources</code>
SWIFT_CLASS_NAMED("ResourcesObjCBridge")
@interface SBLBrandingResourcesBridge : NSObject
/// Allows to provide a custom bundle to override existing localization strings, and provide localization for additional languages.
/// If the <code>localizationBundle</code> is specified, the SDK will first check for localization string in the provided <code>localizationBundle</code>
/// If the <code>localizationBundle</code> was not specified, or doesn’t contain a specific localization string, the default SDK localization string will be used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable localizationBundle;)
+ (NSBundle * _Nullable)localizationBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationBundle:(NSBundle * _Nullable)newValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end























@protocol SBLCaptureFlowCoordinatorDelegate;

/// Captures document image and submit for processing to sensibill document engine.
SWIFT_CLASS_NAMED("CaptureFlowCoordinator")
@interface SBLCaptureFlowCoordinator : NSObject
/// Receives one or more event associated with document capturing and processing.
@property (nonatomic, weak) id <SBLCaptureFlowCoordinatorDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLCaptureFlowCoordinator (SWIFT_EXTENSION(Sensibill))
@end


/// Holds result when <code>CaptureFlowCoordinator</code> did finish capturing document(s).
SWIFT_CLASS_NAMED("DidFinishCaptureResult")
@interface SBLCaptureFlowCoordinatorDidFinishCaptureResult : NSObject
/// one or more source ids of captured document(s) submitted for processing.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull sourceIds;
/// Initializes object with local ids.
/// \param sourceIds source ids of document(s) submitted for processing.
///
- (nonnull instancetype)initWithSourceIds:(NSArray<NSString *> * _Nonnull)sourceIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBLDocumentMetadata;

@interface SBLCaptureFlowCoordinator (SWIFT_EXTENSION(Sensibill))
/// Start capture flow.
- (void)start;
/// Start document capture flow with specified metadata.
/// <em>Only for use when client is configured to use Sensibill API version 2</em>
/// \param metadata Instance of <code>DocumentMetadata</code>
///
- (void)startWithMetadata:(SBLDocumentMetadata * _Nonnull)metadata;
@end



/// A conforming class would receive one or more events triggered by <code>CaptureFlowCoordinator</code>
SWIFT_PROTOCOL_NAMED("CaptureFlowCoordinatorDelegate")
@protocol SBLCaptureFlowCoordinatorDelegate <NSObject>
@optional
/// Informs that user that the capture flow is about to be shown and started.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorWillBeginCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@required
/// Informs that user has finished capturing document(s).
/// \param coordinator coordinator managing document capture and process flow.
///
/// \param result result containing 1 or more sourceIds of the captured document and submitted for processing.
///
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator result:(SBLCaptureFlowCoordinatorDidFinishCaptureResult * _Nonnull)result;
/// Informs that user cancelled receipt capture.
/// Event would be triggered if user cancels onboarding flow for the first time otherwise user explicitly taps on cancel button on capture screen.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@end

@class SBLCaptureRuntimeSettings;
@protocol SBLCaptureNavigationControllerDelegate;
@class NSCoder;
@class UIViewController;

/// The entry point of the module used by an integrator to create and configure Sensibill Capture
SWIFT_CLASS_NAMED("CaptureNavigationController")
@interface SBLCaptureNavigationController : UINavigationController
/// Represents current capture configuration.
@property (nonatomic, readonly, strong) SBLCaptureRuntimeSettings * _Nonnull settings;
/// Receives one or more event associated with capture.
@property (nonatomic, weak) id <SBLCaptureNavigationControllerDelegate> _Nullable captureDelegate;
/// Initializes capture navigation controller using the default <code>Capture.RuntimeSettings</code>.
- (nonnull instancetype)init;
/// Initializes capture navigation controller with the provided <code>Capture.RuntimeSettings</code>.
/// \param settings <code>Capture.RuntimeSettings</code> holding one or more capture features and style.
///
- (nonnull instancetype)initWithSettings:(SBLCaptureRuntimeSettings * _Nonnull)settings OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class SBLCaptureResult;

/// Delegate exposed to Integrator’s app to receive finished photo
SWIFT_PROTOCOL_NAMED("CaptureNavigationControllerDelegate")
@protocol SBLCaptureNavigationControllerDelegate
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture
///
/// \param images an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), empty array is returned.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didCapture:(NSArray<UIImage *> * _Nonnull)images SWIFT_UNAVAILABLE_MSG("Removed in 2021.5.0. Please use captureNavigationController(_:didFinishCapture:) instead.");
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture.
///
/// \param result instance of <code>CaptureResult</code> with an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), the result will contain an empty array of images.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didFinishCapture:(SBLCaptureResult * _Nonnull)result;
@end

@class NSData;

/// Represents capture completion result provided via <code>CaptureNavigationControllerDelegate</code> method.
SWIFT_CLASS_NAMED("CaptureResult")
@interface SBLCaptureResult : NSObject
/// Returns captured images as a data in JPEG format. If no images were captured, an empty array will be returned.
/// The provided data can be displayed as an image using <code>UIImage(data: Data)</code>,
/// or stored in a file using <code>Data.write(to: URL, options: Data.WritingOptions)</code>.
/// You can also use <code>Data.metadata</code> and <code>Data.getLocation()</code> to retrieve an EXIF data available in the image.
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull images;
/// Returns <code>true</code> if the result contains no images (e.g. user cancelled the capture)
@property (nonatomic, readonly) BOOL isEmpty;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Current Client Identity.
SWIFT_CLASS_NAMED("ClientIdentity")
@interface SBLClientIdentity : NSObject
/// Currently used client token.
@property (nonatomic, copy) NSString * _Nullable accessToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Defines the credentials to access API.
SWIFT_CLASS_NAMED("Credentials")
@interface SBLCredentials : NSObject <NSSecureCoding>
/// See: <code>NSSecureCoding</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// OAuth 2.0 Access Token
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// OAuth 2.0 Refresh Token
@property (nonatomic, copy) NSString * _Nullable refreshToken;
/// Instantiates credential object.
/// \param accessToken the access token.
///
/// \param refreshToken the refresh token.
///
- (nullable instancetype)initWithAccessToken:(NSString * _Nullable)accessToken refreshToken:(NSString * _Nullable)refreshToken OBJC_DESIGNATED_INITIALIZER;
/// See: <code>NSSecureCoding</code>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
/// See: <code>NSSecureCoding</code>
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







/// Document Metadata.
SWIFT_CLASS_NAMED("DocumentMetadata")
@interface SBLDocumentMetadata : NSObject <NSSecureCoding>
/// See: <code>NSSecureCoding</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLDocumentMetadata (SWIFT_EXTENSION(Sensibill))
@end

enum SBLAPIModelDocumentType : NSInteger;

/// Provides a convenience interface for building <code>DocumentMetadata</code>
SWIFT_CLASS_NAMED("Builder")
@interface SBLDocumentMetadataBuilder : NSObject
/// Objective-C use only. Initializes the builder for given document type.
- (nonnull instancetype)initWithSblDocumentType:(enum SBLAPIModelDocumentType)sblDocumentType OBJC_DESIGNATED_INITIALIZER;
/// Add document description.
- (SBLDocumentMetadataBuilder * _Nonnull)addWithDocumentDescription:(NSString * _Nullable)documentDescription SWIFT_WARN_UNUSED_RESULT;
/// Add account number.
- (SBLDocumentMetadataBuilder * _Nonnull)addWithAccountNumber:(NSString * _Nullable)accountNumber SWIFT_WARN_UNUSED_RESULT;
/// Add account transaction ID.
- (SBLDocumentMetadataBuilder * _Nonnull)addWithAccountTransactionID:(NSString * _Nullable)accountTransactionID SWIFT_WARN_UNUSED_RESULT;
/// Build document metadata object.
- (SBLDocumentMetadata * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Encapsulates the common identity-related properties and functions required to implement <code>APIDataService</code>
SWIFT_CLASS("_TtC9Sensibill20IdentityBasedService")
@interface IdentityBasedService : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The service responsible for uploading and monitoring the document processing
SWIFT_CLASS_NAMED("DocumentUploadService")
@interface SBLDocumentUploadService : IdentityBasedService
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
@end



















@interface SBLDocumentUploadService (SWIFT_EXTENSION(Sensibill))
/// Obtain source IDs of all stored documents.
/// <ul>
///   <li>
///     Throws an exception if there is no access to stored documents (e.g. service is stopping).
///   </li>
///   <li>
///     Returns the <code>Set<String></code> which contains all source IDs known to <code>DocumentUploadService</code>.
///     Notes:
///   </li>
///   <li>
///     The source ID is assigned to the document by <code>add</code> function.
///   </li>
///   <li>
///     If an empty set is returned, it means there are currently no documents for current user
///   </li>
/// </ul>
- (NSSet<NSString *> * _Nullable)allSourceIdsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Resends the last notification for the provided source ID.
/// <ul>
///   <li>
///     Throws an exception if the provided source ID was not found, or no access to stored documents (e.g. service is stopping).
///   </li>
/// </ul>
/// Note:
/// The notification will not be sent if there was no notification for this source ID yet (i.e. it was not uploaded yet).
/// In this case the caller should expect a notification once the item progresses to the next stage of processing (e.g. is uploaded or fails)
/// \param sourceId the source IDs to notify about
///
- (BOOL)renotifyWithSourceId:(NSString * _Nonnull)sourceId error:(NSError * _Nullable * _Nullable)error;
@end


@interface SBLDocumentUploadService (SWIFT_EXTENSION(Sensibill))
/// For use in Objective-C only. In Swift, use <code>add(source:metadata:)</code>
/// <ul>
///   <li>
///     Returns an ID by which an item can be monitored or queried
///   </li>
///   <li>
///     Throws an <code>Error</code> if an item was not accepted for uploading.
///   </li>
/// </ul>
/// \param source the image to upload
///
/// \param metadata the documentMetadata
///
- (NSString * _Nullable)addSource:(NSData * _Nonnull)source metadata:(SBLDocumentMetadata * _Nonnull)metadata error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Remove the source and information related to a provided source ID.
/// <ul>
///   <li>
///     Throws an exception if the provided source ID was not found, or no access to stored documents (e.g. service is stopping).
///   </li>
/// </ul>
/// Note:
/// The operation is final and cannot be undone
/// \param sourceId the source IDs to remove
///
- (BOOL)removeWithSourceId:(NSString * _Nonnull)sourceId error:(NSError * _Nullable * _Nullable)error;
@end

@protocol SBLDocumentUploadObserver;

@interface SBLDocumentUploadService (SWIFT_EXTENSION(Sensibill))
/// For use with Objective-C only. Add an observer to receive notifications about document upload status
/// \param observer an instance of DocumentUploadObserver
///
/// \param key the observer identifier key. Allows to replace or remove observer.
///
- (void)addObserver:(id <SBLDocumentUploadObserver> _Nonnull)observer key:(NSString * _Nonnull)key;
/// Remove an observer
/// \param forKey the key of the observer to remove.
///
- (void)removeObserverForKey:(NSString * _Nonnull)forKey;
@end

@class SBLTrackingEvent;

/// A type that receives <code>Analytics</code> notifications.
SWIFT_PROTOCOL_NAMED("EventListener")
@protocol SBLEventListener
/// A notification when <code>TrackingEvent</code> is received
/// \param event the <code>TrackingEvent</code> object received
///
- (void)onSensibillEvent:(SBLTrackingEvent * _Nonnull)event;
@end


/// Defines capture feature flags used in SDK
SWIFT_CLASS_NAMED("FeatureFlags")
@interface SBLCaptureFeatureFlags : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLCaptureFeatureFlags (SWIFT_EXTENSION(Sensibill))
@end

@class NSNumber;

/// The Objective-C bridge for <code>Capture.FeatureFlags</code>
SWIFT_CLASS_NAMED("ObjCBridge")
@interface SBLCaptureFeatureFlagsBridge : NSObject
/// Allows to attach the device’s current location to the captured image. When set to <code>true</code>, the user must grant a location permission before launching capture. Default: <code>false</code>
@property (nonatomic, strong) NSNumber * _Nullable attachLocationData;
/// Compress capture result to compatible with Sensibill API. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable compressForSensibillApi;
/// Starts the capture screen with auto-capture mode enabled by default. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable defaultToAutoCapture;
/// Enables the auto-capture feature. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableAutoCapture;
/// Provides a warning on the preview screen if the image is blurry. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableBlurDetection;
/// Enables the visibility of feedback label utilized to show various capturing receipt state for user. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableCaptureProgressFeedback;
/// Enables the ability to crop captured images. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableCrop;
/// Enables the ability to toggle the device’s flash on/off to help capture in low-light situations. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableFlash;
/// Enables the user to select an image from their phone’s image gallery. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableImageGallery;
/// Enables the feedback toast on long receipt capture screen. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableLongReceiptPageToast;
/// Enables the long receipt capture feature - capturing a long receipt with a top and bottom image. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableLongCapture;
/// Enables the ability to show capture tips screen. Default: <code>true</code>
@property (nonatomic, strong) NSNumber * _Nullable enableCaptureTips;
/// Enables the integrator to define number of image(s) the user can capture and/or select in single capture session. Default: 1. Valid Range: (1, 10).
/// Value when set to more than 1 will enable adding multiple image during single capture session.
@property (nonatomic, strong) NSNumber * _Nullable maxImages;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








@protocol SBLTokenProvider;
@class SBLUserIdentity;

/// The service encapsulates the current user context for authentication and authorization.
SWIFT_CLASS_NAMED("IdentityService")
@interface SBLIdentityService : NSObject
/// An instance of <code>TokenProvider</code> provided on start
@property (nonatomic, readonly, strong) id <SBLTokenProvider> _Nullable tokenProvider;
/// Defines a current API client identity
@property (nonatomic, readonly, strong) SBLClientIdentity * _Nonnull clientIdentity;
/// Defines a current user identity
@property (nonatomic, readonly, strong) SBLUserIdentity * _Nonnull userIdentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SBLIdentityService (SWIFT_EXTENSION(Sensibill))
/// Refreshes token by calling a <code>tokenProvider</code>, and registers new credentials. Legacy function, use <code>updateToken(for:completion)</code> instead
- (void)updateTokenWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end



@interface SBLIdentityService (SWIFT_EXTENSION(Sensibill))
@end

/// Errors that can occur while refreshing token.
typedef SWIFT_ENUM(NSInteger, Errors, open) {
/// Service did not attempt to refesh a token. This could be due to configuration issues (missing <code>tokenProvider</code>, no <code>User</code> in context), or due to the state of the SDK (stoping, or not started)
  ErrorsRefreshTokenWasNotAttempted = 0,
/// Attempt to refresh a token had failed. Either <code>Error</code>, or no <code>Credentails</code> were returned.
  ErrorsRefreshTokenFailed = 1,
/// Logout failed
  ErrorsLogoutFailed = 2,
/// Current SDK context is missing user identifier
  ErrorsMissingUserIdentifier = 3,
};
static NSString * _Nonnull const ErrorsDomain = @"Sensibill.IdentityService.Errors";


@interface SBLIdentityService (SWIFT_EXTENSION(Sensibill))
/// Saves the provided credentials in the <code>userIdentity</code> and the Keychain
- (void)registerWithNewCredentials:(SBLCredentials * _Nullable)newCredentials userIdentifier:(NSString * _Nullable)userIdentifier;
@end








@class CLLocation;

@interface NSData (SWIFT_EXTENSION(Sensibill))
/// Returns the image metadata. For use with Objective-C only. Use <code>Data</code>’s property with the same name in Swift.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable metadata;
/// Returns the GPS coordinates from an image’s exif data. For use with Objective-C only. Use <code>Data</code>’s function with the same name in Swift.
- (CLLocation * _Nullable)getLocation SWIFT_WARN_UNUSED_RESULT;
@end







@interface SBLCaptureFeatureFlagsBridge (SWIFT_EXTENSION(Sensibill))
/// Convert the provided bridge properties to the <code>SBLCaptureFeatureFlags</code>
/// <em>Note</em>: the defaults will be set automatically for the flags that ere not provided, only change the flags you’d like the non-default value for.
- (SBLCaptureFeatureFlags * _Nonnull)convertToFeatureFlags SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBLBrandingBridge (SWIFT_EXTENSION(Sensibill))
/// Convert the provided bridge properties to the <code>SBLBranding</code>
/// <em>Note</em>: the defaults will be set automatically for the flags that ere not provided, only change the flags you’d like the non-default value for.
- (SBLBranding * _Nonnull)convertToBranding SWIFT_WARN_UNUSED_RESULT;
@end


















/// Allows an integrator to pass configurable options to a Capture Screen
SWIFT_CLASS_NAMED("RuntimeSettings")
@interface SBLCaptureRuntimeSettings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLCaptureRuntimeSettings (SWIFT_EXTENSION(Sensibill))
/// Provides <code>RuntimeSettings</code> for capturing receipts. This is the default, most basic configuration.
+ (SBLCaptureRuntimeSettings * _Nonnull)receiptWithBranding:(SBLBranding * _Nullable)branding featureFlags:(SBLCaptureFeatureFlags * _Nonnull)featureFlags SWIFT_WARN_UNUSED_RESULT;
/// Provides <code>RuntimeSettings</code> for capturing an invoices. In this configuration the <code>enableLongCapture</code> feature is not available.
+ (SBLCaptureRuntimeSettings * _Nonnull)invoiceWithBranding:(SBLBranding * _Nullable)branding featureFlags:(SBLCaptureFeatureFlags * _Nonnull)featureFlags SWIFT_WARN_UNUSED_RESULT;
@end


/// For use with Objective-C only. In Swift, use <code>DocumentUploadObserver</code>
SWIFT_PROTOCOL("_TtP9Sensibill25SBLDocumentUploadObserver_")
@protocol SBLDocumentUploadObserver
/// Provides a notification when a document was uploaded.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param documentId the ID returned by API server for uploaded document
///
- (void)onDocumentUploadServiceDocumentUploadedWithSourceId:(NSString * _Nonnull)sourceId documentId:(NSString * _Nonnull)documentId;
/// Provides a notification when attempt to upload a document had failed. Uploading will be retried
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
- (void)onDocumentUploadServiceDocumentUploadFailedAttemptWithSourceId:(NSString * _Nonnull)sourceId;
/// Provides a notification when a document uploading permanently fails.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param cause the reason of the failure
///
- (void)onDocumentUploadServiceDocumentUploadPermanentlyFailedWithSourceId:(NSString * _Nonnull)sourceId cause:(NSString * _Nonnull)cause;
/// Provides a notification when a document was processed, and failed.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param documentId the ID returned by API server for the processed document
///
- (void)onDocumentUploadServiceDocumentProcessedFailedWithSourceId:(NSString * _Nonnull)sourceId documentId:(NSString * _Nonnull)documentId;
/// Provides a notification when a document was processed, and succeed.
/// \param sourceId the source ID for which notification is provided. The source ID is initially returned as a result of <code>DocumentUploadService.add</code> function
///
/// \param documentId the ID returned by API server for the processed document
///
- (void)onDocumentUploadServiceDocumentProcessedSuccessWithSourceId:(NSString * _Nonnull)sourceId documentId:(NSString * _Nonnull)documentId;
@end

/// <code>DocumentType</code> for use with Objective-C only. In Swift, use <code>SensibillAPIModel.DocumentType</code>
typedef SWIFT_ENUM_NAMED(NSInteger, SBLAPIModelDocumentType, "SensibillAPIModelDocumentType", open) {
/// Invoice
  SBLAPIModelDocumentTypeInvoice = 0,
/// Receipt.
  SBLAPIModelDocumentTypeReceipt = 1,
};


/// The SDK entry point. Encapsulates SDK state and access to other services.
SWIFT_CLASS("_TtC9Sensibill12SensibillSDK")
@interface SensibillSDK : NSObject
/// Singleton Instance of the Sensibill Class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SensibillSDK * _Nonnull shared;)
+ (SensibillSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// An instance of the IdentityService for a currently authenticated user.
@property (nonatomic, strong) SBLIdentityService * _Nonnull identityService;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
@end


SWIFT_CLASS_NAMED("Configuration")
@interface SBLSDKConfiguration : NSObject
/// Defines Capture configuration
@property (nonatomic, readonly, strong) SBLCaptureFeatureFlags * _Nonnull captureFeatureFlags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
@end


SWIFT_CLASS("_TtCC9Sensibill12SensibillSDK13StateProvider")
@interface StateProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
/// Provides the SDK version
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable sdkVersion;)
+ (NSString * _Nullable)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Provides the SDK build
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable sdkBuild;)
+ (NSString * _Nullable)sdkBuild SWIFT_WARN_UNUSED_RESULT;
@end


@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
/// The instance of document upload service
@property (nonatomic, readonly, strong) SBLDocumentUploadService * _Nonnull documentUploadService;
@end



@interface StateProvider (SWIFT_EXTENSION(Sensibill))
/// Returns <code>true</code> if current state is <code>stopping</code> to provide ability for other classes to not start initialization.
@property (nonatomic, readonly) BOOL isStopping;
@end


/// A type that interacts with Integration Server to provide Sensibill SDK with user credentials.
SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol SBLTokenProvider
/// A method that provides the new credentials: access and (optionally) refresh tokens. SDK will call this method when the current access token is no longer valid.
/// note:
///
/// <ul>
///   <li>
///     SDK will cache the provided credentials, and will only call this method when they become invalid. Therefore, <em>avoid returning a cached token</em>, retrieve a fresh token from your integration server instead.
///   </li>
///   <li>
///     <em>SDK expects the <code>completion</code> block to be executed in all cases</em>:
///     <ul>
///       <li>
///         Upon successful completion ensure the <code>Credentials</code> object with the new access token (and optionally a refresh token) is passed to a completion block. The error must remain nil in this case. Example: <code>completion(credentials, nil).</code>
///       </li>
///       <li>
///         If token retrieval failed, pass an <code>Error</code> object to the completion, and pass the <code>Credentials</code> as nil. Example: <code>completion(nil, MyErrors.tokenRetrievalFailed)</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userIdentifier The identifier of the user for whom the token is requested.
///
/// \param completion A block the caller expects to be executed upon token retrieval completion.
///
- (void)provideTokenReplacementWithUserIdentifier:(NSString * _Nonnull)userIdentifier completion:(void (^ _Nonnull)(SBLCredentials * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("TrackingEvent")
@interface SBLTrackingEvent : NSObject
/// All event fields as a dictionary.
/// The dictionary will contain <code>TrackingEvent.Fields</code>, as well as any other custom properties set for the event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
/// The initializer. Automatically sets the <code>SensibillSDK.shared.identityService.user?.accessID</code> value if available
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// Returns an instance of the event with provided name.
+ (SBLTrackingEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// The detailed description of the event
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(id _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)name;
/// Feature of the event
@property (nonatomic, copy) NSString * _Nullable feature;
/// Name of the event
@property (nonatomic, copy) NSString * _Nullable name;
/// Category of the event
@property (nonatomic, copy) NSString * _Nullable category;
/// Action that triggered event
@property (nonatomic, copy) NSString * _Nullable action;
/// The area of the UI where the event took place
@property (nonatomic, copy) NSString * _Nullable screenName;
/// A numeric value associated with the event
@property (nonatomic, strong) NSNumber * _Nullable value;
/// The name of the user associated with the event
@property (nonatomic, copy) NSString * _Nullable userId;
@end































/// Current User Identity.
SWIFT_CLASS_NAMED("UserIdentity")
@interface SBLUserIdentity : NSObject
/// Integrator supplied user identifier for currently authenticated user.
@property (nonatomic, readonly, copy) NSString * _Nullable userIdentifier;
/// Currently authenticated user’s credentials.
@property (nonatomic, readonly, strong) SBLCredentials * _Nullable credentials;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

#endif
