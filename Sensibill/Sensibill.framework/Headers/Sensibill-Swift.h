#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SENSIBILL_SWIFT_H
#define SENSIBILL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <Sensibill/Sensibill.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Sensibill",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// :nodoc:
SWIFT_CLASS_NAMED("APIRequest")
@interface SBLAPIRequest : NSObject
+ (SBLAPIRequest * _Nonnull)requestWithUrl:(NSString * _Nonnull)url requestType:(RequestType)requestType parameters:(NSDictionary * _Nullable)parameters success:(SBOperationSuccessBlock _Nullable)success error:(SBOperationErrorBlock _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull urlString;
@property (nonatomic) RequestType type;
@property (nonatomic, copy) NSDictionary * _Nullable params;
@property (nonatomic, copy) SBOperationErrorBlock _Nullable error;
@property (nonatomic, copy) SBOperationSuccessBlock _Nullable success;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class SBLTax;

/// Represents an amount of money (for a receipt, item, transaction…) :nodoc:
SWIFT_CLASS_NAMED("Amount")
@interface SBLAmount : NSObject
/// Before tax amount
@property (nonatomic) double beforeTax;
/// Array of taxes (See Tax class)
@property (nonatomic, copy) NSArray<SBLTax *> * _Nonnull taxes;
/// After tax amount
@property (nonatomic) double afterTax;
/// Currency code
@property (nonatomic, copy) NSString * _Nullable currencyCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Provides listeners with updates on SDK events and user actions
SWIFT_CLASS_NAMED("Analytics")
@interface SBLAnalytics : NSObject
/// A singleton instance of the Analytics
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLAnalytics * _Nonnull shared;)
+ (SBLAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol SBLEventListener;

@interface SBLAnalytics (SWIFT_EXTENSION(Sensibill))
/// Adds a listener, or replaces the listener with the provided instance, if a listener with the same key already exists.
/// \param key the string used to identify the listener.
///
/// \param listener an instance of the listener
///
- (void)addListenerWithKey:(NSString * _Nonnull)key listener:(id <SBLEventListener> _Nonnull)listener;
/// Removes a listener with the provided key
- (void)removeListenerWithKey:(NSString * _Nonnull)key;
@end









/// Cache provider. Private use only. :nodoc:
SWIFT_CLASS_NAMED("Cache")
@interface SBLCache : NSObject
/// Cache instance for data shared for all user identifiers
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLCache * _Nonnull sharedCache;)
+ (SBLCache * _Nonnull)sharedCache SWIFT_WARN_UNUSED_RESULT;
/// Cache instance for data that belongs to <code>SensibillSDK.shared.cacheIdentifier</code>
/// The validity of the value is verified on each call (to prevent cache from the wrong user to leak to another user or unauthenticated state)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLCache * _Nullable userCache;)
+ (SBLCache * _Nullable)userCache SWIFT_WARN_UNUSED_RESULT;
/// Saves provided data in the memory and the file
/// <ul>
///   <li>
///     Throws an exception if cache directory or file could not be created
///   </li>
/// </ul>
/// \param data the data that needs to be stored
///
/// \param key the data identifier. Will also be used as the name of file.
///
- (BOOL)setWithData:(id _Nonnull)data forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Returns an object for a given key. (or nil of the key is unkown)
/// <ul>
///   <li>
///     Throws an exception <code>unknownKey</code> if data is not found or its value is <code>nil</code>
///   </li>
/// </ul>
/// \param key the data identifier to be retrieved.
///
/// \param classes classes to be unarchived.
///
///
/// returns:
/// the data from cache
- (id _Nullable)dataForKey:(NSString * _Nonnull)key forClasses:(NSArray<Class> * _Nonnull)classes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Remove data for a given key.
/// <ul>
///   <li>
///     Throws an exception if data removal fails
///   </li>
/// </ul>
/// \param key the data identifier to be removed.
///
- (BOOL)removeDataForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Clear cache
/// Deletes cache directory and all its files
- (BOOL)clearCacheAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSBundle;
@class SBLCaptureTheme;

/// Allows an integrator to pass configurable options to a Capture Screen
SWIFT_CLASS_NAMED("CaptureConfiguration")
@interface SBLCaptureConfiguration : NSObject
/// Bundle containing theme and localizations for Capture Screen
@property (nonatomic, readonly, strong) NSBundle * _Nullable bundle;
/// Theme containing colors for Capture Screen
@property (nonatomic, readonly, strong) SBLCaptureTheme * _Nullable theme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS_NAMED("CaptureConfigurationBuilder")
@interface SBLCaptureConfigurationBuilder : NSObject
/// Add a bundle to the configuration
- (SBLCaptureConfigurationBuilder * _Nonnull)addWithBundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Add a theme to the configuration
- (SBLCaptureConfigurationBuilder * _Nonnull)addWithTheme:(SBLCaptureTheme * _Nullable)theme SWIFT_WARN_UNUSED_RESULT;
/// Complete the build and provide a <code>CaptureConfiguration</code>
- (SBLCaptureConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Defines capture feature flags used in SDK
SWIFT_CLASS_NAMED("CaptureFeatureFlags")
@interface SBLCaptureFeatureFlags : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLCaptureFeatureFlags (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>enableAutoCapture</code> in Objective-C.
- (void)setAutoCaptureWithEnabled:(BOOL)enabled;
/// Allows to set <code>defaultToAutoCapture</code> in Objective-C.
- (void)setAutoCaptureWithIsDefault:(BOOL)isDefault;
/// Allows to set <code>enableBlurDetection</code> in Objective-C.
- (void)setBlurDetectionWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableCaptureProgressFeedback</code> in Objective-C.
- (void)setCaptureProgressFeedbackWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableCrop</code> in Objective-C.
- (void)setCropWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableFlash</code> in Objective-C.
- (void)setFlashWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableImageGallery</code> in Objective-C.
- (void)setImageGalleryWithEnabled:(BOOL)enabled;
/// Allows to set <code>attachLocationData</code> in Objective-C.
- (void)setLocationDataWithIsAttached:(BOOL)isAttached;
/// Allows to set <code>enableLongCapture</code> in Objective-C.
- (void)setLongCaptureWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableLongReceiptPageToast</code> in Objective-C.
- (void)setLongReceiptPageToastWithEnabled:(BOOL)enabled;
/// Allows to set <code>maxImages</code> in Objective-C.
- (void)setMaxImagesWithLimit:(NSInteger)limit;
/// Allows to set <code>enableCaptureTips</code> in Objective-C.
- (void)setCaptureTipsWithEnabled:(BOOL)enabled;
/// Allows to set <code>compressForSensibillAPI</code> in Objective-C.
- (void)setCompressForSensibillAPIWithEnabled:(BOOL)enabled;
@end

@protocol SBLCaptureFlowCoordinatorDelegate;
@class UIViewController;
@class SBLTransaction;
enum SBLReceiptExpenseType : NSInteger;

SWIFT_CLASS_NAMED("CaptureFlowCoordinator")
@interface SBLCaptureFlowCoordinator : NSObject
/// Receives one or more event associated with receipt capturing and optionally processing.
@property (nonatomic, weak) id <SBLCaptureFlowCoordinatorDelegate> _Nullable delegate;
/// Initialize a capture flow coordinator with provided <code>UIViewController</code>
/// \param host Instance of <code>UIViewController</code> on which coordinator would present receipt capture flow in full screen mode.
///
- (nonnull instancetype)initWithHost:(UIViewController * _Nonnull)host OBJC_DESIGNATED_INITIALIZER;
/// Start receipt capture flow on host <code>UIViewController</code>.
- (void)start;
/// Start receipt capture flow on host <code>UIViewController</code> with provided <code>Transaction</code> object.
/// \param transaction Instance of <code>Transaction</code>
///
- (void)startWithTransaction:(SBLTransaction * _Nonnull)transaction;
/// Start receipt capture flow on host <code>UIViewController</code> with provided <code>ReceiptExpenseType</code> information.
/// \param expenseType Instance of <code>ReceiptExpenseType</code>
///
- (void)startWithExpenseType:(enum SBLReceiptExpenseType)expenseType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class SBLCaptureNavigationController;
@class UIImage;
@class SBLCaptureResult;

/// Delegate exposed to Integrator’s app to receive finished photo
SWIFT_PROTOCOL_NAMED("CaptureNavigationControllerDelegate")
@protocol SBLCaptureNavigationControllerDelegate
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture
///
/// \param images an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), empty array is returned.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didCapture:(NSArray<UIImage *> * _Nonnull)images SWIFT_UNAVAILABLE_MSG("Removed in 2021.5.0. Please use captureNavigationController(_:didFinishCapture:) instead.");
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture.
///
/// \param result instance of <code>CaptureResult</code> with an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), the result will contain an empty array of images.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didFinishCapture:(SBLCaptureResult * _Nonnull)result;
@end


@interface SBLCaptureFlowCoordinator (SWIFT_EXTENSION(Sensibill)) <SBLCaptureNavigationControllerDelegate>
/// :nodoc:
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didFinishCapture:(SBLCaptureResult * _Nonnull)result;
@end



/// A conforming class would receive one or more events triggered by <code>CaptureFlowCoordinator</code>
SWIFT_PROTOCOL_NAMED("CaptureFlowCoordinatorDelegate")
@protocol SBLCaptureFlowCoordinatorDelegate <NSObject>
@optional
/// Informs that user that the capture flow is about to be shown and started.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorWillBeginCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@required
/// Informs that user finished capturing receipt.
/// \param coordinator coordinator responsible for handling receipt capture flow.
///
/// \param transaction instance of <code>SBLTransaction</code>having captured image and one or more provided optional metadata.
///
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transaction:(SBLTransaction * _Nonnull)transaction SWIFT_UNAVAILABLE_MSG("Removed in 2021.5.0. Please use coordinatorDidFinishCapture(_:transactions:)");
/// Informs that user has finished capturing receipt(s).
/// \param coordinator coordinator responsible for handling receipt capture flow.
///
/// \param transactions Array of <code>SBLTransaction</code> which contains captured image and associated metadata.
///
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transactions:(NSArray<SBLTransaction *> * _Nonnull)transactions;
/// Informs that user cancelled receipt capture.
/// Event would be triggered if user cancels onboarding flow for the first time otherwise user explicitly taps on cancel button on capture screen.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@end

@class NSCoder;

/// The entry point of the module used by an integrator to create and configure Sensibill Capture
SWIFT_CLASS_NAMED("CaptureNavigationController")
@interface SBLCaptureNavigationController : UINavigationController
/// Represents current capture configuration.
@property (nonatomic, readonly, strong) SBLCaptureConfiguration * _Nonnull captureConfiguration;
/// Receives one or more event associated with capture.
@property (nonatomic, weak) id <SBLCaptureNavigationControllerDelegate> _Nullable captureDelegate;
/// Initializes capture navigation controller using the default <code>CaptureConfiguration</code>.
- (nonnull instancetype)init;
/// Initializes capture navigation controller with provided <code>CaptureConfiguration</code>.
/// \param configuration <code>CaptureConfiguration</code> holding one or more capture features and theme.
///
- (nonnull instancetype)initWithConfiguration:(SBLCaptureConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class NSData;

/// Represents capture completion result provided via <code>CaptureNavigationControllerDelegate</code> method.
SWIFT_CLASS_NAMED("CaptureResult")
@interface SBLCaptureResult : NSObject
/// Returns captured images as a data in JPEG format. If no images were captured, an empty array will be returned.
/// The provided data can be displayed as an image using <code>UIImage(data: Data)</code>,
/// or stored in a file using <code>Data.write(to: URL, options: Data.WritingOptions)</code>.
/// You can also use <code>Data.metadata</code> and <code>Data.getLocation()</code> to retrieve an EXIF data available in the image.
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull images;
/// Returns <code>true</code> if the result contains no images (e.g. user cancelled the capture)
@property (nonatomic, readonly) BOOL isEmpty;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Defines capture colors used in SDK
SWIFT_CLASS_NAMED("CaptureStyle")
@interface SBLCaptureStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

@interface SBLCaptureStyle (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>captureBackgroundColor</code> in Objective-C.
- (void)setCaptureBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>onCaptureBackgroundColor</code> in Objective-C.
- (void)setOnCaptureBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>detectionStrokeColor</code> in Objective-C.
- (void)setDetectionStrokeWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>detectionFillColor</code> in Objective-C.
- (void)setDetectionFillWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>captureCircleStrokeColor</code> in Objective-C.
- (void)setCaptureCircleStrokeWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>captureCircleFillColor</code> in Objective-C.
- (void)setCaptureCircleFillWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePageCountBackgroundColor</code> in Objective-C.
- (void)setCapturePageCountBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePageCountTextColor</code> in Objective-C.
- (void)setCapturePageCountTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>captureDocumentTypeButtonTextColor</code> in Objective-C.
- (void)setCaptureDocumentTypeButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>autoCaptureButtonTextColor</code> in Objective-C.
- (void)setAutoCaptureButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewTitleColor</code> in Objective-C.
- (void)setCapturePreviewTitleWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewDoneButtonBackgroundColor</code> in Objective-C.
- (void)setCapturePreviewDoneButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewDoneButtonTextColor</code> in Objective-C.
- (void)setCapturePreviewDoneButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewPageControlTintColor</code> in Objective-C.
- (void)setCapturePreviewPageControlTintWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewCurrentPageControlColor</code> in Objective-C.
- (void)setCapturePreviewCurrentPageControlWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewLoaderColor</code> in Objective-C.
- (void)setCapturePreviewLoaderColorWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropCancelButtonBackgroundColor</code> in Objective-C.
- (void)setCropCancelButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropCancelButtonTextColor</code> in Objective-C.
- (void)setCropCancelButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropDoneButtonBackgroundColor</code> in Objective-C.
- (void)setCropDoneButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropDoneButtonTextColor</code> in Objective-C.
- (void)setCropDoneButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropLoaderColor</code> in Objective-C.
- (void)setCropLoaderWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionTitleColor</code> in Objective-C.
- (void)setCapturePermissionTitleWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionMessageColor</code> in Objective-C.
- (void)setCapturePermissionMessageWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionButtonBackgroundColor</code> in Objective-C.
- (void)setCapturePermissionButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionButtonTextColor</code> in Objective-C.
- (void)setCapturePermissionButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>toastBackgroundColor</code> in Objective-C.
- (void)setToastBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>toastTitleColor</code> in Objective-C.
- (void)setToastTitleWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>autoCaptureButtonCornerRadius</code> in Objective-C.
- (void)setAutoCaptureButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>detectionLineWidth</code> in Objective-C.
- (void)setDetectionLineWithWidth:(float)width;
/// Allows to set <code>captureCircleLineWidth</code> in Objective-C.
- (void)setCaptureCircleLineWithWidth:(float)width;
/// Allows to set <code>capturePreviewDoneButtonCornerRadius</code> in Objective-C.
- (void)setCapturePreviewDoneButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>capturePreviewDoneButtonHeight</code> in Objective-C.
- (void)setCapturePreviewDoneButtonWithHeight:(float)height;
/// Allows to set <code>capturePreviewDoneButtonWidth</code> in Objective-C.
- (void)setCapturePreviewDoneButtonWithWidth:(float)width;
/// Allows to set <code>cropCancelButtonCornerRadius</code> in Objective-C.
- (void)setCropCancelButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>cropDoneButtonCornerRadius</code> in Objective-C.
- (void)setCropDoneButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>cropDoneButtonHeight</code> in Objective-C.
- (void)setCropDoneButtonWithHeight:(float)height;
/// Allows to set <code>cropDoneButtonWidth</code> in Objective-C.
- (void)setCropDoneButtonWithWidth:(float)width;
/// Allows to set <code>cropCornerPointDiameter</code> in Objective-C.
- (void)setCropCornerPointWithDiameter:(float)diameter;
/// Allows to set <code>cropEdgeTouchThreshold</code> in Objective-C.
- (void)setCropEdgeWithTouchThreshold:(float)touchThreshold;
/// Allows to set <code>capturePermissionButtonCornerRadius</code> in Objective-C.
- (void)setCapturePermissionButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>capturePermissionButtonHeight</code> in Objective-C.
- (void)setCapturePermissionButtonWithHeight:(float)height;
/// Allows to set <code>capturePermissionButtonWidth</code> in Objective-C.
- (void)setCapturePermissionButtonWithWidth:(float)width;
/// Allows to set <code>toastCornerRadius</code> in Objective-C.
- (void)setToastWithCornerRadius:(float)cornerRadius;
@end


/// Contains all high level color configs for the Sensibill Capture.
SWIFT_CLASS_NAMED("DefaultTheme")
@interface SBLDefaultTheme : NSObject
/// Bundle for use by subclasses to acess custom assets.
@property (nonatomic, readonly, strong) NSBundle * _Nullable bundle;
/// Plist data for use by subclasses to decode their own custom values.
@property (nonatomic, readonly, copy) NSData * _Nullable plistData;
/// The color displayed most frequently across your app’s screens and components.
@property (nonatomic, strong) UIColor * _Nonnull primary;
/// The lighter or darker variant of the <code>primary</code> color.
@property (nonatomic, strong) UIColor * _Nonnull primaryVariant;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>primary</code> and <code>primaryVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onPrimary;
/// The accent color.
@property (nonatomic, strong) UIColor * _Nonnull secondary;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>secondary</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onSecondary;
/// The color that appears behind scrollable content.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>background</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onBackground;
/// Defines the color of surfaces of components, such as cards, sheets, and menus.
@property (nonatomic, strong) UIColor * _Nonnull surface;
/// The lighter or darker variant of the <code>surface</code> color.
@property (nonatomic, strong) UIColor * _Nonnull surfaceVariant;
/// The color of text, iconography, and strokes, shown on top of <code>surface</code> or <code>surfaceVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurface;
/// The color of emphasized text, iconography, and strokes, shown on top of <code>surface</code> or <code>surfaceVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurfaceFocus;
/// The color or error background
@property (nonatomic, strong) UIColor * _Nonnull error;
/// The color of text, iconography, and strokes, shown on top of <code>error</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onError;
/// Style of primary button corners. Value above 0 yields rounded corners. Default value: 24.
@property (nonatomic, readonly) float primaryButtonCornerRadius;
/// Height of the primary button. Default value: 48
@property (nonatomic, readonly) float primaryButtonHeight;
/// Width of the primary button. Default value: 138
@property (nonatomic, readonly) float primaryButtonWidth;
/// Style of secondary button corners. Value above 0 yields rounded corners. Default value: 24 (matches primary button rounding).
@property (nonatomic, readonly) float secondaryButtonCornerRadius;
/// Height of the secondary button. Default value: 48
@property (nonatomic, readonly) float secondaryButtonHeight;
/// Width of the secondary button. Default value: 138
@property (nonatomic, readonly) float secondaryButtonWidth;
/// Initialize the default theme from SensibillConfiguration.plist provided in a specified bundle
/// \param overrideBundle The bundle which contains your <code>xcassets</code> with custom colors. Defaults to <code>nil</code> which will use default colors.
///
- (nonnull instancetype)initWithOverrideBundle:(NSBundle * _Nullable)overrideBundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This theme contains all SensibillCapture values
SWIFT_CLASS_NAMED("CaptureTheme")
@interface SBLCaptureTheme : SBLDefaultTheme
/// The color applied to background of the UI views used throughout the module. Default value: <code>.black</code>
@property (nonatomic, strong) UIColor * _Nonnull captureBackgroundColor;
/// The text color of the buttons that contain an icon (crop, add page, and retake). Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull onCaptureBackgroundColor;
/// The color of the document detection rectangle edge which appears in auto-capture. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull detectionStrokeColor;
/// The color of the document detection rectangle fill area which appears in auto-capture. Default value: <code>primary</code> (Alpha = 0.25)
@property (nonatomic, strong) UIColor * _Nonnull detectionFillColor;
/// The stroke color of the processing circle edge which appears when a document is detected in auto-capture. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull captureCircleStrokeColor;
/// The fill color of the processing circle which appears when a document is detected in auto-capture. Default value: <code>.clear</code>
@property (nonatomic, strong) UIColor * _Nonnull captureCircleFillColor;
/// The background color of the number indicating how many captures the user has taken. Default value: <code>.red</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePageCountBackgroundColor;
/// The text color of the number indicating how many captures the user has taken. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePageCountTextColor;
/// The text color of the unselected capture type button (Normal/Long). Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull captureDocumentTypeButtonTextColor;
/// The text color of the auto-capture button when auto-capture is enabled. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull autoCaptureButtonTextColor;
/// The text color of the title on the Capture Preview screen. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewTitleColor;
/// The background color of the done button on the capture preview screen. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewDoneButtonBackgroundColor;
/// The text color of the done button on the capture preview screen. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewDoneButtonTextColor;
/// The color of the unselected circles of the page indicator on the capture preview screen (only appears if more than page exists). Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewPageControlTintColor;
/// The color of the selected circle of the page indicator on the capture preview screen (only appears if more than page exists). Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewCurrentPageControlColor;
/// The background color of the cancel button on the crop screen. Default value: <code>secondary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropCancelButtonBackgroundColor;
/// The text color of the cancel button on the crop screen. Default value: <code>onSecondary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropCancelButtonTextColor;
/// The background color of the done button on the crop screen. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropDoneButtonBackgroundColor;
/// The text color of the done button on the crop screen. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropDoneButtonTextColor;
/// The tint color of the UIActivityIndicatorView that appears while the crop screen is loading. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropLoaderColor;
/// The text color of the title that appears if a user denies system capture permissions. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionTitleColor;
/// The text color of the message that appears if a user denies system capture permissions. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionMessageColor;
/// The background color of the button that appears when the user denies system capture permissions. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionButtonBackgroundColor;
/// The text color of the button that appears when the user denies system capture permissions. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionButtonTextColor;
/// The background color of the feedback toast that appears while capturing. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull toastBackgroundColor;
/// The title color of the feedback toast that appears while capturing. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull toastTitleColor;
/// The corner radius of the auto-capture toggle button. Default value: <code>0</code>
@property (nonatomic) float autoCaptureButtonCornerRadius;
/// The width of the border of the square that appears when auto capturing.  Default value: <code>4</code>
@property (nonatomic) float detectionLineWidth;
/// The width of the border of the circle that appears when an auto-capture is processing. Default value: <code>2</code>
@property (nonatomic) float captureCircleLineWidth;
/// The corner radius of the done button on the capture preview screen. Default value: <code>24</code>
@property (nonatomic) float capturePreviewDoneButtonCornerRadius;
/// The height of the done button on the capture preview screen. Default value: <code>48</code>
@property (nonatomic) float capturePreviewDoneButtonHeight;
/// The width of the done button on the capture preview screen. Default value: <code>138</code>
@property (nonatomic) float capturePreviewDoneButtonWidth;
/// The tint color of the UIActivityIndicatorView that appears while the preview screen processing images.. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewLoaderColor;
/// The corner radius of the cancel button on the crop screen. Default value: <code>24</code>
@property (nonatomic) float cropCancelButtonCornerRadius;
/// The corner radius of the done button on the crop screen. Default value: <code>24</code>
@property (nonatomic) float cropDoneButtonCornerRadius;
/// The height of the cancel button on the crop screen. Default value: <code>48</code>
@property (nonatomic) float cropDoneButtonHeight;
/// The width of the cancel button on the crop screen. Default value: <code>138</code>
@property (nonatomic) float cropDoneButtonWidth;
/// The diameter of the corner points that are used to crop. Default value: <code>30</code>
@property (nonatomic) float cropCornerPointDiameter;
/// The distance away from a crop edge’s bar a user’s touch can be that will still grab the edge. Default value: <code>50</code>
@property (nonatomic) float cropEdgeTouchThreshold;
/// The corner radius of the capture permission button that appears when the user denies system capture permissions. Default value: <code>24</code>
@property (nonatomic) float capturePermissionButtonCornerRadius;
/// The height of the capture permission button that appears when the user denies system capture permissions. Default value: <code>48</code>
@property (nonatomic) float capturePermissionButtonHeight;
/// The width of the capture permission button that appears when the user denies system capture permissions. Default value: <code>138</code>
@property (nonatomic) float capturePermissionButtonWidth;
/// The corner radius of the feedback toast that appears while capturing. Default value: <code>24</code>
@property (nonatomic) float toastCornerRadius;
- (nonnull instancetype)initWithDefaults:(SBLDefaultTheme * _Nonnull)defaults OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOverrideBundle:(NSBundle * _Nullable)overrideBundle SWIFT_UNAVAILABLE;
@end










/// Defines styling attributes for elements of capture tips screen.
SWIFT_CLASS_NAMED("CaptureTipsStyle")
@interface SBLCaptureTipsStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLCaptureTipsStyle (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>viewBackgroundColor</code> in Objective-C.
- (void)setViewBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeIconButtonBackgroundColor</code> in Objective-C.
- (void)setCloseIconButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeIconButtonForegroundColor</code> in Objective-C.
- (void)setCloseIconButtonForegroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeButtonBackgroundColor</code> in Objective-C.
- (void)setCloseButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeButtonTextColor</code> in Objective-C.
- (void)setCloseButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>nextButtonBackgroundColor</code> in Objective-C.
- (void)setNextButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>nextButtonTextColor</code> in Objective-C.
- (void)setNextButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>pageIndicatorTintColor</code> in Objective-C.
- (void)setPageIndicatorTintWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>currentPageIndicatorTintColor</code> in Objective-C.
- (void)setCurrentPageIndicatorTintWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipImageLinearGradientTopColor</code> in Objective-C.
- (void)setTipImageLinearGradientTopWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipImageLinearGradientBottomColor</code> in Objective-C.
- (void)setTipImageLinearGradientBottomWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipTitleLabelTextColor</code> in Objective-C.
- (void)setTipTitleLabelTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipDescriptionLabelTextColor</code> in Objective-C.
- (void)setTipDescriptionLabelTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeButtonWidth</code> in Objective-C.
- (void)setCloseButtonWithWidth:(float)width;
/// Allows to set <code>nextButtonWidth</code> in Objective-C.
- (void)setNextButtonWithWidth:(float)width;
/// Allows to set <code>closeButtonCornerRadius</code> in Objective-C.
- (void)setCloseButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>nextButtonCornerRadius</code> in Objective-C.
- (void)setNextButtonWithCornerRadius:(float)cornerRadius;
@end


@class CLLocation;
@class NSURL;

/// Contains all common information for a contact (customer, merchant location…) :nodoc:
SWIFT_CLASS_NAMED("ContactInformation")
@interface SBLContactInformation : NSObject
/// Physical address (array of strings – Undetermined length)
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull address;
/// Email of the contact
@property (nonatomic, copy) NSString * _Nullable email;
/// Name of the contact
@property (nonatomic, copy) NSString * _Nullable name;
/// Phone Number (String, unformatted)
@property (nonatomic, copy) NSString * _Nullable telephone;
/// GPS Location (see CoreLocation)
@property (nonatomic, strong) CLLocation * _Nullable geoLocation;
/// URL of the contact
@property (nonatomic, copy) NSURL * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Structure that holds all necessary credential information for a user
SWIFT_CLASS_NAMED("Credentials")
@interface SBLCredentials : NSObject <NSSecureCoding>
/// :nodoc: NSSecureCoding Protocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Currently used credentials
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLCredentials * _Nullable current;)
+ (SBLCredentials * _Nullable)current SWIFT_WARN_UNUSED_RESULT;
/// OAuth 2.0 or Access Token
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// OAuth 2.0 Refresh Token
@property (nonatomic, copy) NSString * _Nullable refreshToken;
/// Initialize Credentials with accessToken and refreshToken
/// \param accessToken Access token
///
/// \param refreshToken Refresh token is optional
///
- (nullable instancetype)initWithAccessToken:(NSString * _Nullable)accessToken refreshToken:(NSString * _Nullable)refreshToken OBJC_DESIGNATED_INITIALIZER;
/// :nodoc: Credentials conform to NSSecureCoding. Do not use.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
/// :nodoc: Credentials conform to NSSecureCoding. Do not use.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// :nodoc: Public method to enable use from ObjC. Do not use.
+ (void)registerWithNewCredentials:(SBLCredentials * _Nullable)newCredentials;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Customer :nodoc:
SWIFT_CLASS_NAMED("Customer")
@interface SBLCustomer : NSObject
/// Customer identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Contact information
@property (nonatomic, strong) SBLContactInformation * _Nullable contact;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

SWIFT_CLASS_NAMED("DatePeriod")
@interface SBLDatePeriod : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// The date from which the period is calculated
@property (nonatomic, copy) NSDate * _Nullable baseDate;
/// The duration of the period
@property (nonatomic) NSInteger duration;
/// A calcualted end of the period
@property (nonatomic, readonly, copy) NSDate * _Nullable calculatedDate;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end




enum SBLTimeUnit : NSInteger;
enum SBLTimeDirection : NSInteger;

@interface SBLDatePeriod (SWIFT_EXTENSION(Sensibill))
/// The unit of time used to calculate the period. For use with Objective-C only, use <code>unit</code> property in Swift
@property (nonatomic) enum SBLTimeUnit sblUnit;
/// A direction of the period (past or future). For use with Objective-C only, use <code>timeDirection</code> property in Swift
@property (nonatomic) enum SBLTimeDirection sblTimeDirection;
/// Initializes the object with dictionary values. For use with Objective-C. In Swift, use <code>init(withDictionary: [String: Any?])</code>
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dict;
/// Same as <code>dictionary</code> property, compatible with Objective-C
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
/// Same as <code>requestDictionary</code> property, compatible with Objective-C
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblRequestDictionary;
@end



enum SBLDiscountType : NSInteger;

/// :nodoc:
SWIFT_CLASS_NAMED("Discount")
@interface SBLDiscount : NSObject
/// Amount
@property (nonatomic, strong) SBLAmount * _Nullable amount;
/// Description of discount
@property (nonatomic, copy) NSString * _Nullable summary;
/// Type of discount
@property (nonatomic) enum SBLDiscountType type;
/// Percent discounted from amount
@property (nonatomic) double percent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// :nodoc: Type of discount
typedef SWIFT_ENUM_NAMED(NSInteger, SBLDiscountType, "DiscountType", open) {
/// Unknown (default)
  SBLDiscountTypeUnknown = 0,
/// General
  SBLDiscountTypeGeneral = 1,
/// Coupon
  SBLDiscountTypeCoupon = 2,
};

@class SBLTrackingEvent;

/// A type that receives <code>Analytics</code> notifications.
SWIFT_PROTOCOL_NAMED("EventListener")
@protocol SBLEventListener
/// A notification when <code>TrackingEvent</code> is received
/// \param event the <code>TrackingEvent</code> object received
///
- (void)onSensibillEvent:(SBLTrackingEvent * _Nonnull)event;
@end

enum SBLFeeType : NSInteger;

/// :nodoc:
SWIFT_CLASS_NAMED("Fee")
@interface SBLFee : NSObject
/// Amount
@property (nonatomic, strong) SBLAmount * _Nullable amount;
/// Description of fee
@property (nonatomic, copy) NSString * _Nullable summary;
/// Type of fee
@property (nonatomic) enum SBLFeeType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// :nodoc: Type of fee
typedef SWIFT_ENUM_NAMED(NSInteger, SBLFeeType, "FeeType", open) {
/// Unknown (default)
  SBLFeeTypeUnknown = 0,
/// Donation
  SBLFeeTypeDonation = 1,
/// Duties
  SBLFeeTypeDuties = 2,
/// General
  SBLFeeTypeGeneral = 3,
/// Shipping
  SBLFeeTypeShipping = 4,
};

@class SBReceipt;

/// :nodoc:
SWIFT_CLASS_NAMED("Folder")
@interface SBLFolder : NSObject <NSCopying>
/// Unique Identifier on the API
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Name of the folder
@property (nonatomic, copy) NSString * _Nullable name;
/// Color of the folder
@property (nonatomic, strong) UIColor * _Nullable color;
/// The last time the folder was updated
@property (nonatomic, copy) NSDate * _Nullable updatedAt;
/// The date that the folder was created
@property (nonatomic, copy) NSDate * _Nullable createdAt;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The number of Receipts associated with the folder, optionally filtered by currency code
/// \param currencyCode The currency Code to filter by
///
- (NSInteger)numberOfReceiptsWithCurrencyCode:(NSString * _Nullable)currencyCode SWIFT_WARN_UNUSED_RESULT;
/// The sum of all the Amounts (grouped by currency) for all receipts associated with the folder
@property (nonatomic, readonly, copy) NSArray<SBLAmount *> * _Nonnull totalAmounts;
- (void)addReceipt:(SBReceipt * _Nonnull)receipt;
- (void)removeReceipt:(SBReceipt * _Nonnull)receipt;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)deleteWithContent:(BOOL)content completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Use the shared property of this class to find and create Folders.
/// :nodoc:
SWIFT_CLASS_NAMED("FolderCollection")
@interface SBLFolderCollection : NSObject
/// Singleton object of FolderCollection
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLFolderCollection * _Nonnull shared;)
+ (SBLFolderCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Find all Folders for the current user
/// \param completion block executed when the request is complete.
///
- (void)findWithCompletion:(void (^ _Nonnull)(NSArray<SBLFolder *> * _Nonnull, NSError * _Nullable))completion;
/// Find a Folder for a given unique identifier
/// \param identifier Unique Folder Identifier
///
/// \param completion block executed when the request is complete.
///
- (void)findWithIdentifier:(NSString * _Nonnull)identifier completion:(void (^ _Nonnull)(SBLFolder * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIFont;

/// Defines the set of fonts used in SDK.
SWIFT_CLASS_NAMED("FontSet")
@interface SBLFontSet : NSObject
/// The font for regular text styles, e.g.:  <code>body</code>, <code>subhead</code>, <code>footnote</code>, <code>title</code>, and <code>titleThree</code>
@property (nonatomic, strong) UIFont * _Nonnull regular;
/// The font for the lightly emphasized text styles, e.g.: <code>headline</code>, <code>callout</code>, and <code>captionOne</code>
@property (nonatomic, strong) UIFont * _Nonnull semibold;
/// The font for the emphasized text styles, e.g.: <code>largeTitle</code>, <code>titleTwo</code>, and <code>captionTwo</code>
@property (nonatomic, strong) UIFont * _Nonnull bold;
/// Initializes the instance with provided regular, semibold and bold fonts.
/// \param regular UIFont to be used for the <code>regular</code> property
///
/// \param semibold UIFont to be used for the <code>semibold</code> property
///
/// \param bold UIFont to be used for the <code>bold</code> property
///
- (nonnull instancetype)initWithRegular:(UIFont * _Nonnull)regular semibold:(UIFont * _Nonnull)semibold bold:(UIFont * _Nonnull)bold OBJC_DESIGNATED_INITIALIZER;
/// Initializes the instance with provided regular, and bold fonts.
/// \param regular UIFont to be used for the <code>regular</code> property
///
/// \param bold UIFont to be used for the <code>semibold</code> and <code>bold</code> properties
///
- (nonnull instancetype)initWithRegular:(UIFont * _Nonnull)regular bold:(UIFont * _Nonnull)bold;
/// Initializes the instance of FontSet with default regular, semibold and bold fonts (<code>systemFont</code>, 14pt)
- (nonnull instancetype)init;
@end


@interface SBLFontSet (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, strong) UIFont * _Nonnull title2Bold;
@property (nonatomic, readonly, strong) UIFont * _Nonnull title3;
@property (nonatomic, readonly, strong) UIFont * _Nonnull callout;
@property (nonatomic, readonly, strong) UIFont * _Nonnull subhead;
@property (nonatomic, readonly, strong) UIFont * _Nonnull headline;
- (UIFont * _Nonnull)title2BoldWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)title3WithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)calloutWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)subheadWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)headlineWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("HTTPStatusCode")
@interface SBLHTTPStatusCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unauthorized;)
+ (NSInteger)unauthorized SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describes properties of an item :nodoc:
SWIFT_CLASS_NAMED("ItemProperty")
@interface SBLItemProperty : NSObject
/// Item property name
@property (nonatomic, copy) NSString * _Nullable name;
/// Item property value
@property (nonatomic, copy) NSString * _Nullable value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Use the LocaleCollection shared instance to query the supported user locales :nodoc:
SWIFT_CLASS_NAMED("LocaleCollection")
@interface SBLLocaleCollection : NSObject
/// LocaleCollection singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLLocaleCollection * _Nonnull shared;)
+ (SBLLocaleCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// :nodoc:
SWIFT_CLASS_NAMED("Logger")
@interface SBLLogger : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLLogger * _Nonnull shared;)
+ (SBLLogger * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Error codes that can be occur when matching transactions to receipts
typedef SWIFT_ENUM_NAMED(NSInteger, SBLMatchingError, "MatchingError", open) {
/// Matched successfully
  SBLMatchingErrorSuccess = 0,
/// Network error occurred
  SBLMatchingErrorNetworkError = 1,
/// Could not match for an unknown reason
  SBLMatchingErrorUnknownError = 2,
};
static NSString * _Nonnull const SBLMatchingErrorDomain = @"Sensibill.MatchingError";

enum SBLMerchantChannel : NSInteger;

/// Object representation of the merchant :nodoc:
SWIFT_CLASS_NAMED("Merchant")
@interface SBLMerchant : NSObject
/// Merchant identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Type of channel (physical store, online store)
@property (nonatomic) enum SBLMerchantChannel channel;
/// Category of the merchant (Groceries, Gas, Apparel…)
@property (nonatomic, copy) NSString * _Nullable categoryCode;
/// Contact information
@property (nonatomic, strong) SBLContactInformation * _Nullable contact;
/// Store identifier
@property (nonatomic, copy) NSString * _Nullable storeId;
/// Tax number
@property (nonatomic, copy) NSString * _Nullable taxNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Type of Merchant distribution channel :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLMerchantChannel, "MerchantChannel", open) {
/// Unknown (default)
  SBLMerchantChannelUnknown = 0,
/// Physical store
  SBLMerchantChannelPhysical = 1,
/// Online store
  SBLMerchantChannelOnline = 2,
};


@interface NSData (SWIFT_EXTENSION(Sensibill))
/// Returns the image metadata. For use with Objective-C only. Use <code>Data</code>’s property with the same name in Swift.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable metadata;
/// Returns the GPS coordinates from an image’s exif data. For use with Objective-C only. Use <code>Data</code>’s function with the same name in Swift.
- (CLLocation * _Nullable)getLocation SWIFT_WARN_UNUSED_RESULT;
@end




@interface NSLocale (SWIFT_EXTENSION(Sensibill))
/// :nodoc: To return an identifier in a format the API understands
@property (nonatomic, readonly, copy) NSString * _Nonnull remoteIdentifier;
@end


@interface NSString (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly) BOOL isEmail;
@end

enum SBLNetworkReachabilityStatus : NSInteger;

/// The <code>NetworkReachabilityService</code> class allows to determine the status of a system’s current network configuration,
/// and lstens for status changes. It should not be used to prevent a user from initiating a network request, as it’s possible
/// that an initial request may be required to establish reachability.
/// Recommended usage pattern:
/// <ol>
///   <li>
///     Subscribe to <code>reachabilityDidChangeNotification</code> early in lifecycle of a class. For example in <code>init</code> or <code>formDidLoad</code>.
///   </li>
///   <li>
///     Right after subscription, check current value of either <code>status</code> or <code>isReachable</code> to establish initial state.
///     No new notification will be sent until status change, hence it’s important to verify the state after subscription.
///   </li>
///   <li>
///     Notification does not send out new status. Instead, once notification is received, subscriber code should check new status
///     using either <code>status</code> or <code>isReachable</code>.
///     This prevents a possibility that stale status passed to subscriber (in case it changes several time within short period of time)
///   </li>
/// </ol>
SWIFT_CLASS_NAMED("NetworkReachabilityService")
@interface SBLNetworkReachabilityService : NSObject
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLNetworkReachabilityService * _Nonnull instance;)
+ (SBLNetworkReachabilityService * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Name of notification to be issued if reachability status changed
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull reachabilityDidChangeNotification;)
+ (NSNotificationName _Nonnull)reachabilityDidChangeNotification SWIFT_WARN_UNUSED_RESULT;
/// Returns true if service was started and is currently running
@property (nonatomic, readonly) BOOL isRunning;
/// Returns current reachability status. See <code>NetworkReachabilityStatus</code>.
@property (nonatomic, readonly) enum SBLNetworkReachabilityStatus status;
/// Returns true if currently host is reachable. Shortcut for <code>isReachable</code> function of the status
@property (nonatomic, readonly) BOOL isReachable;
/// Provides an ability to enforce positive reachable status
/// When set to <code>true</code>, <code>isReachable</code> will always return <code>true</code>
/// This can be used to validate error handling, or to return mocked responses while offline (e.g. for demo).
@property (nonatomic) BOOL isAlwaysReachable;
/// Initialize instance with SCNetworkReachability object
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Restart service for a different host
- (void)restartWithHost:(NSString * _Nullable)host;
@end


@interface SBLNetworkReachabilityService (SWIFT_EXTENSION(Sensibill))
+ (void)isAPIReachableWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
@end

/// Defines connectivity states
typedef SWIFT_ENUM_NAMED(NSInteger, SBLNetworkReachabilityStatus, "NetworkReachabilityStatus", open) {
  SBLNetworkReachabilityStatusUnknown = -1,
  SBLNetworkReachabilityStatusNotReachable = 0,
  SBLNetworkReachabilityStatusReachable = 1,
};


SWIFT_CLASS_NAMED("NetworkRetryCounter")
@interface SBLNetworkRetryCounter : NSObject
- (void)resetFailureCount;
- (NSInteger)addAndGetFailures:(NSInteger)addedValue;
- (NSInteger)addFailure;
- (NSInteger)addRetry;
- (BOOL)shouldRetry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum SBLOriginalFormat : NSInteger;

/// Original receipt document :nodoc:
SWIFT_CLASS_NAMED("Original")
@interface SBLOriginal : NSObject
/// Format of the receipt document (html, image, pdf…)
@property (nonatomic) enum SBLOriginalFormat format;
/// Url of the receipt document
@property (nonatomic, copy) NSURL * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Original format of the receipt :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLOriginalFormat, "OriginalFormat", open) {
/// Unknown
  SBLOriginalFormatUnknown = 0,
/// Image (photo of a paper receipt)
  SBLOriginalFormatImage = 1,
/// HTML (email receipt)
  SBLOriginalFormatHtml = 2,
/// PDF (attachment of an email receipt)
  SBLOriginalFormatPdf = 3,
/// Text (email receipt)
  SBLOriginalFormatText = 4,
};

@protocol SBLTokenProvider;

/// Handles all authentication flows for the Password Authenticated users
SWIFT_CLASS_NAMED("PasswordAuthenticator")
@interface SBLPasswordAuthenticator : NSObject
/// Required to fix an Xcode 11.4 bug. :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
+ (id <SBLTokenProvider> _Nonnull)getDefaultTokenProvider SWIFT_WARN_UNUSED_RESULT;
@end

enum SensibillError : NSInteger;

@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Resets the users password given a temporary password
/// \param accessId String representing the accessId of a user
///
/// \param temporaryPassword String representing the temporary password
///
/// \param newPassword String representing the new password
///
/// \param completion completion block executed when request is complete
///
- (void)resetPasswordWithAccessId:(NSString * _Nonnull)accessId temporaryPassword:(NSString * _Nonnull)temporaryPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(enum SensibillError))completion;
@end




@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Change password
/// \param currentPassword the current password
///
/// \param newPassword the new selected password. Must comply with password requirements.
///
/// \param completion completion block executed when request is complete
///
- (void)changePasswordWithCurrentPassword:(NSString * _Nonnull)currentPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(enum SensibillError))completion;
@end

@class SBLPasswordEvaluation;

@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Verifies the strength of a given password
/// \param password password that needs to be checked
///
/// \param checkType optional type of password
///
/// \param completion completion block executed when request is complete. Passes an optional PasswordEvaluation and error as parameters. PasswordEvaluation holds an acceptable Bool, and a PasswordStrength enum that represent the evaluated password.
///
- (void)checkStrengthWithPassword:(NSString * _Nonnull)password checkType:(NSString * _Nullable)checkType completion:(void (^ _Nonnull)(SBLPasswordEvaluation * _Nullable, enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Verifies if a given receipt email already exists
/// \param receiptEmail receipt email that needs to be checked
///
/// \param completion completion block executed when request is complete. Passes boolean representing if the receipt email already exists, and an error enum as parameter.
///
- (void)checkExistenceWithReceiptEmail:(NSString * _Nonnull)receiptEmail completion:(void (^ _Nonnull)(BOOL, enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Verifies if a given access id already exists
/// \param accessId access id that needs to be checked
///
/// \param completion completion block executed when request is complete. Passes boolean representing if the access id already exists, and an error enum as parameter.
///
- (void)checkExistenceWithAccessId:(NSString * _Nonnull)accessId completion:(void (^ _Nonnull)(BOOL, enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Creates a new user
/// \param accessId access id for the new user
///
/// \param password password for the new user
///
/// \param firstName (optional) first name for the new user
///
/// \param lastName (optional) last name for the new user
///
/// \param email (optional) email for the new user
///
/// \param receiptEmail (optional) receipt email for the new user, where email receipts should be forwarded
///
/// \param completion completion block executed when request is complete. Passes an error enum as parameter.
///
- (void)registerWithAccessId:(NSString * _Nonnull)accessId password:(NSString * _Nonnull)password firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email receiptEmail:(NSString * _Nullable)receiptEmail completion:(void (^ _Nonnull)(enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Tries to authenticate a user with an access id and password
/// \param accessId (optional) access identifier of the user attempting authentication. If access identifier is nil and password is nil, will attempt to login with last authenticated user.
///
/// \param password (optional) password of the user attempting authentication. If password is passed as nil, will attempt to automatically login user from the cache.
///
/// \param completion completion block executed when logging in is complete. Passes an error enum as parameter.
///
- (void)loginWithAccessId:(NSString * _Nullable)accessId password:(NSString * _Nullable)password completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Logs user out and stops SDK
/// \param completion completion block executed when logging in is complete. Passes an error enum as parameter.
///
- (void)logoutWithCompletion:(void (^ _Nonnull)(enum SensibillError))completion;
@end

enum SBLPasswordStrength : NSInteger;

/// Structure that represents the evaluated password strength, as determined by the backend :nodoc:
SWIFT_CLASS_NAMED("PasswordEvaluation")
@interface SBLPasswordEvaluation : NSObject
/// Strength of password
@property (nonatomic, readonly) enum SBLPasswordStrength strength;
/// Whether password is within acceptable strength threshold
@property (nonatomic, readonly) BOOL acceptable;
/// Raw float value of password
@property (nonatomic, readonly) float value;
/// :nodoc:
@property (nonatomic, readonly) float minStrength;
/// :nodoc:
@property (nonatomic, readonly) float maxStrength;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Strength of password :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLPasswordStrength, "PasswordStrength", open) {
/// Very Weak
  SBLPasswordStrengthVeryWeak = 0,
/// Weak
  SBLPasswordStrengthWeak = 1,
/// Medium
  SBLPasswordStrengthMedium = 2,
/// Strong
  SBLPasswordStrengthStrong = 3,
/// Very Strong
  SBLPasswordStrengthVeryStrong = 4,
};


/// :nodoc:  An Objective-C-friendly wrapper for pending unaauthorized requests
SWIFT_CLASS_NAMED("PendingUnauthorizedTasks")
@interface SBLPendingUnauthorizedTasks : NSObject
- (void)add:(SBLAPIRequest * _Nonnull)request;
/// Performs a specified action for all pending unauthorized tasks; also removes a task from the list
- (void)performForAll:(void (^ _Nonnull)(SBLAPIRequest * _Nonnull))executionBlock;
/// Sends an error to all pending tasks
- (void)sendErrorToAll:(NSError * _Nonnull)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Allows to specify integration-specific receipt properties, including external account transaction id
SWIFT_CLASS_NAMED("PrivateMetaData")
@interface SBLPrivateMetaData : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// A banking account transaction ID, associated with the receipt.
@property (nonatomic, copy) NSString * _Nullable accountTransactionID;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc: Initialize by retrieving properties from the provided dictionary
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end




@interface SBLPrivateMetaData (SWIFT_EXTENSION(Sensibill))
/// For Objective-C only, use <code>dictionary</code> in Swift. Converts <code>PrivateMetaData</code> to dictionary. The names of the fields correspond the Sensibill API specifications
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
@end


@interface SBLPrivateMetaData (SWIFT_EXTENSION(Sensibill))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Responsible for providing convenience to present new capture flow for provided <code>SBLTransaction</code> or <code>ReceiptExpenseType</code>.
SWIFT_CLASS_NAMED("ReceiptCaptureManager")
@interface SBLReceiptCaptureManager : NSObject
/// Singleton Instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLReceiptCaptureManager * _Nonnull shared;)
+ (SBLReceiptCaptureManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLReceiptCaptureManager (SWIFT_EXTENSION(Sensibill))
/// Present the new receipt capture flow on provided view controller to associate with given receipt expense type.
- (void)presentCaptureWithHost:(UIViewController * _Nonnull)viewController expenseType:(enum SBLReceiptExpenseType)expenseType;
/// Present the new receipt capture flow on provided view controller for given receipt upload transaction object and provided <code>ReceiptExpenseType</code>.
/// Provided transactions’s expense type would be updated to given transaction if expense type is not <code>unknown</code>.
- (void)presentCaptureWithHost:(UIViewController * _Nonnull)viewController transaction:(SBLTransaction * _Nonnull)transaction expenseType:(enum SBLReceiptExpenseType)expenseType;
@end


@interface SBLReceiptCaptureManager (SWIFT_EXTENSION(Sensibill)) <SBLCaptureFlowCoordinatorDelegate>
/// :nodoc:
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transactions:(NSArray<SBLTransaction *> * _Nonnull)transactions;
/// :nodoc:
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReceiptCategory")
@interface SBLReceiptCategory : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
+ (NSSet<SBLReceiptCategory *> * _Nonnull)allCategories SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class SBLReceiptSearchFilter;
@class SBLReceiptSummary;

/// Use the ReceiptCollection shared instance to query our Receipts database
SWIFT_CLASS_NAMED("ReceiptCollection")
@interface SBLReceiptCollection : NSObject
/// ReceiptCollection singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLReceiptCollection * _Nonnull shared;)
+ (SBLReceiptCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)findWithFilter:(SBLReceiptSearchFilter * _Nullable)filter completion:(void (^ _Nonnull)(NSArray<SBLReceiptSummary *> * _Nonnull, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Type of expenses
typedef SWIFT_ENUM_NAMED(NSInteger, SBLReceiptExpenseType, "ReceiptExpenseType", open) {
/// Unknown (default)
  SBLReceiptExpenseTypeUnknown = 0,
/// Business Expense
  SBLReceiptExpenseTypeBusiness = 1,
/// Personal Expense
  SBLReceiptExpenseTypePersonal = 2,
};

@class SBSearchFilter;

/// Use a SearchFilter instance to query a specific set of receipts
SWIFT_CLASS_NAMED("ReceiptSearchFilter")
@interface SBLReceiptSearchFilter : NSObject
/// List of currency ISO codes to filter by
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull currencyCodes;
/// List of categories to filter by
@property (nonatomic, copy) NSSet<SBLReceiptCategory *> * _Nonnull categories;
/// If set, only receipts from transactions after that date will be returned
@property (nonatomic, copy) NSDate * _Nullable from;
/// If set, only receipts from transactions before that date will be returned
@property (nonatomic, copy) NSDate * _Nullable to;
/// List of expense types to filter by (business, personal)
@property (nonatomic) ExpenseTypeFilter expenseTypes;
/// If set to true, only receipts pending validation will be returned (Defaults to false)
@property (nonatomic) BOOL pendingValidation;
/// If set, only receipts that belong to that folder will be returned
@property (nonatomic, strong) SBLFolder * _Nullable folder;
/// If set, only receipts that do not belong to that folder will be returned
@property (nonatomic, strong) SBLFolder * _Nullable excludingFolder;
/// :nodoc:
- (nonnull instancetype)initWithSearchFilter:(SBSearchFilter * _Nonnull)searchFilter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Status of the receipt :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLReceiptStatus, "ReceiptStatus", open) {
/// Unknown status
  SBLReceiptStatusUnknown = 0,
/// Receipt is active
  SBLReceiptStatusActive = 1,
/// Receipt is pending validation (some required fields are missing)
  SBLReceiptStatusPendingValidation = 2,
/// Receipt has been marked as deleted
  SBLReceiptStatusDeleted = 3,
/// Receipt data belongs to a previous version of this receipt
  SBLReceiptStatusArchived = 4,
};

enum SBLReceiptType : NSInteger;

/// Class representing a summary information about a receipt :nodoc:
SWIFT_CLASS_NAMED("ReceiptSummary")
@interface SBLReceiptSummary : NSObject
/// ISO Country Code
@property (nonatomic, copy) NSString * _Nullable countryCode;
/// Currency Code
@property (nonatomic, copy) NSString * _Nullable currencyCode;
/// Date when the receipt was imported/captured
@property (nonatomic, copy) NSDate * _Nullable arrivedAt;
/// Date of the purchase (visible on the receipt) is a computed property which combines purchaseDateString with
/// purchaseTimeString into a Date object for the local time zone
@property (nonatomic, copy) NSDate * _Nullable purchasedAt;
/// Date on which the purchase was made. This is only the date component of the local time at which the purchase
/// was made, with no explicit timezone information.
@property (nonatomic, copy) NSString * _Nullable purchaseDateString;
/// The time at which the purchase was made. This is only the time component of the local time at which the purchase
/// was made, with no explicit timezone information.
@property (nonatomic, copy) NSString * _Nullable purchaseTimeString;
/// Type of receipt
@property (nonatomic) enum SBLReceiptType type;
/// Status of the receipt
@property (nonatomic) enum SBLReceiptStatus status;
/// Unique identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Receipt merchant
@property (nonatomic, strong) SBLMerchant * _Nullable merchant;
/// Total amounts
@property (nonatomic, strong) SBLAmount * _Nullable total;
/// Folders
@property (nonatomic, copy) NSArray<SBLFolder *> * _Nonnull folders;
/// Type of expense
@property (nonatomic) enum SBLReceiptExpenseType expenseType;
/// Notes
@property (nonatomic, copy) NSString * _Nullable notes;
/// Bank Transaction linked to this receipt
@property (nonatomic, copy) NSString * _Nullable transactionIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Type of receipt :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLReceiptType, "ReceiptType", open) {
/// Unknown
  SBLReceiptTypeUnknown = 0,
/// Itemized (Receipt showing line items)
  SBLReceiptTypeItemized = 1,
/// Payment (Receipt provided after a card payment)
  SBLReceiptTypePayment = 2,
};

enum SBLRequestAuthenticationType : NSInteger;
@class NSURLSessionConfiguration;

/// Create an instance of Request to communicate with the Sensibill Web API
SWIFT_CLASS_NAMED("Request")
@interface SBLRequest : NSObject
/// Designated initializer to create a Request
/// \param authenticationType provide a RequestAuthenticationType option. Defaults to .token
///
/// \param method provide an HTTP method. Defaults to “GET”
///
/// \param endPoint provide a valid API endpoint. (e.g “/api/v1/users”)
///
/// \param parameters optional Dictionary of HTTP parameters that will be serialized
///
/// \param data optional data (used for upload)
///
- (nonnull instancetype)initWithAuthenticationType:(enum SBLRequestAuthenticationType)authenticationType method:(NSString * _Nonnull)method endPoint:(NSString * _Nonnull)endPoint parameters:(NSDictionary<NSString *, id> * _Nullable)parameters data:(NSData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
/// Designated initializer to create a Request
/// \param sessionConfig provide an URLSessionConfiguration option
///
/// \param method provide an HTTP method. Defaults to “GET”
///
/// \param endPoint provide a valid API endpoint. (e.g “/api/v1/users”)
///
/// \param parameters optional Dictionary of HTTP parameters that will be serialized
///
/// \param data optional data (used for upload)
///
- (nonnull instancetype)initWithSessionConfig:(NSURLSessionConfiguration * _Nonnull)sessionConfig method:(NSString * _Nonnull)method endPoint:(NSString * _Nonnull)endPoint parameters:(NSDictionary<NSString *, id> * _Nullable)parameters data:(NSData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
/// Add a key/value pair to the parameters. Use only before calling the start method.
/// \param key String representing the key
///
/// \param value Value matching the key
///
- (void)addParameterWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value;
/// Execute the HTTP requests
/// \param completion Block executed when the request is complete. Passes optional dictionaries and errors.
///
- (void)startWithCompletion:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable, NSInteger))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Types of authentication for API requests
typedef SWIFT_ENUM_NAMED(NSInteger, SBLRequestAuthenticationType, "RequestAuthenticationType", open) {
/// Authenticated using a Bearer Token
  SBLRequestAuthenticationTypeToken = 0,
/// Authenticated using a Client Token
  SBLRequestAuthenticationTypeClient = 1,
/// Authenticated using Basic Auth
  SBLRequestAuthenticationTypeBasic = 2,
};


/// :nodoc: Represents the loyalty rewards earned for a receipt
SWIFT_CLASS_NAMED("Reward")
@interface SBLReward : NSObject
/// Account Number
@property (nonatomic, copy) NSString * _Nullable accountNumber;
/// Program Name
@property (nonatomic, copy) NSString * _Nullable programName;
/// Points Awarded
@property (nonatomic) double pointsAwarded;
/// Current Point Balanced
@property (nonatomic) double currentBalance;
/// Next Reward Level
@property (nonatomic) double nextRewardLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBCategory (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@end

/// Represents supported Sensibill UI navigation intents. Use for Objective-C only. With Swift, use <code>NavigationIntent</code>
typedef SWIFT_ENUM_NAMED(NSInteger, SBLNavigationIntent, "SBLNavigationIntent", open) {
/// The homepage dashboard.
  SBLNavigationIntentDashboard = 0,
/// Displays a list of all receipts.
  SBLNavigationIntentReceiptList = 1,
/// Displays details of the receipt with the provided ID. A valid receipt ID must be provided together with this option.
  SBLNavigationIntentReceiptDetails = 2,
/// Displays a list of user-created folders.
  SBLNavigationIntentFolderList = 3,
/// Displays an individual folder with the provided ID. A valid folder ID must provided with this option.
  SBLNavigationIntentFolderDetails = 4,
/// Displays a list of exports the user had requested.
  SBLNavigationIntentExportList = 5,
/// Displays a Tips page
  SBLNavigationIntentTips = 6,
/// Displays an Achievements page.
  SBLNavigationIntentAchievements = 7,
/// Displays a page, which allows to monitor the progress of receipt uploading, and allows to edit some of the receipt metadata.
/// As a parameter, provide the array of <code>Transaction.localId</code> properties the Sensibill UI should monitor.
  SBLNavigationIntentMetadataEdit = 8,
};

/// Defines a date period direction, returned by API. For Objective-C only. Use <code>TimeDirection</code> with Swift.
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTimeDirection, "SBLTimeDirection", open) {
/// Future. Corresponds the <code>TimeDirection.future</code>
  SBLTimeDirectionFuture = 0,
/// Past. Corresponds the <code>TimeDirection.past</code>
  SBLTimeDirectionPast = 1,
};

/// Defines a date period time units, returned by API. For Objective-C only. Use <code>TimeUnit</code> with Swift.
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTimeUnit, "SBLTimeUnit", open) {
/// Undefined
  SBLTimeUnitNotSet = 0,
/// Day. Corresponds the <code>TimeUnit.day</code>
  SBLTimeUnitDay = 1,
/// Month. Corresponds the <code>TimeUnit.month</code>
  SBLTimeUnitMonth = 2,
/// Week. Corresponds the <code>TimeUnit.week</code>
  SBLTimeUnitWeek = 3,
/// Year. Corresponds the <code>TimeUnit.year</code>
  SBLTimeUnitYear = 4,
};

enum SBLTransactionType : NSInteger;
@class SBLUserSubmittedData;
@class SBLSharedMetaData;
enum SBLTransactionStatus : NSInteger;
enum SBLTransactionError : NSInteger;
@protocol SBLTransactionObserver;
@class SBNonReceiptEmail;

/// Provides a data model for an ongoing receipt uploading operation. In Swift, use <code>Transaction</code> typealias.
SWIFT_CLASS("_TtC9Sensibill14SBLTransaction")
@interface SBLTransaction : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Identifies transaction uniquely on device. Local transaction identifier is generated when instance is created, and does not change.
@property (nonatomic, readonly, copy) NSString * _Nonnull localID;
/// Identifier of user tied to receipt upload transaction
@property (nonatomic, readonly, copy) NSString * _Nullable userID;
/// Identifier of transaction on the server. When <code>remoteID</code> is received, status of transaction is set to <code>processing</code>
@property (nonatomic, copy) NSString * _Nullable remoteID;
/// Receipt Transaction(Upload) Date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Transaction processing time estimated by the server (<code>fast</code>, <code>medium</code>, or <code>slow</code>)
@property (nonatomic, copy) NSString * _Nullable expectedProcessingTime;
/// if expectedProcessingTime exists and value is “medium” or “slow” then returns true otherwise false. :nodoc: Internal use
@property (nonatomic, readonly) BOOL isSlowProcessing;
/// Transaction type
@property (nonatomic) enum SBLTransactionType type;
/// Identifier of receipt tied to transaction. Only present when transaction is completed (<code>status</code> is set to <code>.completed</code>)
@property (nonatomic, copy) NSString * _Nullable receiptID;
/// Source email address of an email that is being converted to a receipt. If this property is set, the <code>type</code> is set to <code>.email</code>
@property (nonatomic, copy) NSString * _Nullable emailID;
/// Image of receipt to upload. Must be 5 MB or less.
@property (nonatomic, copy) NSData * _Nullable imageData;
/// Receipt date, category, merchant name, and currency code
@property (nonatomic, strong) SBLUserSubmittedData * _Nullable userSubmittedData;
/// Receipt folders, expense type, and note
@property (nonatomic, strong) SBLSharedMetaData * _Nullable sharedMetaData;
/// Receipt’s external account transaction id
@property (nonatomic, strong) SBLPrivateMetaData * _Nullable privateMetaData;
/// Returns <code>true</code> if <code>privateMetaData.accountTransactionID</code> is present :nodoc: Internal use
@property (nonatomic, readonly) BOOL hasExternalAccountTransaction;
/// Transaction status
@property (nonatomic) enum SBLTransactionStatus status;
/// Set to a failure reason when transaction status is <code>failed</code>, or to <code>noError</code> otherwise
@property (nonatomic) enum SBLTransactionError error;
/// Indicates that provided image failed on server, and must be replaced (retrying the same image is not recommended)
@property (nonatomic, readonly) BOOL mustReplaceImage;
/// Transaction Observer to monitor transaction progress
@property (nonatomic, weak) id <SBLTransactionObserver> _Nullable observer;
/// Initializes transaction with receipt image. Sets <code>type</code> to <code>.image</code>.
- (nonnull instancetype)initWithImageData:(NSData * _Nonnull)imageData;
/// Initializes transaction with <code>externalAccountTransactionID</code> to be used for bank transaction linking. Sets <code>type</code> to <code>.image</code>.
- (nonnull instancetype)initWithExternalAccountTransactionID:(NSString * _Nonnull)externalAccountTransactionID;
/// Init with email ID :nodoc: Internal use
- (nonnull instancetype)initWithEmailID:(NSString * _Nonnull)emailID;
/// Init with SBNonReceiptEmail. Used for conversion to receipt
- (nonnull instancetype)initForNonReceiptEmail:(SBNonReceiptEmail * _Nonnull)email;
/// Init with receipt data :nodoc: Internal use
- (nonnull instancetype)initWithReceiptId:(NSString * _Nonnull)receiptId userSubmittedData:(SBLUserSubmittedData * _Nullable)userSubmittedData sharedMetaData:(SBLSharedMetaData * _Nullable)sharedMetaData privateMetaData:(SBLPrivateMetaData * _Nullable)privateMetaData;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Disallow default init method to force creation with image or email :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SBReceipt (SWIFT_EXTENSION(Sensibill))
+ (NSArray<SBReceipt *> * _Nonnull)getReceiptsModelsFromResponse:(NSArray<NSDictionary *> * _Nonnull)responses SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBReceipt (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, copy) NSString * _Nonnull displayAmount;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayMerchant;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayDate;
/// Returns the right “subtotal” string resource for the designated country code.
@property (nonatomic, readonly, copy) NSString * _Nonnull displaySubtotal;
/// Returns the default tax type string resources for the designated country code.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayDefaultTaxType;
/// Whether or not the receipt should display a single tax by default.
@property (nonatomic, readonly) BOOL shouldDisplaySingleTax;
/// Whether or not the receipt is using net total.
@property (nonatomic, readonly) BOOL isNetTotalType;
/// Objective-C utility to get the expense type code :nodoc:
/// when no longer needed by Objective-C please remove this utility.
+ (NSString * _Nullable)getExpenseTypeDisplayFor:(enum SBLReceiptExpenseType)expenseType SWIFT_WARN_UNUSED_RESULT;
@end

@class SBLColorPalette;
@class SBLCaptureSettings;

SWIFT_CLASS_NAMED("SDKConfiguration")
@interface SBLSDKConfiguration : NSObject
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLSDKConfiguration * _Nonnull shared;)
+ (SBLSDKConfiguration * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Allows to enable or disable certificate pinning. Default: YES/True
@property (nonatomic) BOOL certificatePinningEnabled;
/// Allows to provide a custom Bundle to override assets (strings and images)
@property (nonatomic, strong) NSBundle * _Nullable externalBundle;
/// Defines the fonts used in Sensibill SDK
@property (nonatomic, strong) SBLFontSet * _Nonnull fonts;
/// Defines the colors used in Sensibill SDK
@property (nonatomic, strong) SBLColorPalette * _Nonnull colors;
/// Defines Capture configuration
@property (nonatomic, strong) SBLCaptureSettings * _Nonnull capture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


/// Defines the set of colors used in SDK.
SWIFT_CLASS_NAMED("ColorPalette")
@interface SBLColorPalette : NSObject
/// The color displayed most frequently across your app’s screens and components.
@property (nonatomic, strong) UIColor * _Nonnull primary;
/// The lighter or darker variant of the <code>primary</code> color.
@property (nonatomic, strong) UIColor * _Nonnull primaryVariant;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>primary</code> and <code>primaryVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onPrimary;
/// The accent color.
@property (nonatomic, strong) UIColor * _Nonnull secondary;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>secondary</code>  color.
@property (nonatomic, strong) UIColor * _Nonnull onSecondary;
/// The color that appears behind scrollable content.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>background</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onBackground;
/// Defines the color of surfaces of components, such as cards, sheets, and menus.
@property (nonatomic, strong) UIColor * _Nonnull surface;
/// The lighter or darker variant of the <code>surface</code> color.
@property (nonatomic, strong) UIColor * _Nonnull surfaceVariant;
/// The color of text, iconography, and strokes, shown on top of <code>surface</code>or <code>surfaceVariant</code>  colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurface;
/// The color of emphasized text, iconography, and strokes, shown on top of <code>surface</code> or <code>surfaceVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurfaceFocus;
/// The color or error background
@property (nonatomic, strong) UIColor * _Nonnull error;
/// The color of text, iconography, and strokes, shown on top of <code>error</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
/// Sends the current configuration in JSON format to the logging system
- (void)prettyPrint;
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


/// Defines capture settings used in SDK
SWIFT_CLASS_NAMED("CaptureSettings")
@interface SBLCaptureSettings : NSObject
/// Capture feature flags
@property (nonatomic, strong) SBLCaptureFeatureFlags * _Nonnull features;
/// Capture UI style
@property (nonatomic, strong) SBLCaptureStyle * _Nonnull theme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


SWIFT_CLASS_NAMED("SensibillUIFonts")
@interface SBLSensibillUIFonts : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


/// :nodoc: Sensibill UI Configuration properties
SWIFT_CLASS_NAMED("SensibillUIConfiguration")
@interface SBLSensibillUIConfiguration : NSObject
/// A definition of fonts used for Sensibill UI
@property (nonatomic, strong) SBLSensibillUIFonts * _Nonnull webFonts;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
/// Attempts to provide localized string for given key. If SDKConfiguration.externalBundle is defined then search would be made first in strings provided in external bundle otherwise search would be made in SDK provided localized strings table.
+ (NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end





typedef SWIFT_ENUM(NSInteger, SensibillError, open) {
/// 0 - Success
  SensibillErrorNone = 0,
/// -500 - Internal server error. Please contact Sensibill team if encountered.
  SensibillErrorApiInternalServerError = -500,
/// 1 - SDK was not able to recognize the error.
  SensibillErrorUnknownError = 1,
/// 2 - Status code of HTTP response could not be interpreted as success or failure and no error was returned.
  SensibillErrorApiUnknownStatusCode = 2,
/// 3 - A general error with domain NSURLError.
  SensibillErrorFdnNSURLUnknownError = 3,
/// 1000 - Not entitled to access an object (user, receipt, merchant or client) based on current access token
  SensibillErrorApiNoAccess = 1000,
/// 1001 - User is not authorized
  SensibillErrorApiNoAuthorization = 1001,
/// 1002 - Invalid credentials provided
  SensibillErrorApiNoAuthCannotAuthenticate = 1002,
/// 1003 - The password is temporary, and will be authorized when reset by the user
  SensibillErrorApiNoAuthPasswordTemporary = 1003,
/// 1004 - Authorization Grant Failure
  SensibillErrorSdkAuthorizationGrantFailure = 1004,
/// 1010 - Too many failed login attempts
  SensibillErrorApiNoAuthTooManyLoginFailures = 1010,
/// 1011 - Incorrect email/password combination
  SensibillErrorApiInvalidCredential = 1011,
/// 1012 - Missing parameter in authentication request (email/password, or accessID/accessSecret/credentialType)
  SensibillErrorApiMissingCredentials = 1012,
/// 1013 - Authentication error, e.g. authentication required, or cancelled by a client
  SensibillErrorFdnNSURLAuthenticationError = 1013,
/// 1014 - Logout failed
  SensibillErrorSdkLogoutFailed = 1014,
/// 1015 - User details are missing
  SensibillErrorSdkMissingUserDetails = 1015,
/// 1016 - Missing User Credentials
  SensibillErrorSdkMissingCredentials = 1016,
/// 1020 - Access Token Retrieval Failure
  SensibillErrorSdkAccessTokenRetrievalFailure = 1020,
/// 1021 - Client Token Retrieval Failure
  SensibillErrorSdkClientTokenRetrievalFailure = 1021,
/// 1022 - Received response could not be parsed as token
  SensibillErrorSdkParseTokenFailure = 1022,
/// 1023 - Refresh token is missing
  SensibillErrorSdkMissingRefreshToken = 1023,
/// 1024 - Request failed with error 401, even after token was successfully refreshed. May indicate that token provider returns invalid token.
  SensibillErrorSdkAuthenticationFailureAfterTokenRefresh = 1024,
/// 1030 - Request omitted a required parameter, or invalid value was provided for a required parameter.
  SensibillErrorApiBadRequest = 1030,
/// 1031 - One or more invalid parameters were passed in the request
  SensibillErrorApiInvalidParameters = 1031,
/// 1032 - One or more parameters were missing in the request
  SensibillErrorApiMissingParameters = 1032,
/// 1033 - Extra parameter in request, or attempt to modify read-only parameter
  SensibillErrorApiParameterNotAllowed = 1033,
/// 1034 - Request body is missing
  SensibillErrorApiMissingRequestBody = 1034,
/// 1035 - Validation failed on added/modified entiity. Check parameter values (e.g. incorrectly formatted dates)
  SensibillErrorApiValidationFailed = 1035,
/// 1036 - Requested entity was not found
  SensibillErrorApiObjectNotFound = 1036,
/// 1037 - Conflicting values provided. For example if there is already an email account with the provided email address
  SensibillErrorApiRequestConflict = 1037,
/// 1038 - Logout request returned an error
  SensibillErrorApiLogoutFailed = 1038,
/// 1040 - Response was not returned or could not be understood
  SensibillErrorFdnNSURLResponseError = 1040,
/// 1041 - Response could not be parsed as UserAPIModel
  SensibillErrorSdkParseUserModelFailure = 1041,
/// 1042 - Response could not be parsed as PasswordEvaluation
  SensibillErrorSdkParsePwdStrengthFailure = 1042,
/// 1043 - Response from one of the Availability endpoints could not be parsed
  SensibillErrorSdkParseCheckExistenceModelFailure = 1043,
/// 1044 - Response could not be parsed as SupportedCurrenciesAPIModel
  SensibillErrorSdkParseCurrenciesModelFailure = 1044,
/// 1045 - Response could not be parsed as ReceiptAPIModel
  SensibillErrorSdkParseReceiptModelFailure = 1045,
/// 1046 - Response could not be parsed as ReceiptAPIModel
  SensibillErrorSdkParseTagsModelFailure = 1046,
/// 1047 - No data returned in response
  SensibillErrorSdkNoDataInResponse = 1047,
/// 1048 - Sensibill API Client task execution error. See log for the cause of the error.
  SensibillErrorSdkSensibillAPITaskExecutionError = 1048,
/// 1049 - Cannot parse response data as expected model. See log for the cause of the error.
  SensibillErrorSdkParseDataModelFailed = 1049,
/// 1050 - Configuration provided in Sensibill.plist is invalid. Verify log for more information
  SensibillErrorSdkInvalidConfiguration = 1050,
/// 1051 - Sensibill.plist file was not found. Verify log for more information
  SensibillErrorSdkMissingConfigurationFile = 1051,
/// 1052 - The contents of Sensibill.plist could not be read or parsed.
  SensibillErrorSdkConfigurationFileParsingFailed = 1052,
/// 1053 - SDK configuration is missing one or more values
  SensibillErrorSdkMissingConfigurationValues = 1053,
/// 1054 - Some of the certificate files, specified in Sensibill.plist were not found
  SensibillErrorSdkMissingCertificateFilesForPinning = 1054,
/// 1055 - SDK configuration is missing Credential Type
  SensibillErrorSdkMissingCredentialType = 1055,
/// 1056 - Current context is missing cache identifier
  SensibillErrorSdkMissingCacheIdentifier = 1056,
/// 1057 - SDK failed to refresh folder collection for current user
  SensibillErrorSdkFolderRefreshFailure = 1057,
/// 1058 - User is missing in current context
  SensibillErrorSdkMissingUserInContext = 1058,
/// 1059 - TokenProvider object of SDK instance is not set
  SensibillErrorSdkMissingTokenProvider = 1059,
/// 1060 - Request was cancelled
  SensibillErrorFdnNSURLCancelled = 1060,
/// 1061 - Request timed out
  SensibillErrorFdnNSURLRequestTimeout = 1061,
/// 1062 - Cannot connect to server (e.g. DNS resolution, or routing issue)
  SensibillErrorFdnNSURLCannotConnectToServer = 1062,
/// 1063 - Network connection error (e.g. not connected to internet)
  SensibillErrorFdnNSURLNetworkConnectionError = 1063,
/// 1064 - SSL error, e.g. certificate issues
  SensibillErrorFdnNSURLSSLError = 1064,
/// 1065 - Application is trying to access a wrong URL
  SensibillErrorFdnNSURLWrongUrl = 1065,
/// 1066 - An error occurred while validating sserver certificate pinning. See log for more information.
  SensibillErrorCertificatePinningError = 1066,
/// 1080 - Start cannot be called at this time. SDK is already starting, running, or stopping. Wait for completion or call <code>stop</code> to interrupt and restart.
  SensibillErrorSdkCannotStart = 1080,
/// 1081 - Start of SDK was interrupted by a user-initiated <code>stop</code>
  SensibillErrorSdkStartWasInterrupted = 1081,
/// 1082 - SDK is already stopping. Wait for completion.
  SensibillErrorSdkIsAlreadyStopping = 1082,
/// 1083 - SDK must be started to perform a requested operation.
  SensibillErrorSdkNotStarted = 1083,
};
static NSString * _Nonnull const SensibillErrorDomain = @"Sensibill.SensibillError";

enum SBLUserMode : NSInteger;

/// Main class used to configure the Sensibill Environment
SWIFT_CLASS("_TtC9Sensibill12SensibillSDK")
@interface SensibillSDK : NSObject
/// Singleton Instance of the Sensibill Class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SensibillSDK * _Nonnull shared;)
+ (SensibillSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Single User Mode :nodoc:
@property (nonatomic) enum SBLUserMode userMode;
/// User defined locale. Defaults to en-CA
@property (nonatomic, copy) NSLocale * _Nullable userDefinedLocale;
/// An instance of <code>TokenProvider</code> provided on start
@property (nonatomic, strong) id <SBLTokenProvider> _Nullable tokenProvider;
/// Locale. Our API only supports a set of locales.
/// This property returns the locale that will effectively be used.
/// Can be different than userDefinedLocale
@property (nonatomic, readonly, copy) NSLocale * _Nonnull locale;
/// Currently used client token :nodoc:
@property (nonatomic, copy) NSString * _Nullable clientToken;
/// Cache identifier for currently authenticated user :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable cacheIdentifier;
/// Returns <code>true</code> if current state is <code>stopping</code> to provide ability for other classes to not start initialization.
@property (nonatomic, readonly) BOOL isStopping;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Request to start SDK. Note that this is an asynchronous operation. Caller must wait for start callback to return and succeed before attempting any further interaction with SDK.
+ (void)startWithTokenProvider:(id <SBLTokenProvider> _Nonnull)tokenProvider cacheIdentifier:(NSString * _Nullable)cacheIdentifier completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// See <code>class func start</code>  :nodoc:
- (void)startWithTokenProvider:(id <SBLTokenProvider> _Nonnull)tokenProvider cacheIdentifier:(NSString * _Nullable)cacheIdentifier completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Requests to stop the SDK and invalidates user token.
/// If called during start, will stop the SDK whenever possible and will return <code>startWasInterrupted</code> error in start callback.
/// \param completion a block to be called after SDK was stopped
///
+ (void)stopWithCompletion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Requests to stop the SDK. Allows to specify if user token must be invalidated.
/// If called during start, will stop the SDK whenever possible and will return <code>startWasInterrupted</code> error in start callback.
/// \param invalidateToken Allows to specify if user token must be invalidated. Set to <code>false</code> to prevent invalidating the token. Set to <code>true</code>, or omit the argument to invalidate the token.
///
/// \param completion a block to be called after SDK was stopped
///
+ (void)stopWithInvalidateToken:(BOOL)invalidateToken completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// See <code>class func stop</code>  :nodoc:
- (void)stopWithCompletion:(void (^ _Nonnull)(enum SensibillError))completion;
/// See <code>class func stop</code>  :nodoc:
- (void)stopWithInvalidateToken:(BOOL)invalidateToken completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Refreshes token by calling a <code>tokenProvider</code>, and registers new credentials
- (void)updateTokenWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end







@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
/// Currently used environment URL :nodoc:
@property (nonatomic, readonly, copy) NSURL * _Nullable environment;
/// Currently used pinning files :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull pinningFiles;
/// Currently used API key :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable apiKey;
/// Currently used API Secret :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable apiSecret;
/// Currently used redirect URL :nodoc:
@property (nonatomic, readonly, copy) NSURL * _Nullable redirectUrl;
/// Currently used credential type :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable credentialType;
/// Configure with specified parameters. Throws SensibillError. Internal Use Only :nodoc:
- (BOOL)configureWithEnvironment:(NSURL * _Nullable)environment key:(NSString * _Nullable)key secret:(NSString * _Nullable)secret redirect:(NSURL * _Nullable)redirect credentialType:(NSString * _Nullable)credentialType pinningFiles:(NSArray<NSString *> * _Nonnull)pinningFiles error:(NSError * _Nullable * _Nullable)error;
/// Configure from file. Throws SensibillError. Internal Use Only :nodoc:
- (BOOL)configureWithPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Attempts to configure SDK by loading configuration file (supported type plist) either in main bundle or SDKConfiguration.externalBundle. Throws SensibillError. Internal Use Only :nodoc:
- (BOOL)configureAndReturnError:(NSError * _Nullable * _Nullable)error;
@end





@protocol SensibillUICoordinatorDelegate;
enum PresentationMethod : NSInteger;
@class SensibillUICoordinatorStartOptions;

/// Object used to provide an easy interface for clients to display Sensibill’s UI. This class handles all internal state and movement between screens internally to Sensibill UI.
SWIFT_CLASS_NAMED("SensibillUICoordinator")
@interface SensibillUICoordinator : NSObject
/// A delegate that will receive events from <code>SensibillUICoordinator</code>
@property (nonatomic, weak) id <SensibillUICoordinatorDelegate> _Nullable delegate;
/// Initialize for modal presentation
/// \param host <code>UIViewController</code> over which the Sensibill UI will be presented modally
///
- (nonnull instancetype)initWithHost:(UIViewController * _Nonnull)host;
/// Initialize for selected presentation
/// \param host <code>UIViewController</code> over which the Sensibill UI will be presented
///
/// \param presentationMethod Presentation method
///
- (nonnull instancetype)initWithHost:(UIViewController * _Nonnull)host presentationMethod:(enum PresentationMethod)presentationMethod OBJC_DESIGNATED_INITIALIZER;
/// Starts Sensibill UI with animation, and navigates to default page (Dashboard).
- (void)start;
/// Start Sensibill UI with specified start options.
/// \param options the start options to use
///
- (void)startWithOptions:(SensibillUICoordinatorStartOptions * _Nonnull)options;
/// Notifies <code>SensibillUICoordinatorDelegate</code>that Sensibill UI should be closed.
/// If modal presentation is used, the view will be dismissed, otherwise integrating app should dismiss the view.
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SensibillUICoordinator (SWIFT_EXTENSION(Sensibill))
@end


/// Responsible for encapsulation of SensibillUICoordinator start options.
SWIFT_CLASS_NAMED("StartOptions")
@interface SensibillUICoordinatorStartOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@interface SensibillUICoordinator (SWIFT_EXTENSION(Sensibill))
@end

/// Defines the supported presentation methods
typedef SWIFT_ENUM(NSInteger, PresentationMethod, open) {
/// Will present Sensibill’s UI modally over provided host UIViewController
  PresentationMethodModal = 0,
/// Will embed Sensibill’s UI into the provided host as a child UIViewController
  PresentationMethodEmbed = 1,
/// Will push Sensibill’s UI into the provided UINavigationController host. Will present modally if the host is not a UINavigationController.
  PresentationMethodPush = 2,
};











@interface SensibillUICoordinator (SWIFT_EXTENSION(Sensibill)) <SBLCaptureFlowCoordinatorDelegate>
/// :nodoc: Notifies the delegate that the capture will be present
- (void)coordinatorWillBeginCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
/// :nodoc: Notifies the delegate that the capture was cancelled
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
/// :nodoc: Notifies the delegate that the capture has finished, and provides a list of <code>Transaction</code>s submitted for processing.
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transactions:(NSArray<SBLTransaction *> * _Nonnull)transactions;
@end






/// A conforming class will receive events from <code>SensibillUICoordinator</code>
SWIFT_PROTOCOL_NAMED("SensibillUICoordinatorDelegate")
@protocol SensibillUICoordinatorDelegate <NSObject>
@optional
/// Informs the app that the start function will present the WebUINavigationController, and gives them a reference to it.
/// \param coordinator coordinator responsible for handling the Sensibill UI flow
///
/// \param webUINavigationController the webUINavigationController that will be presented
///
- (void)coordinator:(SensibillUICoordinator * _Nonnull)coordinator willPresent:(UINavigationController * _Nonnull)webUINavigationController;
/// Informs the app that the start function has completed presenting the WebUINavigationController, and gives them a reference to it.
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
/// \param webUINavigationController the webUINavigationController that was presented
///
- (void)coordinator:(SensibillUICoordinator * _Nonnull)coordinator didPresent:(UINavigationController * _Nonnull)webUINavigationController;
/// Informs the integrated app that the coordinator is starting the capture flow.
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (void)coordinatorWillPresentCapture:(SensibillUICoordinator * _Nonnull)coordinator;
/// Informs the app that WebUI encountered a fatal error. Asks if the built in error screen should be displayed
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (BOOL)coordinatorShouldShowFatalErrorView:(SensibillUICoordinator * _Nonnull)coordinator SWIFT_WARN_UNUSED_RESULT;
/// Informs the app that there was an error starting the UI flow
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
/// \param error The error thrown by the coordinator
///
- (void)coordinator:(SensibillUICoordinator * _Nonnull)coordinator encountered:(NSError * _Nonnull)error;
/// Informs the app that WebUI will be restarted
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (void)coordinatorWillRestartWebUI:(SensibillUICoordinator * _Nonnull)coordinator;
@required
/// Informs the app that WebUI must be terminated
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (void)coordinatorWillTerminateWebUI:(SensibillUICoordinator * _Nonnull)coordinator;
@end


@interface SBLSensibillUIFonts (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>regular</code> font in Objective-C.
- (void)setRegularWithFamily:(NSString * _Nonnull)family url:(NSString * _Nonnull)url;
@end


/// :nodoc: Stores the metadata for the receipt
SWIFT_CLASS_NAMED("SharedMetaData")
@interface SBLSharedMetaData : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// The expence type as a string, e.g. “business”, or “personal”
@property (nonatomic) enum SBLReceiptExpenseType expenseType;
/// Indicates whether receipt is a favorite. Default is <code>false</code>
@property (nonatomic) BOOL favorite;
/// The array of folder IDs
@property (nonatomic, copy) NSArray<NSString *> * _Nullable folders;
/// A receipt note
@property (nonatomic, copy) NSString * _Nullable note;
/// A receipt category code
@property (nonatomic, copy) NSString * _Nullable receiptCategory;
/// Additional categories for the receipts
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tags;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end





@interface SBLSharedMetaData (SWIFT_EXTENSION(Sensibill))
/// For Objective-C only, use <code>dictionary</code> in Swift. Converts <code>SharedMetaData</code> to dictionary. The names of the fields correspond the Sensibill API specifications
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
/// For Objective-C only, use <code>expenseType.code</code> in Swift. Provides a string code for <code>expenseType</code>, compatible with API values
@property (nonatomic, readonly, copy) NSString * _Nullable expenseTypeCode;
@end


@interface SensibillUICoordinatorStartOptions (SWIFT_EXTENSION(Sensibill))
@end


/// Provides a convenience interface for building a <code>SensibillUICoordinator.StartOptions</code>
SWIFT_CLASS_NAMED("Builder")
@interface SensibillUICoordinatorStartOptionsBuilder : NSObject
/// Initializes the builder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add boolean value for <code>animated</code> property of <code>SensibillUICoordinator.StartOptions</code>
- (SensibillUICoordinatorStartOptionsBuilder * _Nonnull)addWithAnimated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Add <code>NavigationIntent.METADATA_EDIT</code> by associating localIDs of provided <code>Transactions</code>
- (SensibillUICoordinatorStartOptionsBuilder * _Nonnull)addEditMetadataIntentWithTransactions:(NSArray<SBLTransaction *> * _Nonnull)transactions SWIFT_WARN_UNUSED_RESULT;
/// For Objective-C use only.
/// Attempts to build instance of <code>NavigationIntent</code> using <code>SBLNavigationIntent</code> and parameter.
/// Add instance of <code>NavigationIntent</code> for <code>navigationIntent</code> property of <code>SensibillUICoordinator.StartOptions</code>.
- (SensibillUICoordinatorStartOptionsBuilder * _Nonnull)addWithNavigationIntent:(enum SBLNavigationIntent)navigationIntent parameter:(NSString * _Nullable)parameter SWIFT_WARN_UNUSED_RESULT;
/// Complete the building by providing a <code>SensibillUICoordinator.StartOptions</code>
- (SensibillUICoordinatorStartOptions * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("SupportedCurrencyCollection")
@interface SBLSupportedCurrencyCollection : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLSupportedCurrencyCollection * _Nonnull shared;)
+ (SBLSupportedCurrencyCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nullable currencies;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Use the TagCollection shared instance to query the list of user tags :nodoc:
SWIFT_CLASS_NAMED("TagCollection")
@interface SBLTagCollection : NSObject
/// TagCollection singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLTagCollection * _Nonnull shared;)
+ (SBLTagCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Find all user tags
/// \param completion block executed when the request is complete. Passes an array of strings or an error.
///
- (void)findWithCompletion:(void (^ _Nonnull)(NSSet<NSString *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc: Represents Taxes
SWIFT_CLASS_NAMED("Tax")
@interface SBLTax : NSObject <NSSecureCoding>
/// Value for that tax
@property (nonatomic) double value;
/// Tax percentage
@property (nonatomic) double rate;
/// Type of tax
@property (nonatomic, copy) NSString * _Nullable type;
/// NSSecureCoding Protocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is responsible for providing new tokens if the current tokens were to expire.
/// The standard implentation operates the refresh token that were retrieved during authentication
/// for flows that don’t include an integration server.
/// You should create a subclass of TokenProvider, and override the provideTokenReplacement method.
/// In that method call the completion block passed as parameter and provide a new set of
/// credentials, or an error.
SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol SBLTokenProvider
/// Method called when the Sensibill SDK needs an access token.
/// Override this method in your own implementation
/// \param completion Block to call when the token refresh operation is completed.
/// If a non-nil object is passed as the <code>error</code> argument, the SDK will
/// assume token retrieval has failed and will no longer call this method
/// again until the SDK is started again.
///
- (void)provideTokenReplacementWithCompletion:(void (^ _Nonnull)(SBLCredentials * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("TrackingEvent")
@interface SBLTrackingEvent : NSObject
/// All event fields as a dictionary.
/// The dictionary will contain <code>TrackingEvent.Fields</code>, as well as any other custom properties set for the event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
/// The initializer. Automatically sets the <code>User.current?.accessId</code> value if available
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// :nodoc: Returns an instance of the event with provided name.
+ (SBLTrackingEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end



@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// The detailed description of the event
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSNumber;

@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(id _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)name;
/// Feature of the event
@property (nonatomic, copy) NSString * _Nullable feature;
/// Name of the event
@property (nonatomic, copy) NSString * _Nullable name;
/// Category of the event
@property (nonatomic, copy) NSString * _Nullable category;
/// Action that triggered event
@property (nonatomic, copy) NSString * _Nullable action;
/// The area of the UI where the event took place
@property (nonatomic, copy) NSString * _Nullable screenName;
/// A numeric value associated with the event
@property (nonatomic, strong) NSNumber * _Nullable value;
/// The name of the user associated with the event
@property (nonatomic, copy) NSString * _Nullable userId;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBLTransactionError, "TransactionError", open) {
/// No error
  SBLTransactionErrorNoError = 0,
/// Transaction is invalid: type was not set
  SBLTransactionErrorTransactionTypeIsMissing = 1,
/// Transaction is invalid: not finished, but cannot be uploaded, monitored, or updated
  SBLTransactionErrorTransactionHasNoValidProcessor = 2,
/// Transaction state is invalid for upload: <code>imageData</code> is not set
  SBLTransactionErrorUploadCancelledNoImage = 3,
/// Transaction state is invalid for polling: <code>remoteId</code> is not set
  SBLTransactionErrorPollMissingRemoteId = 4,
/// Transaction state is invalid for conversion: <code>emailId</code> is not set
  SBLTransactionErrorConversionMissingEmailId = 5,
/// Retry: upload request failed too many times
  SBLTransactionErrorUploadFailedTooManyTimes = 6,
/// Retry: poll for transaction updates failed too many times
  SBLTransactionErrorPollFailedTooManyTimes = 7,
/// Retry: update receipt failed too many times
  SBLTransactionErrorUpdateFailedTooManyTimes = 8,
/// Retry: receipt conversion failed too many times
  SBLTransactionErrorConversionFailedTooManyTimes = 9,
/// Retake: Transaction state is invalid for upload: <code>imageData</code> is too big. Reduce image size to 5 MB or less.
  SBLTransactionErrorUploadCancelledImageTooBig = 10,
/// On upload request, server returned a response, that could not be interpreted, and is considered invalid
  SBLTransactionErrorUploadInvalidResponse = 11,
/// On wait request, server returned a response, that could not be interpreted, and is considered invalid
  SBLTransactionErrorPollInvalidResponse = 12,
/// Server returned a <code>stopped</code> status for transaction
  SBLTransactionErrorWasStoppedOnServer = 13,
/// Server returned a <code>failed</code> status for transaction
  SBLTransactionErrorFailedOnServer = 14,
/// Server returned status code 400 (bad request)
  SBLTransactionErrorBadRequest = 15,
/// Server returned status code 401 (unauthorized)
  SBLTransactionErrorUnauthorized = 16,
/// Server returned status code 403 (forbidden)
  SBLTransactionErrorForbidden = 17,
};


SWIFT_CLASS_NAMED("TransactionHandler")
@interface SBLTransactionHandler : NSObject
/// Singleton Instance of the TransactionHandler Class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLTransactionHandler * _Nonnull shared;)
+ (SBLTransactionHandler * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there are any transactions at all
@property (nonatomic, readonly) BOOL hasTransactions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@interface SBLTransactionHandler (SWIFT_EXTENSION(Sensibill))
- (SBLTransaction * _Nullable)transactionForReceiptID:(NSString * _Nullable)receiptID SWIFT_WARN_UNUSED_RESULT;
- (SBLTransaction * _Nullable)transactionForRemoteID:(NSString * _Nullable)remoteID SWIFT_WARN_UNUSED_RESULT;
- (SBLTransaction * _Nullable)transactionForLocalID:(NSString * _Nullable)localID SWIFT_WARN_UNUSED_RESULT;
- (SBLTransaction * _Nullable)transactionForEmailID:(NSString * _Nullable)emailID SWIFT_WARN_UNUSED_RESULT;
@end



@interface SBLTransactionHandler (SWIFT_EXTENSION(Sensibill))
/// Add a new transaction for processing
- (void)add:(SBLTransaction * _Nullable)transaction;
/// Remove a provided transaction
- (void)remove:(SBLTransaction * _Nonnull)transaction;
- (void)removeAllIn:(NSArray<SBLTransaction *> * _Nonnull)transactions;
/// Submit email for processing as receipt. Used when automated conversion on server failed, but user would still like to convert an email to receipt
- (void)convertWithNonReceiptEmail:(SBNonReceiptEmail * _Nonnull)email didSucceed:(void (^ _Nonnull)(BOOL))didSucceed;
- (void)retry:(SBLTransaction * _Nonnull)transaction;
@end



@interface SBLTransactionHandler (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull failedImageTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull failedEmailTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull completedEmailTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull inFlightTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull processingTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull offlineTransactions;
@end


/// note:
/// Use this protocol to monitor a single transaction. To monitor all transactions, use <code>SBDataEvent</code>.
/// <ul>
///   <li>
///     Protocol defines methods to monitor receipt uploading transaction progress
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("TransactionObserver")
@protocol SBLTransactionObserver <NSObject>
/// Informs that given transaction’s status (reflected in <code>status</code> property) has changed.
/// \param transaction updated transaction information
///
- (void)statusDidChangeForTransaction:(SBLTransaction * _Nonnull)transaction;
@optional
/// Informs that given transaction’s processing time (reflected in <code>expectedProcessingTime</code> property) has changed.
/// \param transaction updated transaction information
///
- (void)expectedProcessingTimeDidChangeForTransaction:(SBLTransaction * _Nonnull)transaction;
@end

/// Defines a transaction processing status
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTransactionStatus, "TransactionStatus", open) {
/// Transaction status is not yet known. Upon local transaction validation this status can change to <code>uploading</code> or <code>failed</code>.
  SBLTransactionStatusUnknown = 0,
/// Transaction processing started. This status is set immediately after transaction was locally validated. This status will be kept until a response from server is received and can be followed by <code>processing</code>, <code>completed</code>, or <code>failed</code> status.
  SBLTransactionStatusUploading = 1,
/// Transaction is being processed by the server. This value is set after transaction was accepted by the server for processing, and can be followed by <code>completed</code>, or <code>failed</code> status.
  SBLTransactionStatusProcessing = 2,
/// Transaction processing had finished successfully. This is a final status.
  SBLTransactionStatusCompleted = 3,
/// Transaction validation or processing had failed. This is a final status.
  SBLTransactionStatusFailed = 4,
};

/// Source type of transaction information
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTransactionType, "TransactionType", open) {
/// Receipt type is not available
  SBLTransactionTypeUndefined = 0,
/// Transaction information for scanned receipt
  SBLTransactionTypeImage = 1,
/// Transaction information for receipt retrieved from the email
  SBLTransactionTypeEmail = 2,
/// Transaction information for receipts converted from non-receipt emails
  SBLTransactionTypeNonReceiptEmail = 3,
/// Transaction to update receipt information
  SBLTransactionTypeUpdate = 4,
};

@class SBSecurityPolicy;

/// Trust manager for Sensibill Web client. Internal use only. :nodoc:
SWIFT_CLASS_NAMED("TrustManager")
@interface SBLTrustManager : NSObject
/// Legacy function for certificates pinning from bundle. Internal use only. :nodoc:
+ (SBSecurityPolicy * _Nonnull)policyFromBundleWithPinningMode:(SBSSLPinningMode)pinningMode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










@interface UIColor (SWIFT_EXTENSION(Sensibill))
/// Convenience function for Objective-C classes. Swift classes can use <code>UIColor(hex: ...)</code> constructor directly.
+ (UIColor * _Nonnull)sblColorWithHexString:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
/// Provides a CSS-compatible Hex code of the color from UIColor, e.g. #FFCC02
@property (nonatomic, readonly, copy) NSString * _Nonnull hexValue;
@end

















@interface UIImage (SWIFT_EXTENSION(Sensibill))
/// :nodoc:
+ (UIImage * _Nullable)sblImageWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end




@interface UINavigationController (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@end










/// Easy access to API endpoints. Only for internal use (for now). :nodoc:
SWIFT_CLASS_NAMED("URLConstant")
@interface SBLURLConstant : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull home;)
+ (NSString * _Nonnull)home SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull authorizationGrant;)
+ (NSString * _Nonnull)authorizationGrant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accessToken;)
+ (NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull jwtAuthentication;)
+ (NSString * _Nonnull)jwtAuthentication SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull logout;)
+ (NSString * _Nonnull)logout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientInfo;)
+ (NSString * _Nonnull)clientInfo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull users;)
+ (NSString * _Nonnull)users SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull me;)
+ (NSString * _Nonnull)me SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull counts;)
+ (NSString * _Nonnull)counts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tags;)
+ (NSString * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkPasswordStrength;)
+ (NSString * _Nonnull)checkPasswordStrength SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkExistenceAccessId;)
+ (NSString * _Nonnull)checkExistenceAccessId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkExistenceEmail;)
+ (NSString * _Nonnull)checkExistenceEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkExistenceReceiptEmail;)
+ (NSString * _Nonnull)checkExistenceReceiptEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull forgotPassword;)
+ (NSString * _Nonnull)forgotPassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resetTemporaryPassword;)
+ (NSString * _Nonnull)resetTemporaryPassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setPassword;)
+ (NSString * _Nonnull)setPassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull folders;)
+ (NSString * _Nonnull)folders SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receipts;)
+ (NSString * _Nonnull)receipts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receiptTransaction;)
+ (NSString * _Nonnull)receiptTransaction SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receipt;)
+ (NSString * _Nonnull)receipt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wait;)
+ (NSString * _Nonnull)wait SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reminders;)
+ (NSString * _Nonnull)reminders SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy, getter=export) NSString * _Nonnull export_;)
+ (NSString * _Nonnull)export SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull exports;)
+ (NSString * _Nonnull)exports SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lookups;)
+ (NSString * _Nonnull)lookups SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receiptCategories;)
+ (NSString * _Nonnull)receiptCategories SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull locales;)
+ (NSString * _Nonnull)locales SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull currencies;)
+ (NSString * _Nonnull)currencies SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull emails;)
+ (NSString * _Nonnull)emails SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull email;)
+ (NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull merchants;)
+ (NSString * _Nonnull)merchants SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accountsEmail;)
+ (NSString * _Nonnull)accountsEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull intercepts;)
+ (NSString * _Nonnull)intercepts SWIFT_WARN_UNUSED_RESULT;
/// Returns true if provided URL contains API endpoint, which can be retried.
+ (BOOL)canRetryWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Object representation of a Sensibill User
/// Get the current user
SWIFT_CLASS_NAMED("User")
@interface SBLUser : NSObject <NSSecureCoding>
/// :nodoc: NSSecureCoding Protocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// A unique user identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// User access ID, specified on login
@property (nonatomic, copy) NSString * _Nullable accessId;
/// The email of the user
@property (nonatomic, copy) NSString * _Nullable email;
/// The first name of the user
@property (nonatomic, copy) NSString * _Nullable firstName;
/// The last name of the user
@property (nonatomic, copy) NSString * _Nullable lastName;
/// The email used to relay the receipts by email
@property (nonatomic, copy) NSString * _Nullable receiptEmail;
/// Currently authenticated user
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLUser * _Nullable current;)
+ (SBLUser * _Nullable)current SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SBLUser (SWIFT_EXTENSION(Sensibill))
/// :nodoc:
- (void)saveToCache;
@end

/// User Mode for Sensibill SDK, used for backwards compatibility :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLUserMode, "UserMode", open) {
/// Multiple Users
  SBLUserModeMultiple = 0,
/// Single User
  SBLUserModeSingle = 1,
};


SWIFT_CLASS_NAMED("UserSubmittedData")
@interface SBLUserSubmittedData : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// The grand total
@property (nonatomic) float grandTotal;
/// The receipt date as a string
@property (nonatomic, copy) NSString * _Nullable receiptDate;
/// The name of the merchant
@property (nonatomic, copy) NSString * _Nullable merchantName;
/// The category of the receipt as a string
@property (nonatomic, copy) NSString * _Nullable receiptCategory;
/// Currency code as a string
@property (nonatomic, copy) NSString * _Nullable currencyCode;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



@interface SBLUserSubmittedData (SWIFT_EXTENSION(Sensibill))
/// For Objective-C only, use <code>dictionary</code> in Swift. Converts <code>UserSubmittedData</code> to dictionary. The names of the fields correspond the Sensibill API specifications
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
@end





/// The entry point of the module used by an integrator to create and configure WebUI
SWIFT_CLASS("_TtC9Sensibill25WebUINavigationController")
@interface WebUINavigationController : UINavigationController
/// Design-time initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef SENSIBILL_SWIFT_H
#define SENSIBILL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <Sensibill/Sensibill.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Sensibill",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// :nodoc:
SWIFT_CLASS_NAMED("APIRequest")
@interface SBLAPIRequest : NSObject
+ (SBLAPIRequest * _Nonnull)requestWithUrl:(NSString * _Nonnull)url requestType:(RequestType)requestType parameters:(NSDictionary * _Nullable)parameters success:(SBOperationSuccessBlock _Nullable)success error:(SBOperationErrorBlock _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull urlString;
@property (nonatomic) RequestType type;
@property (nonatomic, copy) NSDictionary * _Nullable params;
@property (nonatomic, copy) SBOperationErrorBlock _Nullable error;
@property (nonatomic, copy) SBOperationSuccessBlock _Nullable success;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class SBLTax;

/// Represents an amount of money (for a receipt, item, transaction…) :nodoc:
SWIFT_CLASS_NAMED("Amount")
@interface SBLAmount : NSObject
/// Before tax amount
@property (nonatomic) double beforeTax;
/// Array of taxes (See Tax class)
@property (nonatomic, copy) NSArray<SBLTax *> * _Nonnull taxes;
/// After tax amount
@property (nonatomic) double afterTax;
/// Currency code
@property (nonatomic, copy) NSString * _Nullable currencyCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Provides listeners with updates on SDK events and user actions
SWIFT_CLASS_NAMED("Analytics")
@interface SBLAnalytics : NSObject
/// A singleton instance of the Analytics
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLAnalytics * _Nonnull shared;)
+ (SBLAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol SBLEventListener;

@interface SBLAnalytics (SWIFT_EXTENSION(Sensibill))
/// Adds a listener, or replaces the listener with the provided instance, if a listener with the same key already exists.
/// \param key the string used to identify the listener.
///
/// \param listener an instance of the listener
///
- (void)addListenerWithKey:(NSString * _Nonnull)key listener:(id <SBLEventListener> _Nonnull)listener;
/// Removes a listener with the provided key
- (void)removeListenerWithKey:(NSString * _Nonnull)key;
@end









/// Cache provider. Private use only. :nodoc:
SWIFT_CLASS_NAMED("Cache")
@interface SBLCache : NSObject
/// Cache instance for data shared for all user identifiers
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLCache * _Nonnull sharedCache;)
+ (SBLCache * _Nonnull)sharedCache SWIFT_WARN_UNUSED_RESULT;
/// Cache instance for data that belongs to <code>SensibillSDK.shared.cacheIdentifier</code>
/// The validity of the value is verified on each call (to prevent cache from the wrong user to leak to another user or unauthenticated state)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLCache * _Nullable userCache;)
+ (SBLCache * _Nullable)userCache SWIFT_WARN_UNUSED_RESULT;
/// Saves provided data in the memory and the file
/// <ul>
///   <li>
///     Throws an exception if cache directory or file could not be created
///   </li>
/// </ul>
/// \param data the data that needs to be stored
///
/// \param key the data identifier. Will also be used as the name of file.
///
- (BOOL)setWithData:(id _Nonnull)data forKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Returns an object for a given key. (or nil of the key is unkown)
/// <ul>
///   <li>
///     Throws an exception <code>unknownKey</code> if data is not found or its value is <code>nil</code>
///   </li>
/// </ul>
/// \param key the data identifier to be retrieved.
///
/// \param classes classes to be unarchived.
///
///
/// returns:
/// the data from cache
- (id _Nullable)dataForKey:(NSString * _Nonnull)key forClasses:(NSArray<Class> * _Nonnull)classes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Remove data for a given key.
/// <ul>
///   <li>
///     Throws an exception if data removal fails
///   </li>
/// </ul>
/// \param key the data identifier to be removed.
///
- (BOOL)removeDataForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Clear cache
/// Deletes cache directory and all its files
- (BOOL)clearCacheAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSBundle;
@class SBLCaptureTheme;

/// Allows an integrator to pass configurable options to a Capture Screen
SWIFT_CLASS_NAMED("CaptureConfiguration")
@interface SBLCaptureConfiguration : NSObject
/// Bundle containing theme and localizations for Capture Screen
@property (nonatomic, readonly, strong) NSBundle * _Nullable bundle;
/// Theme containing colors for Capture Screen
@property (nonatomic, readonly, strong) SBLCaptureTheme * _Nullable theme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS_NAMED("CaptureConfigurationBuilder")
@interface SBLCaptureConfigurationBuilder : NSObject
/// Add a bundle to the configuration
- (SBLCaptureConfigurationBuilder * _Nonnull)addWithBundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Add a theme to the configuration
- (SBLCaptureConfigurationBuilder * _Nonnull)addWithTheme:(SBLCaptureTheme * _Nullable)theme SWIFT_WARN_UNUSED_RESULT;
/// Complete the build and provide a <code>CaptureConfiguration</code>
- (SBLCaptureConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Defines capture feature flags used in SDK
SWIFT_CLASS_NAMED("CaptureFeatureFlags")
@interface SBLCaptureFeatureFlags : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLCaptureFeatureFlags (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>enableAutoCapture</code> in Objective-C.
- (void)setAutoCaptureWithEnabled:(BOOL)enabled;
/// Allows to set <code>defaultToAutoCapture</code> in Objective-C.
- (void)setAutoCaptureWithIsDefault:(BOOL)isDefault;
/// Allows to set <code>enableBlurDetection</code> in Objective-C.
- (void)setBlurDetectionWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableCaptureProgressFeedback</code> in Objective-C.
- (void)setCaptureProgressFeedbackWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableCrop</code> in Objective-C.
- (void)setCropWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableFlash</code> in Objective-C.
- (void)setFlashWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableImageGallery</code> in Objective-C.
- (void)setImageGalleryWithEnabled:(BOOL)enabled;
/// Allows to set <code>attachLocationData</code> in Objective-C.
- (void)setLocationDataWithIsAttached:(BOOL)isAttached;
/// Allows to set <code>enableLongCapture</code> in Objective-C.
- (void)setLongCaptureWithEnabled:(BOOL)enabled;
/// Allows to set <code>enableLongReceiptPageToast</code> in Objective-C.
- (void)setLongReceiptPageToastWithEnabled:(BOOL)enabled;
/// Allows to set <code>maxImages</code> in Objective-C.
- (void)setMaxImagesWithLimit:(NSInteger)limit;
/// Allows to set <code>enableCaptureTips</code> in Objective-C.
- (void)setCaptureTipsWithEnabled:(BOOL)enabled;
/// Allows to set <code>compressForSensibillAPI</code> in Objective-C.
- (void)setCompressForSensibillAPIWithEnabled:(BOOL)enabled;
@end

@protocol SBLCaptureFlowCoordinatorDelegate;
@class UIViewController;
@class SBLTransaction;
enum SBLReceiptExpenseType : NSInteger;

SWIFT_CLASS_NAMED("CaptureFlowCoordinator")
@interface SBLCaptureFlowCoordinator : NSObject
/// Receives one or more event associated with receipt capturing and optionally processing.
@property (nonatomic, weak) id <SBLCaptureFlowCoordinatorDelegate> _Nullable delegate;
/// Initialize a capture flow coordinator with provided <code>UIViewController</code>
/// \param host Instance of <code>UIViewController</code> on which coordinator would present receipt capture flow in full screen mode.
///
- (nonnull instancetype)initWithHost:(UIViewController * _Nonnull)host OBJC_DESIGNATED_INITIALIZER;
/// Start receipt capture flow on host <code>UIViewController</code>.
- (void)start;
/// Start receipt capture flow on host <code>UIViewController</code> with provided <code>Transaction</code> object.
/// \param transaction Instance of <code>Transaction</code>
///
- (void)startWithTransaction:(SBLTransaction * _Nonnull)transaction;
/// Start receipt capture flow on host <code>UIViewController</code> with provided <code>ReceiptExpenseType</code> information.
/// \param expenseType Instance of <code>ReceiptExpenseType</code>
///
- (void)startWithExpenseType:(enum SBLReceiptExpenseType)expenseType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class SBLCaptureNavigationController;
@class UIImage;
@class SBLCaptureResult;

/// Delegate exposed to Integrator’s app to receive finished photo
SWIFT_PROTOCOL_NAMED("CaptureNavigationControllerDelegate")
@protocol SBLCaptureNavigationControllerDelegate
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture
///
/// \param images an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), empty array is returned.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didCapture:(NSArray<UIImage *> * _Nonnull)images SWIFT_UNAVAILABLE_MSG("Removed in 2021.5.0. Please use captureNavigationController(_:didFinishCapture:) instead.");
/// Informs a delegate that capture flow has finished.
/// \param controller instance of navigation controller used for capture.
///
/// \param result instance of <code>CaptureResult</code> with an array of images produced by a capture. If no images were produced (e.g. user cancelled the capture), the result will contain an empty array of images.
///
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didFinishCapture:(SBLCaptureResult * _Nonnull)result;
@end


@interface SBLCaptureFlowCoordinator (SWIFT_EXTENSION(Sensibill)) <SBLCaptureNavigationControllerDelegate>
/// :nodoc:
- (void)captureNavigationController:(SBLCaptureNavigationController * _Nonnull)controller didFinishCapture:(SBLCaptureResult * _Nonnull)result;
@end



/// A conforming class would receive one or more events triggered by <code>CaptureFlowCoordinator</code>
SWIFT_PROTOCOL_NAMED("CaptureFlowCoordinatorDelegate")
@protocol SBLCaptureFlowCoordinatorDelegate <NSObject>
@optional
/// Informs that user that the capture flow is about to be shown and started.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorWillBeginCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@required
/// Informs that user finished capturing receipt.
/// \param coordinator coordinator responsible for handling receipt capture flow.
///
/// \param transaction instance of <code>SBLTransaction</code>having captured image and one or more provided optional metadata.
///
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transaction:(SBLTransaction * _Nonnull)transaction SWIFT_UNAVAILABLE_MSG("Removed in 2021.5.0. Please use coordinatorDidFinishCapture(_:transactions:)");
/// Informs that user has finished capturing receipt(s).
/// \param coordinator coordinator responsible for handling receipt capture flow.
///
/// \param transactions Array of <code>SBLTransaction</code> which contains captured image and associated metadata.
///
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transactions:(NSArray<SBLTransaction *> * _Nonnull)transactions;
/// Informs that user cancelled receipt capture.
/// Event would be triggered if user cancels onboarding flow for the first time otherwise user explicitly taps on cancel button on capture screen.
/// \param coordinator coordinator responsible for handling receipt capture and processing flow.
///
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@end

@class NSCoder;

/// The entry point of the module used by an integrator to create and configure Sensibill Capture
SWIFT_CLASS_NAMED("CaptureNavigationController")
@interface SBLCaptureNavigationController : UINavigationController
/// Represents current capture configuration.
@property (nonatomic, readonly, strong) SBLCaptureConfiguration * _Nonnull captureConfiguration;
/// Receives one or more event associated with capture.
@property (nonatomic, weak) id <SBLCaptureNavigationControllerDelegate> _Nullable captureDelegate;
/// Initializes capture navigation controller using the default <code>CaptureConfiguration</code>.
- (nonnull instancetype)init;
/// Initializes capture navigation controller with provided <code>CaptureConfiguration</code>.
/// \param configuration <code>CaptureConfiguration</code> holding one or more capture features and theme.
///
- (nonnull instancetype)initWithConfiguration:(SBLCaptureConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class NSData;

/// Represents capture completion result provided via <code>CaptureNavigationControllerDelegate</code> method.
SWIFT_CLASS_NAMED("CaptureResult")
@interface SBLCaptureResult : NSObject
/// Returns captured images as a data in JPEG format. If no images were captured, an empty array will be returned.
/// The provided data can be displayed as an image using <code>UIImage(data: Data)</code>,
/// or stored in a file using <code>Data.write(to: URL, options: Data.WritingOptions)</code>.
/// You can also use <code>Data.metadata</code> and <code>Data.getLocation()</code> to retrieve an EXIF data available in the image.
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull images;
/// Returns <code>true</code> if the result contains no images (e.g. user cancelled the capture)
@property (nonatomic, readonly) BOOL isEmpty;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Defines capture colors used in SDK
SWIFT_CLASS_NAMED("CaptureStyle")
@interface SBLCaptureStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

@interface SBLCaptureStyle (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>captureBackgroundColor</code> in Objective-C.
- (void)setCaptureBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>onCaptureBackgroundColor</code> in Objective-C.
- (void)setOnCaptureBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>detectionStrokeColor</code> in Objective-C.
- (void)setDetectionStrokeWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>detectionFillColor</code> in Objective-C.
- (void)setDetectionFillWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>captureCircleStrokeColor</code> in Objective-C.
- (void)setCaptureCircleStrokeWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>captureCircleFillColor</code> in Objective-C.
- (void)setCaptureCircleFillWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePageCountBackgroundColor</code> in Objective-C.
- (void)setCapturePageCountBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePageCountTextColor</code> in Objective-C.
- (void)setCapturePageCountTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>captureDocumentTypeButtonTextColor</code> in Objective-C.
- (void)setCaptureDocumentTypeButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>autoCaptureButtonTextColor</code> in Objective-C.
- (void)setAutoCaptureButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewTitleColor</code> in Objective-C.
- (void)setCapturePreviewTitleWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewDoneButtonBackgroundColor</code> in Objective-C.
- (void)setCapturePreviewDoneButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewDoneButtonTextColor</code> in Objective-C.
- (void)setCapturePreviewDoneButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewPageControlTintColor</code> in Objective-C.
- (void)setCapturePreviewPageControlTintWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewCurrentPageControlColor</code> in Objective-C.
- (void)setCapturePreviewCurrentPageControlWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePreviewLoaderColor</code> in Objective-C.
- (void)setCapturePreviewLoaderColorWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropCancelButtonBackgroundColor</code> in Objective-C.
- (void)setCropCancelButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropCancelButtonTextColor</code> in Objective-C.
- (void)setCropCancelButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropDoneButtonBackgroundColor</code> in Objective-C.
- (void)setCropDoneButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropDoneButtonTextColor</code> in Objective-C.
- (void)setCropDoneButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>cropLoaderColor</code> in Objective-C.
- (void)setCropLoaderWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionTitleColor</code> in Objective-C.
- (void)setCapturePermissionTitleWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionMessageColor</code> in Objective-C.
- (void)setCapturePermissionMessageWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionButtonBackgroundColor</code> in Objective-C.
- (void)setCapturePermissionButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>capturePermissionButtonTextColor</code> in Objective-C.
- (void)setCapturePermissionButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>toastBackgroundColor</code> in Objective-C.
- (void)setToastBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>toastTitleColor</code> in Objective-C.
- (void)setToastTitleWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>autoCaptureButtonCornerRadius</code> in Objective-C.
- (void)setAutoCaptureButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>detectionLineWidth</code> in Objective-C.
- (void)setDetectionLineWithWidth:(float)width;
/// Allows to set <code>captureCircleLineWidth</code> in Objective-C.
- (void)setCaptureCircleLineWithWidth:(float)width;
/// Allows to set <code>capturePreviewDoneButtonCornerRadius</code> in Objective-C.
- (void)setCapturePreviewDoneButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>capturePreviewDoneButtonHeight</code> in Objective-C.
- (void)setCapturePreviewDoneButtonWithHeight:(float)height;
/// Allows to set <code>capturePreviewDoneButtonWidth</code> in Objective-C.
- (void)setCapturePreviewDoneButtonWithWidth:(float)width;
/// Allows to set <code>cropCancelButtonCornerRadius</code> in Objective-C.
- (void)setCropCancelButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>cropDoneButtonCornerRadius</code> in Objective-C.
- (void)setCropDoneButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>cropDoneButtonHeight</code> in Objective-C.
- (void)setCropDoneButtonWithHeight:(float)height;
/// Allows to set <code>cropDoneButtonWidth</code> in Objective-C.
- (void)setCropDoneButtonWithWidth:(float)width;
/// Allows to set <code>cropCornerPointDiameter</code> in Objective-C.
- (void)setCropCornerPointWithDiameter:(float)diameter;
/// Allows to set <code>cropEdgeTouchThreshold</code> in Objective-C.
- (void)setCropEdgeWithTouchThreshold:(float)touchThreshold;
/// Allows to set <code>capturePermissionButtonCornerRadius</code> in Objective-C.
- (void)setCapturePermissionButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>capturePermissionButtonHeight</code> in Objective-C.
- (void)setCapturePermissionButtonWithHeight:(float)height;
/// Allows to set <code>capturePermissionButtonWidth</code> in Objective-C.
- (void)setCapturePermissionButtonWithWidth:(float)width;
/// Allows to set <code>toastCornerRadius</code> in Objective-C.
- (void)setToastWithCornerRadius:(float)cornerRadius;
@end


/// Contains all high level color configs for the Sensibill Capture.
SWIFT_CLASS_NAMED("DefaultTheme")
@interface SBLDefaultTheme : NSObject
/// Bundle for use by subclasses to acess custom assets.
@property (nonatomic, readonly, strong) NSBundle * _Nullable bundle;
/// Plist data for use by subclasses to decode their own custom values.
@property (nonatomic, readonly, copy) NSData * _Nullable plistData;
/// The color displayed most frequently across your app’s screens and components.
@property (nonatomic, strong) UIColor * _Nonnull primary;
/// The lighter or darker variant of the <code>primary</code> color.
@property (nonatomic, strong) UIColor * _Nonnull primaryVariant;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>primary</code> and <code>primaryVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onPrimary;
/// The accent color.
@property (nonatomic, strong) UIColor * _Nonnull secondary;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>secondary</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onSecondary;
/// The color that appears behind scrollable content.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>background</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onBackground;
/// Defines the color of surfaces of components, such as cards, sheets, and menus.
@property (nonatomic, strong) UIColor * _Nonnull surface;
/// The lighter or darker variant of the <code>surface</code> color.
@property (nonatomic, strong) UIColor * _Nonnull surfaceVariant;
/// The color of text, iconography, and strokes, shown on top of <code>surface</code> or <code>surfaceVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurface;
/// The color of emphasized text, iconography, and strokes, shown on top of <code>surface</code> or <code>surfaceVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurfaceFocus;
/// The color or error background
@property (nonatomic, strong) UIColor * _Nonnull error;
/// The color of text, iconography, and strokes, shown on top of <code>error</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onError;
/// Style of primary button corners. Value above 0 yields rounded corners. Default value: 24.
@property (nonatomic, readonly) float primaryButtonCornerRadius;
/// Height of the primary button. Default value: 48
@property (nonatomic, readonly) float primaryButtonHeight;
/// Width of the primary button. Default value: 138
@property (nonatomic, readonly) float primaryButtonWidth;
/// Style of secondary button corners. Value above 0 yields rounded corners. Default value: 24 (matches primary button rounding).
@property (nonatomic, readonly) float secondaryButtonCornerRadius;
/// Height of the secondary button. Default value: 48
@property (nonatomic, readonly) float secondaryButtonHeight;
/// Width of the secondary button. Default value: 138
@property (nonatomic, readonly) float secondaryButtonWidth;
/// Initialize the default theme from SensibillConfiguration.plist provided in a specified bundle
/// \param overrideBundle The bundle which contains your <code>xcassets</code> with custom colors. Defaults to <code>nil</code> which will use default colors.
///
- (nonnull instancetype)initWithOverrideBundle:(NSBundle * _Nullable)overrideBundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This theme contains all SensibillCapture values
SWIFT_CLASS_NAMED("CaptureTheme")
@interface SBLCaptureTheme : SBLDefaultTheme
/// The color applied to background of the UI views used throughout the module. Default value: <code>.black</code>
@property (nonatomic, strong) UIColor * _Nonnull captureBackgroundColor;
/// The text color of the buttons that contain an icon (crop, add page, and retake). Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull onCaptureBackgroundColor;
/// The color of the document detection rectangle edge which appears in auto-capture. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull detectionStrokeColor;
/// The color of the document detection rectangle fill area which appears in auto-capture. Default value: <code>primary</code> (Alpha = 0.25)
@property (nonatomic, strong) UIColor * _Nonnull detectionFillColor;
/// The stroke color of the processing circle edge which appears when a document is detected in auto-capture. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull captureCircleStrokeColor;
/// The fill color of the processing circle which appears when a document is detected in auto-capture. Default value: <code>.clear</code>
@property (nonatomic, strong) UIColor * _Nonnull captureCircleFillColor;
/// The background color of the number indicating how many captures the user has taken. Default value: <code>.red</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePageCountBackgroundColor;
/// The text color of the number indicating how many captures the user has taken. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePageCountTextColor;
/// The text color of the unselected capture type button (Normal/Long). Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull captureDocumentTypeButtonTextColor;
/// The text color of the auto-capture button when auto-capture is enabled. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull autoCaptureButtonTextColor;
/// The text color of the title on the Capture Preview screen. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewTitleColor;
/// The background color of the done button on the capture preview screen. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewDoneButtonBackgroundColor;
/// The text color of the done button on the capture preview screen. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewDoneButtonTextColor;
/// The color of the unselected circles of the page indicator on the capture preview screen (only appears if more than page exists). Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewPageControlTintColor;
/// The color of the selected circle of the page indicator on the capture preview screen (only appears if more than page exists). Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewCurrentPageControlColor;
/// The background color of the cancel button on the crop screen. Default value: <code>secondary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropCancelButtonBackgroundColor;
/// The text color of the cancel button on the crop screen. Default value: <code>onSecondary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropCancelButtonTextColor;
/// The background color of the done button on the crop screen. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropDoneButtonBackgroundColor;
/// The text color of the done button on the crop screen. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropDoneButtonTextColor;
/// The tint color of the UIActivityIndicatorView that appears while the crop screen is loading. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull cropLoaderColor;
/// The text color of the title that appears if a user denies system capture permissions. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionTitleColor;
/// The text color of the message that appears if a user denies system capture permissions. Default value: <code>.white</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionMessageColor;
/// The background color of the button that appears when the user denies system capture permissions. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionButtonBackgroundColor;
/// The text color of the button that appears when the user denies system capture permissions. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePermissionButtonTextColor;
/// The background color of the feedback toast that appears while capturing. Default value: <code>primary</code>
@property (nonatomic, strong) UIColor * _Nonnull toastBackgroundColor;
/// The title color of the feedback toast that appears while capturing. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull toastTitleColor;
/// The corner radius of the auto-capture toggle button. Default value: <code>0</code>
@property (nonatomic) float autoCaptureButtonCornerRadius;
/// The width of the border of the square that appears when auto capturing.  Default value: <code>4</code>
@property (nonatomic) float detectionLineWidth;
/// The width of the border of the circle that appears when an auto-capture is processing. Default value: <code>2</code>
@property (nonatomic) float captureCircleLineWidth;
/// The corner radius of the done button on the capture preview screen. Default value: <code>24</code>
@property (nonatomic) float capturePreviewDoneButtonCornerRadius;
/// The height of the done button on the capture preview screen. Default value: <code>48</code>
@property (nonatomic) float capturePreviewDoneButtonHeight;
/// The width of the done button on the capture preview screen. Default value: <code>138</code>
@property (nonatomic) float capturePreviewDoneButtonWidth;
/// The tint color of the UIActivityIndicatorView that appears while the preview screen processing images.. Default value: <code>onPrimary</code>
@property (nonatomic, strong) UIColor * _Nonnull capturePreviewLoaderColor;
/// The corner radius of the cancel button on the crop screen. Default value: <code>24</code>
@property (nonatomic) float cropCancelButtonCornerRadius;
/// The corner radius of the done button on the crop screen. Default value: <code>24</code>
@property (nonatomic) float cropDoneButtonCornerRadius;
/// The height of the cancel button on the crop screen. Default value: <code>48</code>
@property (nonatomic) float cropDoneButtonHeight;
/// The width of the cancel button on the crop screen. Default value: <code>138</code>
@property (nonatomic) float cropDoneButtonWidth;
/// The diameter of the corner points that are used to crop. Default value: <code>30</code>
@property (nonatomic) float cropCornerPointDiameter;
/// The distance away from a crop edge’s bar a user’s touch can be that will still grab the edge. Default value: <code>50</code>
@property (nonatomic) float cropEdgeTouchThreshold;
/// The corner radius of the capture permission button that appears when the user denies system capture permissions. Default value: <code>24</code>
@property (nonatomic) float capturePermissionButtonCornerRadius;
/// The height of the capture permission button that appears when the user denies system capture permissions. Default value: <code>48</code>
@property (nonatomic) float capturePermissionButtonHeight;
/// The width of the capture permission button that appears when the user denies system capture permissions. Default value: <code>138</code>
@property (nonatomic) float capturePermissionButtonWidth;
/// The corner radius of the feedback toast that appears while capturing. Default value: <code>24</code>
@property (nonatomic) float toastCornerRadius;
- (nonnull instancetype)initWithDefaults:(SBLDefaultTheme * _Nonnull)defaults OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOverrideBundle:(NSBundle * _Nullable)overrideBundle SWIFT_UNAVAILABLE;
@end










/// Defines styling attributes for elements of capture tips screen.
SWIFT_CLASS_NAMED("CaptureTipsStyle")
@interface SBLCaptureTipsStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLCaptureTipsStyle (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>viewBackgroundColor</code> in Objective-C.
- (void)setViewBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeIconButtonBackgroundColor</code> in Objective-C.
- (void)setCloseIconButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeIconButtonForegroundColor</code> in Objective-C.
- (void)setCloseIconButtonForegroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeButtonBackgroundColor</code> in Objective-C.
- (void)setCloseButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeButtonTextColor</code> in Objective-C.
- (void)setCloseButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>nextButtonBackgroundColor</code> in Objective-C.
- (void)setNextButtonBackgroundWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>nextButtonTextColor</code> in Objective-C.
- (void)setNextButtonTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>pageIndicatorTintColor</code> in Objective-C.
- (void)setPageIndicatorTintWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>currentPageIndicatorTintColor</code> in Objective-C.
- (void)setCurrentPageIndicatorTintWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipImageLinearGradientTopColor</code> in Objective-C.
- (void)setTipImageLinearGradientTopWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipImageLinearGradientBottomColor</code> in Objective-C.
- (void)setTipImageLinearGradientBottomWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipTitleLabelTextColor</code> in Objective-C.
- (void)setTipTitleLabelTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>tipDescriptionLabelTextColor</code> in Objective-C.
- (void)setTipDescriptionLabelTextWithColor:(UIColor * _Nonnull)color;
/// Allows to set <code>closeButtonWidth</code> in Objective-C.
- (void)setCloseButtonWithWidth:(float)width;
/// Allows to set <code>nextButtonWidth</code> in Objective-C.
- (void)setNextButtonWithWidth:(float)width;
/// Allows to set <code>closeButtonCornerRadius</code> in Objective-C.
- (void)setCloseButtonWithCornerRadius:(float)cornerRadius;
/// Allows to set <code>nextButtonCornerRadius</code> in Objective-C.
- (void)setNextButtonWithCornerRadius:(float)cornerRadius;
@end


@class CLLocation;
@class NSURL;

/// Contains all common information for a contact (customer, merchant location…) :nodoc:
SWIFT_CLASS_NAMED("ContactInformation")
@interface SBLContactInformation : NSObject
/// Physical address (array of strings – Undetermined length)
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull address;
/// Email of the contact
@property (nonatomic, copy) NSString * _Nullable email;
/// Name of the contact
@property (nonatomic, copy) NSString * _Nullable name;
/// Phone Number (String, unformatted)
@property (nonatomic, copy) NSString * _Nullable telephone;
/// GPS Location (see CoreLocation)
@property (nonatomic, strong) CLLocation * _Nullable geoLocation;
/// URL of the contact
@property (nonatomic, copy) NSURL * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Structure that holds all necessary credential information for a user
SWIFT_CLASS_NAMED("Credentials")
@interface SBLCredentials : NSObject <NSSecureCoding>
/// :nodoc: NSSecureCoding Protocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Currently used credentials
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLCredentials * _Nullable current;)
+ (SBLCredentials * _Nullable)current SWIFT_WARN_UNUSED_RESULT;
/// OAuth 2.0 or Access Token
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// OAuth 2.0 Refresh Token
@property (nonatomic, copy) NSString * _Nullable refreshToken;
/// Initialize Credentials with accessToken and refreshToken
/// \param accessToken Access token
///
/// \param refreshToken Refresh token is optional
///
- (nullable instancetype)initWithAccessToken:(NSString * _Nullable)accessToken refreshToken:(NSString * _Nullable)refreshToken OBJC_DESIGNATED_INITIALIZER;
/// :nodoc: Credentials conform to NSSecureCoding. Do not use.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
/// :nodoc: Credentials conform to NSSecureCoding. Do not use.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// :nodoc: Public method to enable use from ObjC. Do not use.
+ (void)registerWithNewCredentials:(SBLCredentials * _Nullable)newCredentials;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Customer :nodoc:
SWIFT_CLASS_NAMED("Customer")
@interface SBLCustomer : NSObject
/// Customer identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Contact information
@property (nonatomic, strong) SBLContactInformation * _Nullable contact;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

SWIFT_CLASS_NAMED("DatePeriod")
@interface SBLDatePeriod : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// The date from which the period is calculated
@property (nonatomic, copy) NSDate * _Nullable baseDate;
/// The duration of the period
@property (nonatomic) NSInteger duration;
/// A calcualted end of the period
@property (nonatomic, readonly, copy) NSDate * _Nullable calculatedDate;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end




enum SBLTimeUnit : NSInteger;
enum SBLTimeDirection : NSInteger;

@interface SBLDatePeriod (SWIFT_EXTENSION(Sensibill))
/// The unit of time used to calculate the period. For use with Objective-C only, use <code>unit</code> property in Swift
@property (nonatomic) enum SBLTimeUnit sblUnit;
/// A direction of the period (past or future). For use with Objective-C only, use <code>timeDirection</code> property in Swift
@property (nonatomic) enum SBLTimeDirection sblTimeDirection;
/// Initializes the object with dictionary values. For use with Objective-C. In Swift, use <code>init(withDictionary: [String: Any?])</code>
- (nonnull instancetype)initWithDictionary:(NSDictionary * _Nonnull)dict;
/// Same as <code>dictionary</code> property, compatible with Objective-C
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
/// Same as <code>requestDictionary</code> property, compatible with Objective-C
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblRequestDictionary;
@end



enum SBLDiscountType : NSInteger;

/// :nodoc:
SWIFT_CLASS_NAMED("Discount")
@interface SBLDiscount : NSObject
/// Amount
@property (nonatomic, strong) SBLAmount * _Nullable amount;
/// Description of discount
@property (nonatomic, copy) NSString * _Nullable summary;
/// Type of discount
@property (nonatomic) enum SBLDiscountType type;
/// Percent discounted from amount
@property (nonatomic) double percent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// :nodoc: Type of discount
typedef SWIFT_ENUM_NAMED(NSInteger, SBLDiscountType, "DiscountType", open) {
/// Unknown (default)
  SBLDiscountTypeUnknown = 0,
/// General
  SBLDiscountTypeGeneral = 1,
/// Coupon
  SBLDiscountTypeCoupon = 2,
};

@class SBLTrackingEvent;

/// A type that receives <code>Analytics</code> notifications.
SWIFT_PROTOCOL_NAMED("EventListener")
@protocol SBLEventListener
/// A notification when <code>TrackingEvent</code> is received
/// \param event the <code>TrackingEvent</code> object received
///
- (void)onSensibillEvent:(SBLTrackingEvent * _Nonnull)event;
@end

enum SBLFeeType : NSInteger;

/// :nodoc:
SWIFT_CLASS_NAMED("Fee")
@interface SBLFee : NSObject
/// Amount
@property (nonatomic, strong) SBLAmount * _Nullable amount;
/// Description of fee
@property (nonatomic, copy) NSString * _Nullable summary;
/// Type of fee
@property (nonatomic) enum SBLFeeType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// :nodoc: Type of fee
typedef SWIFT_ENUM_NAMED(NSInteger, SBLFeeType, "FeeType", open) {
/// Unknown (default)
  SBLFeeTypeUnknown = 0,
/// Donation
  SBLFeeTypeDonation = 1,
/// Duties
  SBLFeeTypeDuties = 2,
/// General
  SBLFeeTypeGeneral = 3,
/// Shipping
  SBLFeeTypeShipping = 4,
};

@class SBReceipt;

/// :nodoc:
SWIFT_CLASS_NAMED("Folder")
@interface SBLFolder : NSObject <NSCopying>
/// Unique Identifier on the API
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Name of the folder
@property (nonatomic, copy) NSString * _Nullable name;
/// Color of the folder
@property (nonatomic, strong) UIColor * _Nullable color;
/// The last time the folder was updated
@property (nonatomic, copy) NSDate * _Nullable updatedAt;
/// The date that the folder was created
@property (nonatomic, copy) NSDate * _Nullable createdAt;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The number of Receipts associated with the folder, optionally filtered by currency code
/// \param currencyCode The currency Code to filter by
///
- (NSInteger)numberOfReceiptsWithCurrencyCode:(NSString * _Nullable)currencyCode SWIFT_WARN_UNUSED_RESULT;
/// The sum of all the Amounts (grouped by currency) for all receipts associated with the folder
@property (nonatomic, readonly, copy) NSArray<SBLAmount *> * _Nonnull totalAmounts;
- (void)addReceipt:(SBReceipt * _Nonnull)receipt;
- (void)removeReceipt:(SBReceipt * _Nonnull)receipt;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)deleteWithContent:(BOOL)content completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Use the shared property of this class to find and create Folders.
/// :nodoc:
SWIFT_CLASS_NAMED("FolderCollection")
@interface SBLFolderCollection : NSObject
/// Singleton object of FolderCollection
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLFolderCollection * _Nonnull shared;)
+ (SBLFolderCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Find all Folders for the current user
/// \param completion block executed when the request is complete.
///
- (void)findWithCompletion:(void (^ _Nonnull)(NSArray<SBLFolder *> * _Nonnull, NSError * _Nullable))completion;
/// Find a Folder for a given unique identifier
/// \param identifier Unique Folder Identifier
///
/// \param completion block executed when the request is complete.
///
- (void)findWithIdentifier:(NSString * _Nonnull)identifier completion:(void (^ _Nonnull)(SBLFolder * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIFont;

/// Defines the set of fonts used in SDK.
SWIFT_CLASS_NAMED("FontSet")
@interface SBLFontSet : NSObject
/// The font for regular text styles, e.g.:  <code>body</code>, <code>subhead</code>, <code>footnote</code>, <code>title</code>, and <code>titleThree</code>
@property (nonatomic, strong) UIFont * _Nonnull regular;
/// The font for the lightly emphasized text styles, e.g.: <code>headline</code>, <code>callout</code>, and <code>captionOne</code>
@property (nonatomic, strong) UIFont * _Nonnull semibold;
/// The font for the emphasized text styles, e.g.: <code>largeTitle</code>, <code>titleTwo</code>, and <code>captionTwo</code>
@property (nonatomic, strong) UIFont * _Nonnull bold;
/// Initializes the instance with provided regular, semibold and bold fonts.
/// \param regular UIFont to be used for the <code>regular</code> property
///
/// \param semibold UIFont to be used for the <code>semibold</code> property
///
/// \param bold UIFont to be used for the <code>bold</code> property
///
- (nonnull instancetype)initWithRegular:(UIFont * _Nonnull)regular semibold:(UIFont * _Nonnull)semibold bold:(UIFont * _Nonnull)bold OBJC_DESIGNATED_INITIALIZER;
/// Initializes the instance with provided regular, and bold fonts.
/// \param regular UIFont to be used for the <code>regular</code> property
///
/// \param bold UIFont to be used for the <code>semibold</code> and <code>bold</code> properties
///
- (nonnull instancetype)initWithRegular:(UIFont * _Nonnull)regular bold:(UIFont * _Nonnull)bold;
/// Initializes the instance of FontSet with default regular, semibold and bold fonts (<code>systemFont</code>, 14pt)
- (nonnull instancetype)init;
@end


@interface SBLFontSet (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, strong) UIFont * _Nonnull title2Bold;
@property (nonatomic, readonly, strong) UIFont * _Nonnull title3;
@property (nonatomic, readonly, strong) UIFont * _Nonnull callout;
@property (nonatomic, readonly, strong) UIFont * _Nonnull subhead;
@property (nonatomic, readonly, strong) UIFont * _Nonnull headline;
- (UIFont * _Nonnull)title2BoldWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)title3WithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)calloutWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)subheadWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)headlineWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("HTTPStatusCode")
@interface SBLHTTPStatusCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger unauthorized;)
+ (NSInteger)unauthorized SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Describes properties of an item :nodoc:
SWIFT_CLASS_NAMED("ItemProperty")
@interface SBLItemProperty : NSObject
/// Item property name
@property (nonatomic, copy) NSString * _Nullable name;
/// Item property value
@property (nonatomic, copy) NSString * _Nullable value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Use the LocaleCollection shared instance to query the supported user locales :nodoc:
SWIFT_CLASS_NAMED("LocaleCollection")
@interface SBLLocaleCollection : NSObject
/// LocaleCollection singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLLocaleCollection * _Nonnull shared;)
+ (SBLLocaleCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// :nodoc:
SWIFT_CLASS_NAMED("Logger")
@interface SBLLogger : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLLogger * _Nonnull shared;)
+ (SBLLogger * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Error codes that can be occur when matching transactions to receipts
typedef SWIFT_ENUM_NAMED(NSInteger, SBLMatchingError, "MatchingError", open) {
/// Matched successfully
  SBLMatchingErrorSuccess = 0,
/// Network error occurred
  SBLMatchingErrorNetworkError = 1,
/// Could not match for an unknown reason
  SBLMatchingErrorUnknownError = 2,
};
static NSString * _Nonnull const SBLMatchingErrorDomain = @"Sensibill.MatchingError";

enum SBLMerchantChannel : NSInteger;

/// Object representation of the merchant :nodoc:
SWIFT_CLASS_NAMED("Merchant")
@interface SBLMerchant : NSObject
/// Merchant identifier
@property (nonatomic, copy) NSString * _Nullable id;
/// Type of channel (physical store, online store)
@property (nonatomic) enum SBLMerchantChannel channel;
/// Category of the merchant (Groceries, Gas, Apparel…)
@property (nonatomic, copy) NSString * _Nullable categoryCode;
/// Contact information
@property (nonatomic, strong) SBLContactInformation * _Nullable contact;
/// Store identifier
@property (nonatomic, copy) NSString * _Nullable storeId;
/// Tax number
@property (nonatomic, copy) NSString * _Nullable taxNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Type of Merchant distribution channel :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLMerchantChannel, "MerchantChannel", open) {
/// Unknown (default)
  SBLMerchantChannelUnknown = 0,
/// Physical store
  SBLMerchantChannelPhysical = 1,
/// Online store
  SBLMerchantChannelOnline = 2,
};


@interface NSData (SWIFT_EXTENSION(Sensibill))
/// Returns the image metadata. For use with Objective-C only. Use <code>Data</code>’s property with the same name in Swift.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable metadata;
/// Returns the GPS coordinates from an image’s exif data. For use with Objective-C only. Use <code>Data</code>’s function with the same name in Swift.
- (CLLocation * _Nullable)getLocation SWIFT_WARN_UNUSED_RESULT;
@end




@interface NSLocale (SWIFT_EXTENSION(Sensibill))
/// :nodoc: To return an identifier in a format the API understands
@property (nonatomic, readonly, copy) NSString * _Nonnull remoteIdentifier;
@end


@interface NSString (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly) BOOL isEmail;
@end

enum SBLNetworkReachabilityStatus : NSInteger;

/// The <code>NetworkReachabilityService</code> class allows to determine the status of a system’s current network configuration,
/// and lstens for status changes. It should not be used to prevent a user from initiating a network request, as it’s possible
/// that an initial request may be required to establish reachability.
/// Recommended usage pattern:
/// <ol>
///   <li>
///     Subscribe to <code>reachabilityDidChangeNotification</code> early in lifecycle of a class. For example in <code>init</code> or <code>formDidLoad</code>.
///   </li>
///   <li>
///     Right after subscription, check current value of either <code>status</code> or <code>isReachable</code> to establish initial state.
///     No new notification will be sent until status change, hence it’s important to verify the state after subscription.
///   </li>
///   <li>
///     Notification does not send out new status. Instead, once notification is received, subscriber code should check new status
///     using either <code>status</code> or <code>isReachable</code>.
///     This prevents a possibility that stale status passed to subscriber (in case it changes several time within short period of time)
///   </li>
/// </ol>
SWIFT_CLASS_NAMED("NetworkReachabilityService")
@interface SBLNetworkReachabilityService : NSObject
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLNetworkReachabilityService * _Nonnull instance;)
+ (SBLNetworkReachabilityService * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Name of notification to be issued if reachability status changed
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull reachabilityDidChangeNotification;)
+ (NSNotificationName _Nonnull)reachabilityDidChangeNotification SWIFT_WARN_UNUSED_RESULT;
/// Returns true if service was started and is currently running
@property (nonatomic, readonly) BOOL isRunning;
/// Returns current reachability status. See <code>NetworkReachabilityStatus</code>.
@property (nonatomic, readonly) enum SBLNetworkReachabilityStatus status;
/// Returns true if currently host is reachable. Shortcut for <code>isReachable</code> function of the status
@property (nonatomic, readonly) BOOL isReachable;
/// Provides an ability to enforce positive reachable status
/// When set to <code>true</code>, <code>isReachable</code> will always return <code>true</code>
/// This can be used to validate error handling, or to return mocked responses while offline (e.g. for demo).
@property (nonatomic) BOOL isAlwaysReachable;
/// Initialize instance with SCNetworkReachability object
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Restart service for a different host
- (void)restartWithHost:(NSString * _Nullable)host;
@end


@interface SBLNetworkReachabilityService (SWIFT_EXTENSION(Sensibill))
+ (void)isAPIReachableWithCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
@end

/// Defines connectivity states
typedef SWIFT_ENUM_NAMED(NSInteger, SBLNetworkReachabilityStatus, "NetworkReachabilityStatus", open) {
  SBLNetworkReachabilityStatusUnknown = -1,
  SBLNetworkReachabilityStatusNotReachable = 0,
  SBLNetworkReachabilityStatusReachable = 1,
};


SWIFT_CLASS_NAMED("NetworkRetryCounter")
@interface SBLNetworkRetryCounter : NSObject
- (void)resetFailureCount;
- (NSInteger)addAndGetFailures:(NSInteger)addedValue;
- (NSInteger)addFailure;
- (NSInteger)addRetry;
- (BOOL)shouldRetry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum SBLOriginalFormat : NSInteger;

/// Original receipt document :nodoc:
SWIFT_CLASS_NAMED("Original")
@interface SBLOriginal : NSObject
/// Format of the receipt document (html, image, pdf…)
@property (nonatomic) enum SBLOriginalFormat format;
/// Url of the receipt document
@property (nonatomic, copy) NSURL * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Original format of the receipt :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLOriginalFormat, "OriginalFormat", open) {
/// Unknown
  SBLOriginalFormatUnknown = 0,
/// Image (photo of a paper receipt)
  SBLOriginalFormatImage = 1,
/// HTML (email receipt)
  SBLOriginalFormatHtml = 2,
/// PDF (attachment of an email receipt)
  SBLOriginalFormatPdf = 3,
/// Text (email receipt)
  SBLOriginalFormatText = 4,
};

@protocol SBLTokenProvider;

/// Handles all authentication flows for the Password Authenticated users
SWIFT_CLASS_NAMED("PasswordAuthenticator")
@interface SBLPasswordAuthenticator : NSObject
/// Required to fix an Xcode 11.4 bug. :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
+ (id <SBLTokenProvider> _Nonnull)getDefaultTokenProvider SWIFT_WARN_UNUSED_RESULT;
@end

enum SensibillError : NSInteger;

@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Resets the users password given a temporary password
/// \param accessId String representing the accessId of a user
///
/// \param temporaryPassword String representing the temporary password
///
/// \param newPassword String representing the new password
///
/// \param completion completion block executed when request is complete
///
- (void)resetPasswordWithAccessId:(NSString * _Nonnull)accessId temporaryPassword:(NSString * _Nonnull)temporaryPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(enum SensibillError))completion;
@end




@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Change password
/// \param currentPassword the current password
///
/// \param newPassword the new selected password. Must comply with password requirements.
///
/// \param completion completion block executed when request is complete
///
- (void)changePasswordWithCurrentPassword:(NSString * _Nonnull)currentPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(enum SensibillError))completion;
@end

@class SBLPasswordEvaluation;

@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Verifies the strength of a given password
/// \param password password that needs to be checked
///
/// \param checkType optional type of password
///
/// \param completion completion block executed when request is complete. Passes an optional PasswordEvaluation and error as parameters. PasswordEvaluation holds an acceptable Bool, and a PasswordStrength enum that represent the evaluated password.
///
- (void)checkStrengthWithPassword:(NSString * _Nonnull)password checkType:(NSString * _Nullable)checkType completion:(void (^ _Nonnull)(SBLPasswordEvaluation * _Nullable, enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Verifies if a given receipt email already exists
/// \param receiptEmail receipt email that needs to be checked
///
/// \param completion completion block executed when request is complete. Passes boolean representing if the receipt email already exists, and an error enum as parameter.
///
- (void)checkExistenceWithReceiptEmail:(NSString * _Nonnull)receiptEmail completion:(void (^ _Nonnull)(BOOL, enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Verifies if a given access id already exists
/// \param accessId access id that needs to be checked
///
/// \param completion completion block executed when request is complete. Passes boolean representing if the access id already exists, and an error enum as parameter.
///
- (void)checkExistenceWithAccessId:(NSString * _Nonnull)accessId completion:(void (^ _Nonnull)(BOOL, enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Creates a new user
/// \param accessId access id for the new user
///
/// \param password password for the new user
///
/// \param firstName (optional) first name for the new user
///
/// \param lastName (optional) last name for the new user
///
/// \param email (optional) email for the new user
///
/// \param receiptEmail (optional) receipt email for the new user, where email receipts should be forwarded
///
/// \param completion completion block executed when request is complete. Passes an error enum as parameter.
///
- (void)registerWithAccessId:(NSString * _Nonnull)accessId password:(NSString * _Nonnull)password firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email receiptEmail:(NSString * _Nullable)receiptEmail completion:(void (^ _Nonnull)(enum SensibillError))completion;
@end


@interface SBLPasswordAuthenticator (SWIFT_EXTENSION(Sensibill))
/// Tries to authenticate a user with an access id and password
/// \param accessId (optional) access identifier of the user attempting authentication. If access identifier is nil and password is nil, will attempt to login with last authenticated user.
///
/// \param password (optional) password of the user attempting authentication. If password is passed as nil, will attempt to automatically login user from the cache.
///
/// \param completion completion block executed when logging in is complete. Passes an error enum as parameter.
///
- (void)loginWithAccessId:(NSString * _Nullable)accessId password:(NSString * _Nullable)password completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Logs user out and stops SDK
/// \param completion completion block executed when logging in is complete. Passes an error enum as parameter.
///
- (void)logoutWithCompletion:(void (^ _Nonnull)(enum SensibillError))completion;
@end

enum SBLPasswordStrength : NSInteger;

/// Structure that represents the evaluated password strength, as determined by the backend :nodoc:
SWIFT_CLASS_NAMED("PasswordEvaluation")
@interface SBLPasswordEvaluation : NSObject
/// Strength of password
@property (nonatomic, readonly) enum SBLPasswordStrength strength;
/// Whether password is within acceptable strength threshold
@property (nonatomic, readonly) BOOL acceptable;
/// Raw float value of password
@property (nonatomic, readonly) float value;
/// :nodoc:
@property (nonatomic, readonly) float minStrength;
/// :nodoc:
@property (nonatomic, readonly) float maxStrength;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Strength of password :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLPasswordStrength, "PasswordStrength", open) {
/// Very Weak
  SBLPasswordStrengthVeryWeak = 0,
/// Weak
  SBLPasswordStrengthWeak = 1,
/// Medium
  SBLPasswordStrengthMedium = 2,
/// Strong
  SBLPasswordStrengthStrong = 3,
/// Very Strong
  SBLPasswordStrengthVeryStrong = 4,
};


/// :nodoc:  An Objective-C-friendly wrapper for pending unaauthorized requests
SWIFT_CLASS_NAMED("PendingUnauthorizedTasks")
@interface SBLPendingUnauthorizedTasks : NSObject
- (void)add:(SBLAPIRequest * _Nonnull)request;
/// Performs a specified action for all pending unauthorized tasks; also removes a task from the list
- (void)performForAll:(void (^ _Nonnull)(SBLAPIRequest * _Nonnull))executionBlock;
/// Sends an error to all pending tasks
- (void)sendErrorToAll:(NSError * _Nonnull)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Allows to specify integration-specific receipt properties, including external account transaction id
SWIFT_CLASS_NAMED("PrivateMetaData")
@interface SBLPrivateMetaData : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// A banking account transaction ID, associated with the receipt.
@property (nonatomic, copy) NSString * _Nullable accountTransactionID;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc: Initialize by retrieving properties from the provided dictionary
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end




@interface SBLPrivateMetaData (SWIFT_EXTENSION(Sensibill))
/// For Objective-C only, use <code>dictionary</code> in Swift. Converts <code>PrivateMetaData</code> to dictionary. The names of the fields correspond the Sensibill API specifications
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
@end


@interface SBLPrivateMetaData (SWIFT_EXTENSION(Sensibill))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Responsible for providing convenience to present new capture flow for provided <code>SBLTransaction</code> or <code>ReceiptExpenseType</code>.
SWIFT_CLASS_NAMED("ReceiptCaptureManager")
@interface SBLReceiptCaptureManager : NSObject
/// Singleton Instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLReceiptCaptureManager * _Nonnull shared;)
+ (SBLReceiptCaptureManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLReceiptCaptureManager (SWIFT_EXTENSION(Sensibill))
/// Present the new receipt capture flow on provided view controller to associate with given receipt expense type.
- (void)presentCaptureWithHost:(UIViewController * _Nonnull)viewController expenseType:(enum SBLReceiptExpenseType)expenseType;
/// Present the new receipt capture flow on provided view controller for given receipt upload transaction object and provided <code>ReceiptExpenseType</code>.
/// Provided transactions’s expense type would be updated to given transaction if expense type is not <code>unknown</code>.
- (void)presentCaptureWithHost:(UIViewController * _Nonnull)viewController transaction:(SBLTransaction * _Nonnull)transaction expenseType:(enum SBLReceiptExpenseType)expenseType;
@end


@interface SBLReceiptCaptureManager (SWIFT_EXTENSION(Sensibill)) <SBLCaptureFlowCoordinatorDelegate>
/// :nodoc:
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transactions:(NSArray<SBLTransaction *> * _Nonnull)transactions;
/// :nodoc:
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReceiptCategory")
@interface SBLReceiptCategory : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
+ (NSSet<SBLReceiptCategory *> * _Nonnull)allCategories SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class SBLReceiptSearchFilter;
@class SBLReceiptSummary;

/// Use the ReceiptCollection shared instance to query our Receipts database
SWIFT_CLASS_NAMED("ReceiptCollection")
@interface SBLReceiptCollection : NSObject
/// ReceiptCollection singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLReceiptCollection * _Nonnull shared;)
+ (SBLReceiptCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)findWithFilter:(SBLReceiptSearchFilter * _Nullable)filter completion:(void (^ _Nonnull)(NSArray<SBLReceiptSummary *> * _Nonnull, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Type of expenses
typedef SWIFT_ENUM_NAMED(NSInteger, SBLReceiptExpenseType, "ReceiptExpenseType", open) {
/// Unknown (default)
  SBLReceiptExpenseTypeUnknown = 0,
/// Business Expense
  SBLReceiptExpenseTypeBusiness = 1,
/// Personal Expense
  SBLReceiptExpenseTypePersonal = 2,
};

@class SBSearchFilter;

/// Use a SearchFilter instance to query a specific set of receipts
SWIFT_CLASS_NAMED("ReceiptSearchFilter")
@interface SBLReceiptSearchFilter : NSObject
/// List of currency ISO codes to filter by
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull currencyCodes;
/// List of categories to filter by
@property (nonatomic, copy) NSSet<SBLReceiptCategory *> * _Nonnull categories;
/// If set, only receipts from transactions after that date will be returned
@property (nonatomic, copy) NSDate * _Nullable from;
/// If set, only receipts from transactions before that date will be returned
@property (nonatomic, copy) NSDate * _Nullable to;
/// List of expense types to filter by (business, personal)
@property (nonatomic) ExpenseTypeFilter expenseTypes;
/// If set to true, only receipts pending validation will be returned (Defaults to false)
@property (nonatomic) BOOL pendingValidation;
/// If set, only receipts that belong to that folder will be returned
@property (nonatomic, strong) SBLFolder * _Nullable folder;
/// If set, only receipts that do not belong to that folder will be returned
@property (nonatomic, strong) SBLFolder * _Nullable excludingFolder;
/// :nodoc:
- (nonnull instancetype)initWithSearchFilter:(SBSearchFilter * _Nonnull)searchFilter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Status of the receipt :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLReceiptStatus, "ReceiptStatus", open) {
/// Unknown status
  SBLReceiptStatusUnknown = 0,
/// Receipt is active
  SBLReceiptStatusActive = 1,
/// Receipt is pending validation (some required fields are missing)
  SBLReceiptStatusPendingValidation = 2,
/// Receipt has been marked as deleted
  SBLReceiptStatusDeleted = 3,
/// Receipt data belongs to a previous version of this receipt
  SBLReceiptStatusArchived = 4,
};

enum SBLReceiptType : NSInteger;

/// Class representing a summary information about a receipt :nodoc:
SWIFT_CLASS_NAMED("ReceiptSummary")
@interface SBLReceiptSummary : NSObject
/// ISO Country Code
@property (nonatomic, copy) NSString * _Nullable countryCode;
/// Currency Code
@property (nonatomic, copy) NSString * _Nullable currencyCode;
/// Date when the receipt was imported/captured
@property (nonatomic, copy) NSDate * _Nullable arrivedAt;
/// Date of the purchase (visible on the receipt) is a computed property which combines purchaseDateString with
/// purchaseTimeString into a Date object for the local time zone
@property (nonatomic, copy) NSDate * _Nullable purchasedAt;
/// Date on which the purchase was made. This is only the date component of the local time at which the purchase
/// was made, with no explicit timezone information.
@property (nonatomic, copy) NSString * _Nullable purchaseDateString;
/// The time at which the purchase was made. This is only the time component of the local time at which the purchase
/// was made, with no explicit timezone information.
@property (nonatomic, copy) NSString * _Nullable purchaseTimeString;
/// Type of receipt
@property (nonatomic) enum SBLReceiptType type;
/// Status of the receipt
@property (nonatomic) enum SBLReceiptStatus status;
/// Unique identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Receipt merchant
@property (nonatomic, strong) SBLMerchant * _Nullable merchant;
/// Total amounts
@property (nonatomic, strong) SBLAmount * _Nullable total;
/// Folders
@property (nonatomic, copy) NSArray<SBLFolder *> * _Nonnull folders;
/// Type of expense
@property (nonatomic) enum SBLReceiptExpenseType expenseType;
/// Notes
@property (nonatomic, copy) NSString * _Nullable notes;
/// Bank Transaction linked to this receipt
@property (nonatomic, copy) NSString * _Nullable transactionIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Type of receipt :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLReceiptType, "ReceiptType", open) {
/// Unknown
  SBLReceiptTypeUnknown = 0,
/// Itemized (Receipt showing line items)
  SBLReceiptTypeItemized = 1,
/// Payment (Receipt provided after a card payment)
  SBLReceiptTypePayment = 2,
};

enum SBLRequestAuthenticationType : NSInteger;
@class NSURLSessionConfiguration;

/// Create an instance of Request to communicate with the Sensibill Web API
SWIFT_CLASS_NAMED("Request")
@interface SBLRequest : NSObject
/// Designated initializer to create a Request
/// \param authenticationType provide a RequestAuthenticationType option. Defaults to .token
///
/// \param method provide an HTTP method. Defaults to “GET”
///
/// \param endPoint provide a valid API endpoint. (e.g “/api/v1/users”)
///
/// \param parameters optional Dictionary of HTTP parameters that will be serialized
///
/// \param data optional data (used for upload)
///
- (nonnull instancetype)initWithAuthenticationType:(enum SBLRequestAuthenticationType)authenticationType method:(NSString * _Nonnull)method endPoint:(NSString * _Nonnull)endPoint parameters:(NSDictionary<NSString *, id> * _Nullable)parameters data:(NSData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
/// Designated initializer to create a Request
/// \param sessionConfig provide an URLSessionConfiguration option
///
/// \param method provide an HTTP method. Defaults to “GET”
///
/// \param endPoint provide a valid API endpoint. (e.g “/api/v1/users”)
///
/// \param parameters optional Dictionary of HTTP parameters that will be serialized
///
/// \param data optional data (used for upload)
///
- (nonnull instancetype)initWithSessionConfig:(NSURLSessionConfiguration * _Nonnull)sessionConfig method:(NSString * _Nonnull)method endPoint:(NSString * _Nonnull)endPoint parameters:(NSDictionary<NSString *, id> * _Nullable)parameters data:(NSData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
/// Add a key/value pair to the parameters. Use only before calling the start method.
/// \param key String representing the key
///
/// \param value Value matching the key
///
- (void)addParameterWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value;
/// Execute the HTTP requests
/// \param completion Block executed when the request is complete. Passes optional dictionaries and errors.
///
- (void)startWithCompletion:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable, NSInteger))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Types of authentication for API requests
typedef SWIFT_ENUM_NAMED(NSInteger, SBLRequestAuthenticationType, "RequestAuthenticationType", open) {
/// Authenticated using a Bearer Token
  SBLRequestAuthenticationTypeToken = 0,
/// Authenticated using a Client Token
  SBLRequestAuthenticationTypeClient = 1,
/// Authenticated using Basic Auth
  SBLRequestAuthenticationTypeBasic = 2,
};


/// :nodoc: Represents the loyalty rewards earned for a receipt
SWIFT_CLASS_NAMED("Reward")
@interface SBLReward : NSObject
/// Account Number
@property (nonatomic, copy) NSString * _Nullable accountNumber;
/// Program Name
@property (nonatomic, copy) NSString * _Nullable programName;
/// Points Awarded
@property (nonatomic) double pointsAwarded;
/// Current Point Balanced
@property (nonatomic) double currentBalance;
/// Next Reward Level
@property (nonatomic) double nextRewardLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBCategory (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@end

/// Represents supported Sensibill UI navigation intents. Use for Objective-C only. With Swift, use <code>NavigationIntent</code>
typedef SWIFT_ENUM_NAMED(NSInteger, SBLNavigationIntent, "SBLNavigationIntent", open) {
/// The homepage dashboard.
  SBLNavigationIntentDashboard = 0,
/// Displays a list of all receipts.
  SBLNavigationIntentReceiptList = 1,
/// Displays details of the receipt with the provided ID. A valid receipt ID must be provided together with this option.
  SBLNavigationIntentReceiptDetails = 2,
/// Displays a list of user-created folders.
  SBLNavigationIntentFolderList = 3,
/// Displays an individual folder with the provided ID. A valid folder ID must provided with this option.
  SBLNavigationIntentFolderDetails = 4,
/// Displays a list of exports the user had requested.
  SBLNavigationIntentExportList = 5,
/// Displays a Tips page
  SBLNavigationIntentTips = 6,
/// Displays an Achievements page.
  SBLNavigationIntentAchievements = 7,
/// Displays a page, which allows to monitor the progress of receipt uploading, and allows to edit some of the receipt metadata.
/// As a parameter, provide the array of <code>Transaction.localId</code> properties the Sensibill UI should monitor.
  SBLNavigationIntentMetadataEdit = 8,
};

/// Defines a date period direction, returned by API. For Objective-C only. Use <code>TimeDirection</code> with Swift.
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTimeDirection, "SBLTimeDirection", open) {
/// Future. Corresponds the <code>TimeDirection.future</code>
  SBLTimeDirectionFuture = 0,
/// Past. Corresponds the <code>TimeDirection.past</code>
  SBLTimeDirectionPast = 1,
};

/// Defines a date period time units, returned by API. For Objective-C only. Use <code>TimeUnit</code> with Swift.
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTimeUnit, "SBLTimeUnit", open) {
/// Undefined
  SBLTimeUnitNotSet = 0,
/// Day. Corresponds the <code>TimeUnit.day</code>
  SBLTimeUnitDay = 1,
/// Month. Corresponds the <code>TimeUnit.month</code>
  SBLTimeUnitMonth = 2,
/// Week. Corresponds the <code>TimeUnit.week</code>
  SBLTimeUnitWeek = 3,
/// Year. Corresponds the <code>TimeUnit.year</code>
  SBLTimeUnitYear = 4,
};

enum SBLTransactionType : NSInteger;
@class SBLUserSubmittedData;
@class SBLSharedMetaData;
enum SBLTransactionStatus : NSInteger;
enum SBLTransactionError : NSInteger;
@protocol SBLTransactionObserver;
@class SBNonReceiptEmail;

/// Provides a data model for an ongoing receipt uploading operation. In Swift, use <code>Transaction</code> typealias.
SWIFT_CLASS("_TtC9Sensibill14SBLTransaction")
@interface SBLTransaction : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Identifies transaction uniquely on device. Local transaction identifier is generated when instance is created, and does not change.
@property (nonatomic, readonly, copy) NSString * _Nonnull localID;
/// Identifier of user tied to receipt upload transaction
@property (nonatomic, readonly, copy) NSString * _Nullable userID;
/// Identifier of transaction on the server. When <code>remoteID</code> is received, status of transaction is set to <code>processing</code>
@property (nonatomic, copy) NSString * _Nullable remoteID;
/// Receipt Transaction(Upload) Date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Transaction processing time estimated by the server (<code>fast</code>, <code>medium</code>, or <code>slow</code>)
@property (nonatomic, copy) NSString * _Nullable expectedProcessingTime;
/// if expectedProcessingTime exists and value is “medium” or “slow” then returns true otherwise false. :nodoc: Internal use
@property (nonatomic, readonly) BOOL isSlowProcessing;
/// Transaction type
@property (nonatomic) enum SBLTransactionType type;
/// Identifier of receipt tied to transaction. Only present when transaction is completed (<code>status</code> is set to <code>.completed</code>)
@property (nonatomic, copy) NSString * _Nullable receiptID;
/// Source email address of an email that is being converted to a receipt. If this property is set, the <code>type</code> is set to <code>.email</code>
@property (nonatomic, copy) NSString * _Nullable emailID;
/// Image of receipt to upload. Must be 5 MB or less.
@property (nonatomic, copy) NSData * _Nullable imageData;
/// Receipt date, category, merchant name, and currency code
@property (nonatomic, strong) SBLUserSubmittedData * _Nullable userSubmittedData;
/// Receipt folders, expense type, and note
@property (nonatomic, strong) SBLSharedMetaData * _Nullable sharedMetaData;
/// Receipt’s external account transaction id
@property (nonatomic, strong) SBLPrivateMetaData * _Nullable privateMetaData;
/// Returns <code>true</code> if <code>privateMetaData.accountTransactionID</code> is present :nodoc: Internal use
@property (nonatomic, readonly) BOOL hasExternalAccountTransaction;
/// Transaction status
@property (nonatomic) enum SBLTransactionStatus status;
/// Set to a failure reason when transaction status is <code>failed</code>, or to <code>noError</code> otherwise
@property (nonatomic) enum SBLTransactionError error;
/// Indicates that provided image failed on server, and must be replaced (retrying the same image is not recommended)
@property (nonatomic, readonly) BOOL mustReplaceImage;
/// Transaction Observer to monitor transaction progress
@property (nonatomic, weak) id <SBLTransactionObserver> _Nullable observer;
/// Initializes transaction with receipt image. Sets <code>type</code> to <code>.image</code>.
- (nonnull instancetype)initWithImageData:(NSData * _Nonnull)imageData;
/// Initializes transaction with <code>externalAccountTransactionID</code> to be used for bank transaction linking. Sets <code>type</code> to <code>.image</code>.
- (nonnull instancetype)initWithExternalAccountTransactionID:(NSString * _Nonnull)externalAccountTransactionID;
/// Init with email ID :nodoc: Internal use
- (nonnull instancetype)initWithEmailID:(NSString * _Nonnull)emailID;
/// Init with SBNonReceiptEmail. Used for conversion to receipt
- (nonnull instancetype)initForNonReceiptEmail:(SBNonReceiptEmail * _Nonnull)email;
/// Init with receipt data :nodoc: Internal use
- (nonnull instancetype)initWithReceiptId:(NSString * _Nonnull)receiptId userSubmittedData:(SBLUserSubmittedData * _Nullable)userSubmittedData sharedMetaData:(SBLSharedMetaData * _Nullable)sharedMetaData privateMetaData:(SBLPrivateMetaData * _Nullable)privateMetaData;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Disallow default init method to force creation with image or email :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SBReceipt (SWIFT_EXTENSION(Sensibill))
+ (NSArray<SBReceipt *> * _Nonnull)getReceiptsModelsFromResponse:(NSArray<NSDictionary *> * _Nonnull)responses SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBReceipt (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, copy) NSString * _Nonnull displayAmount;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayMerchant;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayDate;
/// Returns the right “subtotal” string resource for the designated country code.
@property (nonatomic, readonly, copy) NSString * _Nonnull displaySubtotal;
/// Returns the default tax type string resources for the designated country code.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayDefaultTaxType;
/// Whether or not the receipt should display a single tax by default.
@property (nonatomic, readonly) BOOL shouldDisplaySingleTax;
/// Whether or not the receipt is using net total.
@property (nonatomic, readonly) BOOL isNetTotalType;
/// Objective-C utility to get the expense type code :nodoc:
/// when no longer needed by Objective-C please remove this utility.
+ (NSString * _Nullable)getExpenseTypeDisplayFor:(enum SBLReceiptExpenseType)expenseType SWIFT_WARN_UNUSED_RESULT;
@end

@class SBLColorPalette;
@class SBLCaptureSettings;

SWIFT_CLASS_NAMED("SDKConfiguration")
@interface SBLSDKConfiguration : NSObject
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLSDKConfiguration * _Nonnull shared;)
+ (SBLSDKConfiguration * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Allows to enable or disable certificate pinning. Default: YES/True
@property (nonatomic) BOOL certificatePinningEnabled;
/// Allows to provide a custom Bundle to override assets (strings and images)
@property (nonatomic, strong) NSBundle * _Nullable externalBundle;
/// Defines the fonts used in Sensibill SDK
@property (nonatomic, strong) SBLFontSet * _Nonnull fonts;
/// Defines the colors used in Sensibill SDK
@property (nonatomic, strong) SBLColorPalette * _Nonnull colors;
/// Defines Capture configuration
@property (nonatomic, strong) SBLCaptureSettings * _Nonnull capture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


/// Defines the set of colors used in SDK.
SWIFT_CLASS_NAMED("ColorPalette")
@interface SBLColorPalette : NSObject
/// The color displayed most frequently across your app’s screens and components.
@property (nonatomic, strong) UIColor * _Nonnull primary;
/// The lighter or darker variant of the <code>primary</code> color.
@property (nonatomic, strong) UIColor * _Nonnull primaryVariant;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>primary</code> and <code>primaryVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onPrimary;
/// The accent color.
@property (nonatomic, strong) UIColor * _Nonnull secondary;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>secondary</code>  color.
@property (nonatomic, strong) UIColor * _Nonnull onSecondary;
/// The color that appears behind scrollable content.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color of text, iconography, strokes, and some surfaces, shown on top of <code>background</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onBackground;
/// Defines the color of surfaces of components, such as cards, sheets, and menus.
@property (nonatomic, strong) UIColor * _Nonnull surface;
/// The lighter or darker variant of the <code>surface</code> color.
@property (nonatomic, strong) UIColor * _Nonnull surfaceVariant;
/// The color of text, iconography, and strokes, shown on top of <code>surface</code>or <code>surfaceVariant</code>  colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurface;
/// The color of emphasized text, iconography, and strokes, shown on top of <code>surface</code> or <code>surfaceVariant</code> colors.
@property (nonatomic, strong) UIColor * _Nonnull onSurfaceFocus;
/// The color or error background
@property (nonatomic, strong) UIColor * _Nonnull error;
/// The color of text, iconography, and strokes, shown on top of <code>error</code> color.
@property (nonatomic, strong) UIColor * _Nonnull onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
/// Sends the current configuration in JSON format to the logging system
- (void)prettyPrint;
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


/// Defines capture settings used in SDK
SWIFT_CLASS_NAMED("CaptureSettings")
@interface SBLCaptureSettings : NSObject
/// Capture feature flags
@property (nonatomic, strong) SBLCaptureFeatureFlags * _Nonnull features;
/// Capture UI style
@property (nonatomic, strong) SBLCaptureStyle * _Nonnull theme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


SWIFT_CLASS_NAMED("SensibillUIFonts")
@interface SBLSensibillUIFonts : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end


/// :nodoc: Sensibill UI Configuration properties
SWIFT_CLASS_NAMED("SensibillUIConfiguration")
@interface SBLSensibillUIConfiguration : NSObject
/// A definition of fonts used for Sensibill UI
@property (nonatomic, strong) SBLSensibillUIFonts * _Nonnull webFonts;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
@end



@interface SBLSDKConfiguration (SWIFT_EXTENSION(Sensibill))
/// Attempts to provide localized string for given key. If SDKConfiguration.externalBundle is defined then search would be made first in strings provided in external bundle otherwise search would be made in SDK provided localized strings table.
+ (NSString * _Nonnull)localizedStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end





typedef SWIFT_ENUM(NSInteger, SensibillError, open) {
/// 0 - Success
  SensibillErrorNone = 0,
/// -500 - Internal server error. Please contact Sensibill team if encountered.
  SensibillErrorApiInternalServerError = -500,
/// 1 - SDK was not able to recognize the error.
  SensibillErrorUnknownError = 1,
/// 2 - Status code of HTTP response could not be interpreted as success or failure and no error was returned.
  SensibillErrorApiUnknownStatusCode = 2,
/// 3 - A general error with domain NSURLError.
  SensibillErrorFdnNSURLUnknownError = 3,
/// 1000 - Not entitled to access an object (user, receipt, merchant or client) based on current access token
  SensibillErrorApiNoAccess = 1000,
/// 1001 - User is not authorized
  SensibillErrorApiNoAuthorization = 1001,
/// 1002 - Invalid credentials provided
  SensibillErrorApiNoAuthCannotAuthenticate = 1002,
/// 1003 - The password is temporary, and will be authorized when reset by the user
  SensibillErrorApiNoAuthPasswordTemporary = 1003,
/// 1004 - Authorization Grant Failure
  SensibillErrorSdkAuthorizationGrantFailure = 1004,
/// 1010 - Too many failed login attempts
  SensibillErrorApiNoAuthTooManyLoginFailures = 1010,
/// 1011 - Incorrect email/password combination
  SensibillErrorApiInvalidCredential = 1011,
/// 1012 - Missing parameter in authentication request (email/password, or accessID/accessSecret/credentialType)
  SensibillErrorApiMissingCredentials = 1012,
/// 1013 - Authentication error, e.g. authentication required, or cancelled by a client
  SensibillErrorFdnNSURLAuthenticationError = 1013,
/// 1014 - Logout failed
  SensibillErrorSdkLogoutFailed = 1014,
/// 1015 - User details are missing
  SensibillErrorSdkMissingUserDetails = 1015,
/// 1016 - Missing User Credentials
  SensibillErrorSdkMissingCredentials = 1016,
/// 1020 - Access Token Retrieval Failure
  SensibillErrorSdkAccessTokenRetrievalFailure = 1020,
/// 1021 - Client Token Retrieval Failure
  SensibillErrorSdkClientTokenRetrievalFailure = 1021,
/// 1022 - Received response could not be parsed as token
  SensibillErrorSdkParseTokenFailure = 1022,
/// 1023 - Refresh token is missing
  SensibillErrorSdkMissingRefreshToken = 1023,
/// 1024 - Request failed with error 401, even after token was successfully refreshed. May indicate that token provider returns invalid token.
  SensibillErrorSdkAuthenticationFailureAfterTokenRefresh = 1024,
/// 1030 - Request omitted a required parameter, or invalid value was provided for a required parameter.
  SensibillErrorApiBadRequest = 1030,
/// 1031 - One or more invalid parameters were passed in the request
  SensibillErrorApiInvalidParameters = 1031,
/// 1032 - One or more parameters were missing in the request
  SensibillErrorApiMissingParameters = 1032,
/// 1033 - Extra parameter in request, or attempt to modify read-only parameter
  SensibillErrorApiParameterNotAllowed = 1033,
/// 1034 - Request body is missing
  SensibillErrorApiMissingRequestBody = 1034,
/// 1035 - Validation failed on added/modified entiity. Check parameter values (e.g. incorrectly formatted dates)
  SensibillErrorApiValidationFailed = 1035,
/// 1036 - Requested entity was not found
  SensibillErrorApiObjectNotFound = 1036,
/// 1037 - Conflicting values provided. For example if there is already an email account with the provided email address
  SensibillErrorApiRequestConflict = 1037,
/// 1038 - Logout request returned an error
  SensibillErrorApiLogoutFailed = 1038,
/// 1040 - Response was not returned or could not be understood
  SensibillErrorFdnNSURLResponseError = 1040,
/// 1041 - Response could not be parsed as UserAPIModel
  SensibillErrorSdkParseUserModelFailure = 1041,
/// 1042 - Response could not be parsed as PasswordEvaluation
  SensibillErrorSdkParsePwdStrengthFailure = 1042,
/// 1043 - Response from one of the Availability endpoints could not be parsed
  SensibillErrorSdkParseCheckExistenceModelFailure = 1043,
/// 1044 - Response could not be parsed as SupportedCurrenciesAPIModel
  SensibillErrorSdkParseCurrenciesModelFailure = 1044,
/// 1045 - Response could not be parsed as ReceiptAPIModel
  SensibillErrorSdkParseReceiptModelFailure = 1045,
/// 1046 - Response could not be parsed as ReceiptAPIModel
  SensibillErrorSdkParseTagsModelFailure = 1046,
/// 1047 - No data returned in response
  SensibillErrorSdkNoDataInResponse = 1047,
/// 1048 - Sensibill API Client task execution error. See log for the cause of the error.
  SensibillErrorSdkSensibillAPITaskExecutionError = 1048,
/// 1049 - Cannot parse response data as expected model. See log for the cause of the error.
  SensibillErrorSdkParseDataModelFailed = 1049,
/// 1050 - Configuration provided in Sensibill.plist is invalid. Verify log for more information
  SensibillErrorSdkInvalidConfiguration = 1050,
/// 1051 - Sensibill.plist file was not found. Verify log for more information
  SensibillErrorSdkMissingConfigurationFile = 1051,
/// 1052 - The contents of Sensibill.plist could not be read or parsed.
  SensibillErrorSdkConfigurationFileParsingFailed = 1052,
/// 1053 - SDK configuration is missing one or more values
  SensibillErrorSdkMissingConfigurationValues = 1053,
/// 1054 - Some of the certificate files, specified in Sensibill.plist were not found
  SensibillErrorSdkMissingCertificateFilesForPinning = 1054,
/// 1055 - SDK configuration is missing Credential Type
  SensibillErrorSdkMissingCredentialType = 1055,
/// 1056 - Current context is missing cache identifier
  SensibillErrorSdkMissingCacheIdentifier = 1056,
/// 1057 - SDK failed to refresh folder collection for current user
  SensibillErrorSdkFolderRefreshFailure = 1057,
/// 1058 - User is missing in current context
  SensibillErrorSdkMissingUserInContext = 1058,
/// 1059 - TokenProvider object of SDK instance is not set
  SensibillErrorSdkMissingTokenProvider = 1059,
/// 1060 - Request was cancelled
  SensibillErrorFdnNSURLCancelled = 1060,
/// 1061 - Request timed out
  SensibillErrorFdnNSURLRequestTimeout = 1061,
/// 1062 - Cannot connect to server (e.g. DNS resolution, or routing issue)
  SensibillErrorFdnNSURLCannotConnectToServer = 1062,
/// 1063 - Network connection error (e.g. not connected to internet)
  SensibillErrorFdnNSURLNetworkConnectionError = 1063,
/// 1064 - SSL error, e.g. certificate issues
  SensibillErrorFdnNSURLSSLError = 1064,
/// 1065 - Application is trying to access a wrong URL
  SensibillErrorFdnNSURLWrongUrl = 1065,
/// 1066 - An error occurred while validating sserver certificate pinning. See log for more information.
  SensibillErrorCertificatePinningError = 1066,
/// 1080 - Start cannot be called at this time. SDK is already starting, running, or stopping. Wait for completion or call <code>stop</code> to interrupt and restart.
  SensibillErrorSdkCannotStart = 1080,
/// 1081 - Start of SDK was interrupted by a user-initiated <code>stop</code>
  SensibillErrorSdkStartWasInterrupted = 1081,
/// 1082 - SDK is already stopping. Wait for completion.
  SensibillErrorSdkIsAlreadyStopping = 1082,
/// 1083 - SDK must be started to perform a requested operation.
  SensibillErrorSdkNotStarted = 1083,
};
static NSString * _Nonnull const SensibillErrorDomain = @"Sensibill.SensibillError";

enum SBLUserMode : NSInteger;

/// Main class used to configure the Sensibill Environment
SWIFT_CLASS("_TtC9Sensibill12SensibillSDK")
@interface SensibillSDK : NSObject
/// Singleton Instance of the Sensibill Class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SensibillSDK * _Nonnull shared;)
+ (SensibillSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Single User Mode :nodoc:
@property (nonatomic) enum SBLUserMode userMode;
/// User defined locale. Defaults to en-CA
@property (nonatomic, copy) NSLocale * _Nullable userDefinedLocale;
/// An instance of <code>TokenProvider</code> provided on start
@property (nonatomic, strong) id <SBLTokenProvider> _Nullable tokenProvider;
/// Locale. Our API only supports a set of locales.
/// This property returns the locale that will effectively be used.
/// Can be different than userDefinedLocale
@property (nonatomic, readonly, copy) NSLocale * _Nonnull locale;
/// Currently used client token :nodoc:
@property (nonatomic, copy) NSString * _Nullable clientToken;
/// Cache identifier for currently authenticated user :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable cacheIdentifier;
/// Returns <code>true</code> if current state is <code>stopping</code> to provide ability for other classes to not start initialization.
@property (nonatomic, readonly) BOOL isStopping;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Request to start SDK. Note that this is an asynchronous operation. Caller must wait for start callback to return and succeed before attempting any further interaction with SDK.
+ (void)startWithTokenProvider:(id <SBLTokenProvider> _Nonnull)tokenProvider cacheIdentifier:(NSString * _Nullable)cacheIdentifier completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// See <code>class func start</code>  :nodoc:
- (void)startWithTokenProvider:(id <SBLTokenProvider> _Nonnull)tokenProvider cacheIdentifier:(NSString * _Nullable)cacheIdentifier completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Requests to stop the SDK and invalidates user token.
/// If called during start, will stop the SDK whenever possible and will return <code>startWasInterrupted</code> error in start callback.
/// \param completion a block to be called after SDK was stopped
///
+ (void)stopWithCompletion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Requests to stop the SDK. Allows to specify if user token must be invalidated.
/// If called during start, will stop the SDK whenever possible and will return <code>startWasInterrupted</code> error in start callback.
/// \param invalidateToken Allows to specify if user token must be invalidated. Set to <code>false</code> to prevent invalidating the token. Set to <code>true</code>, or omit the argument to invalidate the token.
///
/// \param completion a block to be called after SDK was stopped
///
+ (void)stopWithInvalidateToken:(BOOL)invalidateToken completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// See <code>class func stop</code>  :nodoc:
- (void)stopWithCompletion:(void (^ _Nonnull)(enum SensibillError))completion;
/// See <code>class func stop</code>  :nodoc:
- (void)stopWithInvalidateToken:(BOOL)invalidateToken completion:(void (^ _Nonnull)(enum SensibillError))completion;
/// Refreshes token by calling a <code>tokenProvider</code>, and registers new credentials
- (void)updateTokenWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end







@interface SensibillSDK (SWIFT_EXTENSION(Sensibill))
/// Currently used environment URL :nodoc:
@property (nonatomic, readonly, copy) NSURL * _Nullable environment;
/// Currently used pinning files :nodoc:
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull pinningFiles;
/// Currently used API key :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable apiKey;
/// Currently used API Secret :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable apiSecret;
/// Currently used redirect URL :nodoc:
@property (nonatomic, readonly, copy) NSURL * _Nullable redirectUrl;
/// Currently used credential type :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nullable credentialType;
/// Configure with specified parameters. Throws SensibillError. Internal Use Only :nodoc:
- (BOOL)configureWithEnvironment:(NSURL * _Nullable)environment key:(NSString * _Nullable)key secret:(NSString * _Nullable)secret redirect:(NSURL * _Nullable)redirect credentialType:(NSString * _Nullable)credentialType pinningFiles:(NSArray<NSString *> * _Nonnull)pinningFiles error:(NSError * _Nullable * _Nullable)error;
/// Configure from file. Throws SensibillError. Internal Use Only :nodoc:
- (BOOL)configureWithPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Attempts to configure SDK by loading configuration file (supported type plist) either in main bundle or SDKConfiguration.externalBundle. Throws SensibillError. Internal Use Only :nodoc:
- (BOOL)configureAndReturnError:(NSError * _Nullable * _Nullable)error;
@end





@protocol SensibillUICoordinatorDelegate;
enum PresentationMethod : NSInteger;
@class SensibillUICoordinatorStartOptions;

/// Object used to provide an easy interface for clients to display Sensibill’s UI. This class handles all internal state and movement between screens internally to Sensibill UI.
SWIFT_CLASS_NAMED("SensibillUICoordinator")
@interface SensibillUICoordinator : NSObject
/// A delegate that will receive events from <code>SensibillUICoordinator</code>
@property (nonatomic, weak) id <SensibillUICoordinatorDelegate> _Nullable delegate;
/// Initialize for modal presentation
/// \param host <code>UIViewController</code> over which the Sensibill UI will be presented modally
///
- (nonnull instancetype)initWithHost:(UIViewController * _Nonnull)host;
/// Initialize for selected presentation
/// \param host <code>UIViewController</code> over which the Sensibill UI will be presented
///
/// \param presentationMethod Presentation method
///
- (nonnull instancetype)initWithHost:(UIViewController * _Nonnull)host presentationMethod:(enum PresentationMethod)presentationMethod OBJC_DESIGNATED_INITIALIZER;
/// Starts Sensibill UI with animation, and navigates to default page (Dashboard).
- (void)start;
/// Start Sensibill UI with specified start options.
/// \param options the start options to use
///
- (void)startWithOptions:(SensibillUICoordinatorStartOptions * _Nonnull)options;
/// Notifies <code>SensibillUICoordinatorDelegate</code>that Sensibill UI should be closed.
/// If modal presentation is used, the view will be dismissed, otherwise integrating app should dismiss the view.
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SensibillUICoordinator (SWIFT_EXTENSION(Sensibill))
@end


/// Responsible for encapsulation of SensibillUICoordinator start options.
SWIFT_CLASS_NAMED("StartOptions")
@interface SensibillUICoordinatorStartOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@interface SensibillUICoordinator (SWIFT_EXTENSION(Sensibill))
@end

/// Defines the supported presentation methods
typedef SWIFT_ENUM(NSInteger, PresentationMethod, open) {
/// Will present Sensibill’s UI modally over provided host UIViewController
  PresentationMethodModal = 0,
/// Will embed Sensibill’s UI into the provided host as a child UIViewController
  PresentationMethodEmbed = 1,
/// Will push Sensibill’s UI into the provided UINavigationController host. Will present modally if the host is not a UINavigationController.
  PresentationMethodPush = 2,
};











@interface SensibillUICoordinator (SWIFT_EXTENSION(Sensibill)) <SBLCaptureFlowCoordinatorDelegate>
/// :nodoc: Notifies the delegate that the capture will be present
- (void)coordinatorWillBeginCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
/// :nodoc: Notifies the delegate that the capture was cancelled
- (void)coordinatorDidCancelCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator;
/// :nodoc: Notifies the delegate that the capture has finished, and provides a list of <code>Transaction</code>s submitted for processing.
- (void)coordinatorDidFinishCapture:(SBLCaptureFlowCoordinator * _Nonnull)coordinator transactions:(NSArray<SBLTransaction *> * _Nonnull)transactions;
@end






/// A conforming class will receive events from <code>SensibillUICoordinator</code>
SWIFT_PROTOCOL_NAMED("SensibillUICoordinatorDelegate")
@protocol SensibillUICoordinatorDelegate <NSObject>
@optional
/// Informs the app that the start function will present the WebUINavigationController, and gives them a reference to it.
/// \param coordinator coordinator responsible for handling the Sensibill UI flow
///
/// \param webUINavigationController the webUINavigationController that will be presented
///
- (void)coordinator:(SensibillUICoordinator * _Nonnull)coordinator willPresent:(UINavigationController * _Nonnull)webUINavigationController;
/// Informs the app that the start function has completed presenting the WebUINavigationController, and gives them a reference to it.
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
/// \param webUINavigationController the webUINavigationController that was presented
///
- (void)coordinator:(SensibillUICoordinator * _Nonnull)coordinator didPresent:(UINavigationController * _Nonnull)webUINavigationController;
/// Informs the integrated app that the coordinator is starting the capture flow.
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (void)coordinatorWillPresentCapture:(SensibillUICoordinator * _Nonnull)coordinator;
/// Informs the app that WebUI encountered a fatal error. Asks if the built in error screen should be displayed
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (BOOL)coordinatorShouldShowFatalErrorView:(SensibillUICoordinator * _Nonnull)coordinator SWIFT_WARN_UNUSED_RESULT;
/// Informs the app that there was an error starting the UI flow
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
/// \param error The error thrown by the coordinator
///
- (void)coordinator:(SensibillUICoordinator * _Nonnull)coordinator encountered:(NSError * _Nonnull)error;
/// Informs the app that WebUI will be restarted
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (void)coordinatorWillRestartWebUI:(SensibillUICoordinator * _Nonnull)coordinator;
@required
/// Informs the app that WebUI must be terminated
/// \param coordinator coordinator responsible for handling the SensibillUI flow
///
- (void)coordinatorWillTerminateWebUI:(SensibillUICoordinator * _Nonnull)coordinator;
@end


@interface SBLSensibillUIFonts (SWIFT_EXTENSION(Sensibill))
/// Allows to set <code>regular</code> font in Objective-C.
- (void)setRegularWithFamily:(NSString * _Nonnull)family url:(NSString * _Nonnull)url;
@end


/// :nodoc: Stores the metadata for the receipt
SWIFT_CLASS_NAMED("SharedMetaData")
@interface SBLSharedMetaData : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// The expence type as a string, e.g. “business”, or “personal”
@property (nonatomic) enum SBLReceiptExpenseType expenseType;
/// Indicates whether receipt is a favorite. Default is <code>false</code>
@property (nonatomic) BOOL favorite;
/// The array of folder IDs
@property (nonatomic, copy) NSArray<NSString *> * _Nullable folders;
/// A receipt note
@property (nonatomic, copy) NSString * _Nullable note;
/// A receipt category code
@property (nonatomic, copy) NSString * _Nullable receiptCategory;
/// Additional categories for the receipts
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tags;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end





@interface SBLSharedMetaData (SWIFT_EXTENSION(Sensibill))
/// For Objective-C only, use <code>dictionary</code> in Swift. Converts <code>SharedMetaData</code> to dictionary. The names of the fields correspond the Sensibill API specifications
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
/// For Objective-C only, use <code>expenseType.code</code> in Swift. Provides a string code for <code>expenseType</code>, compatible with API values
@property (nonatomic, readonly, copy) NSString * _Nullable expenseTypeCode;
@end


@interface SensibillUICoordinatorStartOptions (SWIFT_EXTENSION(Sensibill))
@end


/// Provides a convenience interface for building a <code>SensibillUICoordinator.StartOptions</code>
SWIFT_CLASS_NAMED("Builder")
@interface SensibillUICoordinatorStartOptionsBuilder : NSObject
/// Initializes the builder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add boolean value for <code>animated</code> property of <code>SensibillUICoordinator.StartOptions</code>
- (SensibillUICoordinatorStartOptionsBuilder * _Nonnull)addWithAnimated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Add <code>NavigationIntent.METADATA_EDIT</code> by associating localIDs of provided <code>Transactions</code>
- (SensibillUICoordinatorStartOptionsBuilder * _Nonnull)addEditMetadataIntentWithTransactions:(NSArray<SBLTransaction *> * _Nonnull)transactions SWIFT_WARN_UNUSED_RESULT;
/// For Objective-C use only.
/// Attempts to build instance of <code>NavigationIntent</code> using <code>SBLNavigationIntent</code> and parameter.
/// Add instance of <code>NavigationIntent</code> for <code>navigationIntent</code> property of <code>SensibillUICoordinator.StartOptions</code>.
- (SensibillUICoordinatorStartOptionsBuilder * _Nonnull)addWithNavigationIntent:(enum SBLNavigationIntent)navigationIntent parameter:(NSString * _Nullable)parameter SWIFT_WARN_UNUSED_RESULT;
/// Complete the building by providing a <code>SensibillUICoordinator.StartOptions</code>
- (SensibillUICoordinatorStartOptions * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("SupportedCurrencyCollection")
@interface SBLSupportedCurrencyCollection : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLSupportedCurrencyCollection * _Nonnull shared;)
+ (SBLSupportedCurrencyCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nullable currencies;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Use the TagCollection shared instance to query the list of user tags :nodoc:
SWIFT_CLASS_NAMED("TagCollection")
@interface SBLTagCollection : NSObject
/// TagCollection singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLTagCollection * _Nonnull shared;)
+ (SBLTagCollection * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Find all user tags
/// \param completion block executed when the request is complete. Passes an array of strings or an error.
///
- (void)findWithCompletion:(void (^ _Nonnull)(NSSet<NSString *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// :nodoc: Represents Taxes
SWIFT_CLASS_NAMED("Tax")
@interface SBLTax : NSObject <NSSecureCoding>
/// Value for that tax
@property (nonatomic) double value;
/// Tax percentage
@property (nonatomic) double rate;
/// Type of tax
@property (nonatomic, copy) NSString * _Nullable type;
/// NSSecureCoding Protocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is responsible for providing new tokens if the current tokens were to expire.
/// The standard implentation operates the refresh token that were retrieved during authentication
/// for flows that don’t include an integration server.
/// You should create a subclass of TokenProvider, and override the provideTokenReplacement method.
/// In that method call the completion block passed as parameter and provide a new set of
/// credentials, or an error.
SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol SBLTokenProvider
/// Method called when the Sensibill SDK needs an access token.
/// Override this method in your own implementation
/// \param completion Block to call when the token refresh operation is completed.
/// If a non-nil object is passed as the <code>error</code> argument, the SDK will
/// assume token retrieval has failed and will no longer call this method
/// again until the SDK is started again.
///
- (void)provideTokenReplacementWithCompletion:(void (^ _Nonnull)(SBLCredentials * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("TrackingEvent")
@interface SBLTrackingEvent : NSObject
/// All event fields as a dictionary.
/// The dictionary will contain <code>TrackingEvent.Fields</code>, as well as any other custom properties set for the event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull asDictionary;
/// The initializer. Automatically sets the <code>User.current?.accessId</code> value if available
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// :nodoc: Returns an instance of the event with provided name.
+ (SBLTrackingEvent * _Nonnull)eventWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end



@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
/// The detailed description of the event
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSNumber;

@interface SBLTrackingEvent (SWIFT_EXTENSION(Sensibill))
- (id _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(id _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)name;
/// Feature of the event
@property (nonatomic, copy) NSString * _Nullable feature;
/// Name of the event
@property (nonatomic, copy) NSString * _Nullable name;
/// Category of the event
@property (nonatomic, copy) NSString * _Nullable category;
/// Action that triggered event
@property (nonatomic, copy) NSString * _Nullable action;
/// The area of the UI where the event took place
@property (nonatomic, copy) NSString * _Nullable screenName;
/// A numeric value associated with the event
@property (nonatomic, strong) NSNumber * _Nullable value;
/// The name of the user associated with the event
@property (nonatomic, copy) NSString * _Nullable userId;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBLTransactionError, "TransactionError", open) {
/// No error
  SBLTransactionErrorNoError = 0,
/// Transaction is invalid: type was not set
  SBLTransactionErrorTransactionTypeIsMissing = 1,
/// Transaction is invalid: not finished, but cannot be uploaded, monitored, or updated
  SBLTransactionErrorTransactionHasNoValidProcessor = 2,
/// Transaction state is invalid for upload: <code>imageData</code> is not set
  SBLTransactionErrorUploadCancelledNoImage = 3,
/// Transaction state is invalid for polling: <code>remoteId</code> is not set
  SBLTransactionErrorPollMissingRemoteId = 4,
/// Transaction state is invalid for conversion: <code>emailId</code> is not set
  SBLTransactionErrorConversionMissingEmailId = 5,
/// Retry: upload request failed too many times
  SBLTransactionErrorUploadFailedTooManyTimes = 6,
/// Retry: poll for transaction updates failed too many times
  SBLTransactionErrorPollFailedTooManyTimes = 7,
/// Retry: update receipt failed too many times
  SBLTransactionErrorUpdateFailedTooManyTimes = 8,
/// Retry: receipt conversion failed too many times
  SBLTransactionErrorConversionFailedTooManyTimes = 9,
/// Retake: Transaction state is invalid for upload: <code>imageData</code> is too big. Reduce image size to 5 MB or less.
  SBLTransactionErrorUploadCancelledImageTooBig = 10,
/// On upload request, server returned a response, that could not be interpreted, and is considered invalid
  SBLTransactionErrorUploadInvalidResponse = 11,
/// On wait request, server returned a response, that could not be interpreted, and is considered invalid
  SBLTransactionErrorPollInvalidResponse = 12,
/// Server returned a <code>stopped</code> status for transaction
  SBLTransactionErrorWasStoppedOnServer = 13,
/// Server returned a <code>failed</code> status for transaction
  SBLTransactionErrorFailedOnServer = 14,
/// Server returned status code 400 (bad request)
  SBLTransactionErrorBadRequest = 15,
/// Server returned status code 401 (unauthorized)
  SBLTransactionErrorUnauthorized = 16,
/// Server returned status code 403 (forbidden)
  SBLTransactionErrorForbidden = 17,
};


SWIFT_CLASS_NAMED("TransactionHandler")
@interface SBLTransactionHandler : NSObject
/// Singleton Instance of the TransactionHandler Class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLTransactionHandler * _Nonnull shared;)
+ (SBLTransactionHandler * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there are any transactions at all
@property (nonatomic, readonly) BOOL hasTransactions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@interface SBLTransactionHandler (SWIFT_EXTENSION(Sensibill))
- (SBLTransaction * _Nullable)transactionForReceiptID:(NSString * _Nullable)receiptID SWIFT_WARN_UNUSED_RESULT;
- (SBLTransaction * _Nullable)transactionForRemoteID:(NSString * _Nullable)remoteID SWIFT_WARN_UNUSED_RESULT;
- (SBLTransaction * _Nullable)transactionForLocalID:(NSString * _Nullable)localID SWIFT_WARN_UNUSED_RESULT;
- (SBLTransaction * _Nullable)transactionForEmailID:(NSString * _Nullable)emailID SWIFT_WARN_UNUSED_RESULT;
@end



@interface SBLTransactionHandler (SWIFT_EXTENSION(Sensibill))
/// Add a new transaction for processing
- (void)add:(SBLTransaction * _Nullable)transaction;
/// Remove a provided transaction
- (void)remove:(SBLTransaction * _Nonnull)transaction;
- (void)removeAllIn:(NSArray<SBLTransaction *> * _Nonnull)transactions;
/// Submit email for processing as receipt. Used when automated conversion on server failed, but user would still like to convert an email to receipt
- (void)convertWithNonReceiptEmail:(SBNonReceiptEmail * _Nonnull)email didSucceed:(void (^ _Nonnull)(BOOL))didSucceed;
- (void)retry:(SBLTransaction * _Nonnull)transaction;
@end



@interface SBLTransactionHandler (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull failedImageTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull failedEmailTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull completedEmailTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull inFlightTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull processingTransactions;
@property (nonatomic, readonly, copy) NSArray<SBLTransaction *> * _Nonnull offlineTransactions;
@end


/// note:
/// Use this protocol to monitor a single transaction. To monitor all transactions, use <code>SBDataEvent</code>.
/// <ul>
///   <li>
///     Protocol defines methods to monitor receipt uploading transaction progress
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("TransactionObserver")
@protocol SBLTransactionObserver <NSObject>
/// Informs that given transaction’s status (reflected in <code>status</code> property) has changed.
/// \param transaction updated transaction information
///
- (void)statusDidChangeForTransaction:(SBLTransaction * _Nonnull)transaction;
@optional
/// Informs that given transaction’s processing time (reflected in <code>expectedProcessingTime</code> property) has changed.
/// \param transaction updated transaction information
///
- (void)expectedProcessingTimeDidChangeForTransaction:(SBLTransaction * _Nonnull)transaction;
@end

/// Defines a transaction processing status
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTransactionStatus, "TransactionStatus", open) {
/// Transaction status is not yet known. Upon local transaction validation this status can change to <code>uploading</code> or <code>failed</code>.
  SBLTransactionStatusUnknown = 0,
/// Transaction processing started. This status is set immediately after transaction was locally validated. This status will be kept until a response from server is received and can be followed by <code>processing</code>, <code>completed</code>, or <code>failed</code> status.
  SBLTransactionStatusUploading = 1,
/// Transaction is being processed by the server. This value is set after transaction was accepted by the server for processing, and can be followed by <code>completed</code>, or <code>failed</code> status.
  SBLTransactionStatusProcessing = 2,
/// Transaction processing had finished successfully. This is a final status.
  SBLTransactionStatusCompleted = 3,
/// Transaction validation or processing had failed. This is a final status.
  SBLTransactionStatusFailed = 4,
};

/// Source type of transaction information
typedef SWIFT_ENUM_NAMED(NSInteger, SBLTransactionType, "TransactionType", open) {
/// Receipt type is not available
  SBLTransactionTypeUndefined = 0,
/// Transaction information for scanned receipt
  SBLTransactionTypeImage = 1,
/// Transaction information for receipt retrieved from the email
  SBLTransactionTypeEmail = 2,
/// Transaction information for receipts converted from non-receipt emails
  SBLTransactionTypeNonReceiptEmail = 3,
/// Transaction to update receipt information
  SBLTransactionTypeUpdate = 4,
};

@class SBSecurityPolicy;

/// Trust manager for Sensibill Web client. Internal use only. :nodoc:
SWIFT_CLASS_NAMED("TrustManager")
@interface SBLTrustManager : NSObject
/// Legacy function for certificates pinning from bundle. Internal use only. :nodoc:
+ (SBSecurityPolicy * _Nonnull)policyFromBundleWithPinningMode:(SBSSLPinningMode)pinningMode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










@interface UIColor (SWIFT_EXTENSION(Sensibill))
/// Convenience function for Objective-C classes. Swift classes can use <code>UIColor(hex: ...)</code> constructor directly.
+ (UIColor * _Nonnull)sblColorWithHexString:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
/// Provides a CSS-compatible Hex code of the color from UIColor, e.g. #FFCC02
@property (nonatomic, readonly, copy) NSString * _Nonnull hexValue;
@end

















@interface UIImage (SWIFT_EXTENSION(Sensibill))
/// :nodoc:
+ (UIImage * _Nullable)sblImageWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end




@interface UINavigationController (SWIFT_EXTENSION(Sensibill))
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@end










/// Easy access to API endpoints. Only for internal use (for now). :nodoc:
SWIFT_CLASS_NAMED("URLConstant")
@interface SBLURLConstant : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull home;)
+ (NSString * _Nonnull)home SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull authorizationGrant;)
+ (NSString * _Nonnull)authorizationGrant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accessToken;)
+ (NSString * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull jwtAuthentication;)
+ (NSString * _Nonnull)jwtAuthentication SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull logout;)
+ (NSString * _Nonnull)logout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientInfo;)
+ (NSString * _Nonnull)clientInfo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull users;)
+ (NSString * _Nonnull)users SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull me;)
+ (NSString * _Nonnull)me SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull counts;)
+ (NSString * _Nonnull)counts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tags;)
+ (NSString * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkPasswordStrength;)
+ (NSString * _Nonnull)checkPasswordStrength SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkExistenceAccessId;)
+ (NSString * _Nonnull)checkExistenceAccessId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkExistenceEmail;)
+ (NSString * _Nonnull)checkExistenceEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull checkExistenceReceiptEmail;)
+ (NSString * _Nonnull)checkExistenceReceiptEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull forgotPassword;)
+ (NSString * _Nonnull)forgotPassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resetTemporaryPassword;)
+ (NSString * _Nonnull)resetTemporaryPassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setPassword;)
+ (NSString * _Nonnull)setPassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull folders;)
+ (NSString * _Nonnull)folders SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receipts;)
+ (NSString * _Nonnull)receipts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receiptTransaction;)
+ (NSString * _Nonnull)receiptTransaction SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receipt;)
+ (NSString * _Nonnull)receipt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wait;)
+ (NSString * _Nonnull)wait SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reminders;)
+ (NSString * _Nonnull)reminders SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy, getter=export) NSString * _Nonnull export_;)
+ (NSString * _Nonnull)export SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull exports;)
+ (NSString * _Nonnull)exports SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lookups;)
+ (NSString * _Nonnull)lookups SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull receiptCategories;)
+ (NSString * _Nonnull)receiptCategories SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull locales;)
+ (NSString * _Nonnull)locales SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull currencies;)
+ (NSString * _Nonnull)currencies SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull emails;)
+ (NSString * _Nonnull)emails SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull email;)
+ (NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull merchants;)
+ (NSString * _Nonnull)merchants SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accountsEmail;)
+ (NSString * _Nonnull)accountsEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull intercepts;)
+ (NSString * _Nonnull)intercepts SWIFT_WARN_UNUSED_RESULT;
/// Returns true if provided URL contains API endpoint, which can be retried.
+ (BOOL)canRetryWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Object representation of a Sensibill User
/// Get the current user
SWIFT_CLASS_NAMED("User")
@interface SBLUser : NSObject <NSSecureCoding>
/// :nodoc: NSSecureCoding Protocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// A unique user identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// User access ID, specified on login
@property (nonatomic, copy) NSString * _Nullable accessId;
/// The email of the user
@property (nonatomic, copy) NSString * _Nullable email;
/// The first name of the user
@property (nonatomic, copy) NSString * _Nullable firstName;
/// The last name of the user
@property (nonatomic, copy) NSString * _Nullable lastName;
/// The email used to relay the receipts by email
@property (nonatomic, copy) NSString * _Nullable receiptEmail;
/// Currently authenticated user
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBLUser * _Nullable current;)
+ (SBLUser * _Nullable)current SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SBLUser (SWIFT_EXTENSION(Sensibill))
/// :nodoc:
- (void)saveToCache;
@end

/// User Mode for Sensibill SDK, used for backwards compatibility :nodoc:
typedef SWIFT_ENUM_NAMED(NSInteger, SBLUserMode, "UserMode", open) {
/// Multiple Users
  SBLUserModeMultiple = 0,
/// Single User
  SBLUserModeSingle = 1,
};


SWIFT_CLASS_NAMED("UserSubmittedData")
@interface SBLUserSubmittedData : NSObject <NSSecureCoding>
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// The grand total
@property (nonatomic) float grandTotal;
/// The receipt date as a string
@property (nonatomic, copy) NSString * _Nullable receiptDate;
/// The name of the merchant
@property (nonatomic, copy) NSString * _Nullable merchantName;
/// The category of the receipt as a string
@property (nonatomic, copy) NSString * _Nullable receiptCategory;
/// Currency code as a string
@property (nonatomic, copy) NSString * _Nullable currencyCode;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



@interface SBLUserSubmittedData (SWIFT_EXTENSION(Sensibill))
/// For Objective-C only, use <code>dictionary</code> in Swift. Converts <code>UserSubmittedData</code> to dictionary. The names of the fields correspond the Sensibill API specifications
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull sblDictionary;
@end





/// The entry point of the module used by an integrator to create and configure WebUI
SWIFT_CLASS("_TtC9Sensibill25WebUINavigationController")
@interface WebUINavigationController : UINavigationController
/// Design-time initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

#endif
